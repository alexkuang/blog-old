<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[alex kuang]]></title>
  <link href="http://alexkuang.github.io/atom.xml" rel="self"/>
  <link href="http://alexkuang.github.io/"/>
  <updated>2013-12-20T13:06:58-05:00</updated>
  <id>http://alexkuang.github.io/</id>
  <author>
    <name><![CDATA[Alex Kuang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Clojure First Impressions]]></title>
    <link href="http://alexkuang.github.io/blog/2013/12/20/clojure-first-impressions/"/>
    <updated>2013-12-20T14:05:00-05:00</updated>
    <id>http://alexkuang.github.io/blog/2013/12/20/clojure-first-impressions</id>
    <content type="html"><![CDATA[<p>After achieving some measure of familiarity with Scala, and with newfound copious amounts of free time, I decided I
wanted to see more of what the functional world had to offer.  The obvious choices were Haskell and Clojure; but while
Haskell has the upper hand in functional purity and a crazy advanced type system, I like to think I&rsquo;m a pragmatic guy at
heart and Clojure seemed more practical.  I haven&rsquo;t worked with it too extensively, but my experience so far can be
summarized by two words: Simple and composable.</p>

<h4>The language</h4>

<p>Clojure is a refreshingly simple language.  Despite my last foray into a Lisp being about half a decade ago, the
learning curve was much gentler than I&rsquo;d expected.  Maybe it&rsquo;s because I was already in a functional programming
mindset, but the straightforward syntax and <a href="http://clojure-doc.org/">abundance</a>
<a href="http://clojure.org/getting_started">of</a> <a href="http://clojure.org/cheatsheet">documentation</a> probably helped.  And on a
completely subjective level: <code>iDislikeCamelCase</code>, and <code>clojure-case-is-pretty-neat</code>.</p>

<h4>The ecosystem</h4>

<p>Of course, the overall enjoyability of using a language doesn&rsquo;t depend solely on the core language, but also the
libraries and toolchain available.  Most of the libraries I&rsquo;ve seen keep in line with the design of the language: super
lightweight, super simple, super composable, and as a result super easy to ramp up on and use.  Theoretically that
should just describe all good library design in general, but I feel like the clojure community takes it especially to
heart.</p>

<p>Compojure, for example, chose to implement its url
<a href="https://github.com/weavejester/compojure/wiki/Destructuring-Syntax">destructuring</a> to closely follow the destructuring
available in stock Clojure <code>let</code>s expressions.  I can&rsquo;t help but draw the comparison to Scala, where I&rsquo;d be more likely
to find that url decomposition exists only in the form of an exotic DSL.  Another huge example for me is the difference
between the simplicity of the Clojure build tool Leiningen and the craziness of Scala&rsquo;s SBT.  Sorry SBT&mdash;You work very
well, but I&rsquo;d rather not have to google what the <code>&lt;++=</code> operator does every time I touch the build.</p>

<h4>With vim</h4>

<p>One of my original reasons for leaning clojure was its close integration with
<a href="http://www.chris-granger.com/lighttable/">LightTable</a>.  As it turns out, the functionality I liked could be
replicated in vim with <a href="https://github.com/tpope/vim-fireplace">fireplace.vim</a>&rsquo;s quasi-insta-repl and insta-doc, due in
no small part to leiningen and nrepl&rsquo;s awesomeness.
<a href="https://github.com/kien/rainbow_parentheses.vim">Rainbow parentheses</a> is also pretty cool, and has been useful enough
that I will probably keep it on even when I don&rsquo;t have to deal with the hardcore levels of parens in Lisps:</p>

<p><img class="center" src="http://alexkuang.github.io/images/rainbow-parens.png"></p>

<h4>Overall</h4>

<p>If programming languages could be graded on usability, Clojure would get full marks.  It has been a breath of fresh air
after dealing with the crazy complexity in Scala.  Undoubtedly working through the latter had a part in making the
former much easier, and Scala will always have a place with me, but for now I find myself slowly joining the rest of the
Clojure bandwagon.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zelda as a Metaphor for Complexity]]></title>
    <link href="http://alexkuang.github.io/blog/2013/12/11/zelda-as-a-metaphor-for-complexity/"/>
    <updated>2013-12-11T18:29:00-05:00</updated>
    <id>http://alexkuang.github.io/blog/2013/12/11/zelda-as-a-metaphor-for-complexity</id>
    <content type="html"><![CDATA[<p>Recently, my gaming bandwidth has been taken up by the new Zelda game, A Link Between Worlds.  It&rsquo;s been a while since
my last trip to Hyrule, but I&rsquo;ve always loved the ingenuity behind the dungeons, especially the ones in Ocarina of Time
which could take upwards of hours (Water Temple, I&rsquo;m looking at you) to complete on the first run.  One of them jumps to
mind particularly: The Forest Temple, a dungeon you encounter in the early-mid game immediately after gaining access to
adult Link.</p>

<p>At first glance, it seems like a completely normal dungeon&mdash;You&rsquo;ve got your wolves, you&rsquo;ve got your carnivorous plants,
and the obvious puzzle in the form of 4 torches that have to be lit.  Fairly straightforward, until the game hits you
with this:</p>

<p><img class="center" src="http://alexkuang.github.io/images/forest-temple-hallway.jpg"></p>

<p>The first time you hit the twisting hallway, you have to follow it as-is to the other side, your perspective being
warped, to end up in a room with you standing on its &ldquo;wall&rdquo;.  On the &ldquo;floor&rdquo; is a chest, inaccessible in your current
state, and further on is a door you don&rsquo;t have the key to.  After a few more rooms and a battle with some wolves, you
end up with the bow which allows you to hit a switch to un-twist the hallway, bringing a completely new
perspective to the rooms&mdash;Most obviously, the chest from the earlier &ldquo;floor&rdquo; is now reachable, and after a little
contemplation and a lot of climbing, you get the key to the previously locked door&hellip;  <em>Which you can&rsquo;t access until you
re-twist the hallway.</em></p>

<p>This simple sequence is, in essence, what makes the classical Zelda dungeons challenging and oh so much fun.  In
addition to an &ldquo;item of the moment&rdquo;, each area contains an inventive mechanic that completely changes the landscape
of the entire dungeon.  A room is completely different when your perspective is rotated, platforms become traversable
after you flood the floor with sand, and so on.  It&rsquo;s no longer just <em>Push a block over here</em>, it&rsquo;s <em>Push a block over
here to change the water level so we can push that other block, and then change the water level back to align the two
blocks properly and maybe we can finally get to that chest over there.  Oh wait, that didn&rsquo;t work, maybe if I switch the
water level back BEFORE moving the second block&hellip;</em></p>

<p>Sound familiar?  The hardest dungeons&#8217; mechanics tend to use some piece of outside state to introduce exponentially more
complex interactions between the existing items that Link already has access to.  Interactions that now depend not only
on the current environment, but also the configuration of surrounding environments, and probably the order that
everything was done as well.  Keeping track of all that is welcome, even enjoyable, when I&rsquo;m playing Zelda.  But I have
no wish to be dealing with such things when I&rsquo;m trying to make sure my code is doing what I want it to.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Neophyte's Take on Scala]]></title>
    <link href="http://alexkuang.github.io/blog/2013/12/09/a-neophytes-take-on-scala/"/>
    <updated>2013-12-09T18:12:00-05:00</updated>
    <id>http://alexkuang.github.io/blog/2013/12/09/a-neophytes-take-on-scala</id>
    <content type="html"><![CDATA[<p>A <a href="http://overwatering.org/blog/2013/12/scala-1-star-would-not-program-again/">blog post</a> has recently been making the
rounds in all the usual programming fora&mdash;/r/programming, hackernews, and so on&mdash;even eliciting a
<a href="https://groups.google.com/forum/#!topic/scala-debate/153H3Ya4Nxk">response</a> from Scala&rsquo;s creator himself.  There&rsquo;s a
lot of discussion both productive and inflammatory out there already, but I thought I&rsquo;d jot down my perspective on the
common points as someone who: 1. picked scala up relatively recently (2.9.2 and 2.10), 2. has worked with it for a few
months on the side, and 3. comes from a background of dynamic languages.</p>

<h4>Long Compile Times</h4>

<p>I can definitely see where this is coming from.  Scala&rsquo;s compile times can be pretty long, though I had pegged that as
the cost of using a compiled language anyway.  I, at least, felt a marked increase in times upgrading from <code>2.9.2</code> to
<code>2.10</code>, presumably from the slew of new features like macros.  However, it seems that <code>2.11</code> will thankfully be
<a href="http://java.dzone.com/articles/state-scala-2013">focused</a> on compiler optimizations.  In the meantime, I&rsquo;ve found that
judicious use of some of Scala&rsquo;s heavier features (such as implicits) keeps the compile times manageable.
<a href="http://zeroturnaround.com/software/jrebel/">JRebel</a> has been a godsend as well for hot-reloading in incremental
compilation, and they do offer a personal Scala license for free.  Without JRebel my life as a scala user would have
been a lot harder.</p>

<h4>Opaque Syntax</h4>

<p>I agree completely here.  Scala&rsquo;s flexibility in parsing + its allowance of symbolic method names obviously allows for a
lot of flexibility.  This allows the construction of all sorts of DSLs; whether these DSLs end up being expressive or
just plain confusing, is another thing altogether.  In this case, I&rsquo;d have to say that just because something is
possible does not mean it should be done all the time.</p>

<!-- more -->


<p>The original post mentions that their build script&rsquo;s syntax seemed to be all over the place; I&rsquo;m assuming they were
referring to the de facto scala build tool, <a href="http://www.scala-sbt.org/">sbt</a>.  While it&rsquo;s great in a lot of ways, I
personally am not a big fan of their heavy use of symbolic names either.  Just as an example, a relatively simple build
file for one of my personal projects already has all of the following:</p>

<figure class='code'><figcaption><span>build.sbt </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">libraryDependencies</span> <span class="o">++=</span> <span class="nc">Seq</span><span class="o">(</span> <span class="o">...</span> <span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">testOptions</span> <span class="n">in</span> <span class="nc">Test</span> <span class="o">+=</span> <span class="o">(...)</span>
</span><span class='line'>
</span><span class='line'><span class="n">resourceGenerators</span> <span class="n">in</span> <span class="nc">Compile</span> <span class="o">&lt;+=</span> <span class="o">(...)</span>
</span></code></pre></td></tr></table></div></figure>


<p>All of them are obviously for adding to some sort of sequence, but still different enough to trip you up.  And this is
still relatively shallow territory&mdash;I haven&rsquo;t even mentioned the insanity that comes with more advanced libraries, like
the <a href="http://stackoverflow.com/questions/14472310/pronounceable-names-for-scalaz-operators">fish operator</a>.</p>

<p>In Odersky&rsquo;s google groups thread, he mentions a proposal for requiring an equivalent alphabetical alias for all
symbolic methods.  I hope that goes through.  If nothing else, it&rsquo;ll make the methods easier to google.</p>

<h4>Documentation</h4>

<p>As with any budding technology, documentation tends to lag behind development.  However, language and core library
documentation has improved immensely even in the time since I picked up Scala, so many kudos to the typesafe team for
that.  However, the third-party libraries still have a way to go; as helpful and educational as it may be, source code
should <em>not</em> be the go-to method for research.</p>

<h4>Types and Case Classes</h4>

<p>Here&rsquo;s where I have to respectfully disagree completely with the original post.  I <em>love</em> types and case classes.  Being
able to encode logic in your types that would otherwise have ended up as boilerplate-y edge case checking, <em>and</em> having
the compiler do it for you instead of maintaining the extra tests, is a win in my book.  Coming from a dynamic web
background, having a compiler do some of these checks for me was a breath of fresh air, especially since it doesn&rsquo;t come
at the cost of extreme clunkiness a la Java.</p>

<p>And case classes / <a href="http://learnyouahaskell.com/making-our-own-types-and-typeclasses">algebraic data types</a> are the
bee&rsquo;s knees.  Between the <code>copy</code> method and the free pattern matching, I don&rsquo;t see how case classes do anything but get
rid of repetition.  Forgive the simplistic example:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Calculator</span><span class="o">(</span><span class="n">brand</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">model</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">version</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Extraction, conditionals, and assignment, all done succinctly</span>
</span><span class='line'><span class="k">def</span> <span class="n">calcType</span><span class="o">(</span><span class="n">calc</span><span class="k">:</span> <span class="kt">Calculator</span><span class="o">)</span> <span class="k">=</span> <span class="n">calc</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="nc">Calculator</span><span class="o">(</span><span class="s">&quot;hp&quot;</span><span class="o">,</span> <span class="s">&quot;20B&quot;</span><span class="o">,</span> <span class="mi">1</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="s">&quot;financial&quot;</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'>  <span class="k">case</span> <span class="nc">Calculator</span><span class="o">(</span><span class="n">brand</span><span class="o">,</span> <span class="n">model</span><span class="o">,</span> <span class="n">version</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="s">&quot;Calculator: %s %s %s is of unknown type&quot;</span><span class="o">.</span><span class="n">format</span><span class="o">(</span><span class="n">brand</span><span class="o">,</span> <span class="n">model</span><span class="o">,</span> <span class="n">version</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// No custom methods/etc needed</span>
</span><span class='line'><span class="k">def</span> <span class="n">upgrade</span><span class="o">(</span><span class="n">calc</span><span class="k">:</span> <span class="kt">Calculator</span><span class="o">)</span> <span class="k">=</span> <span class="n">calc</span><span class="o">.</span><span class="n">copy</span><span class="o">(</span><span class="n">version</span> <span class="k">=</span> <span class="n">calc</span><span class="o">.</span><span class="n">version</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Overall impressions</h4>

<p>Despite its flaws, I&rsquo;ve really enjoyed working with Scala and it will probably remain a part of my toolbox.  Its
flexibility and power makes it a great gen-purpose language, especially in its type system and ability to combine
functional programming with OO.  It sits in the JVM, which means interoperability with the existing mammoth Java
ecosystem comes with just a little bit of glue code.  And more importantly, it means that if I should pick up Clojure in
the future, interoperability with THAT will not be too far off either, knock on wood.</p>

<p>That said, it&rsquo;s not by any means a perfect language.  The same flexibility that makes it great to use can often result
in convoluted APIs, and it&rsquo;s very easy to shoot yourself in the foot.  Living in the JVM also means the language has to
deal with things like type erasure; that results in some annoying limitations, especially if you&rsquo;re looking to use scala
in a more advanced functional capacity (see <a href="https://github.com/scalaz/scalaz">scalaz</a>).  And lastly&hellip;  Scala, at least
to me, is one of those tools that feels natural once you&rsquo;re used to it, but requires a significant mental shift to fully
grok&mdash;I wouldn&rsquo;t want to be plopped into scala on a fresh project with a one month deadline.  Ideally, there should be
some better documentation to help bridge that gap.</p>

<p>Luckily, if that mailing list thread is any indication, the community is aware of these shortcomings.  And as the
language and ecosystem mature, they will hopefully become less and less of a problem.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jab, jab]]></title>
    <link href="http://alexkuang.github.io/blog/2013/12/04/jab/"/>
    <updated>2013-12-04T19:04:00-05:00</updated>
    <id>http://alexkuang.github.io/blog/2013/12/04/jab</id>
    <content type="html"><![CDATA[<p>In the past, my biggest problem with blogging has always been with finding something to write about.  Every time an idea
came, I&rsquo;d recall the original post that inspired it, or have one miraculously pop up on google upon doing more
research.  Inevitably the post would be articulate, well-researched, and laden with comments from impressed readers to
boot.  And I would hit control+w, convinced that I don&rsquo;t have anything to add; even if I did, I&rsquo;m an awful writer and
nobody reads my blog anyway.</p>

<p>But writing is an Important Skill, one that I&rsquo;d very much like to improve.  I&rsquo;m certainly not going to get any better by
<em>not</em> doing it, and <a href="http://weknowmemes.com/2012/05/sucking-at-something-is-the-first-step-to-becoming/">everyone has to start somewhere</a>: keep practicing, keep
drilling, keep jabbing away, and eventually you&rsquo;ll probably make progress.  I remember an old post of Jeff Atwood&rsquo;s
where his only advice was to <a href="http://www.codinghorror.com/blog/2007/10/how-to-achieve-ultimate-blog-success-in-one-easy-step.html">pick a schedule</a> and stick
with it.  Maybe it&rsquo;s about time I did just that.  <strong>One post a week</strong>, even if the topic sounds asinine and I&rsquo;m low on
inspiration and nobody will read it (or <em>especially</em> if nobody will read it?).</p>

<p>With all that said, I&rsquo;d like to introduce my newest housemate, <a href="http://waffleparadox.smugmug.com/Animals/Zelda">Zelda</a>.</p>

<p><img class="center" src="http://waffleparadox.smugmug.com/Animals/Zelda/i-rNGBWHH/0/L/DSC_2268-L.jpg"></p>

<p>She arrived with all of 3 days&#8217; notice, and is at just about that age where kittens tend to be terrible people.  She&rsquo;ll
bully the other (much bigger) cats, knock over bowls and trash bags, attack everything like the king of the jungle, and
just generally be an unabashed little snot.  But she&rsquo;s disarmingly adorable, so naturally none of that matters in the
slightest.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Roast Leg of Lamb]]></title>
    <link href="http://alexkuang.github.io/blog/2013/11/17/roast-leg-of-lamb/"/>
    <updated>2013-11-17T12:32:00-05:00</updated>
    <id>http://alexkuang.github.io/blog/2013/11/17/roast-leg-of-lamb</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://waffleparadox.smugmug.com/Food/Leg-of-Lamb/i-q4M6vbN/0/L/DSC_2277-L.jpg"></p>

<p>Last weekend I saw a giant leg of New Zealand lamb that looked way too good to pass up, crazy Whole Foods prices or not.
Huge roasted joints of meat are always a win with me but I strongly prefer bone in; there&rsquo;s just so much more flavor
that way.  I took the basic steps from <a href="http://www.youtube.com/watch?v=5qvEdCmD8Pk">this video</a> by Thomas Keller, using
an oven temp of 325 for ~1hr and frenching the tip of the bone to aid in carving.  I finished the last few minutes with
a cranked up broiler to really get a nice crust on the surface.</p>

<p>There was one problem I had with the conventional wisdom, though: laying the herbs on/around the meat and just seasoning
the surface doesn&rsquo;t seem like it would be enough to really get that taste in there, especially with something this
thick.  So I took a cue from how cloves are used in ham, substituting the cloves for garlic and the ham joint for a lamb
leg.  Spearing the garlic with small sprigs of rosemary added just the right extra punch, and ended up staining the
garlic green as a bonus.</p>

<p>I would consider this experiment a success.  Embedding the garlic really gets the flavor into the meat, and the rosemary
adds a lot to the presentation as well. If nothing else, it can be an excuse to crack some Monty Python shrubbery jokes
at the dinner table.  Chances to do that don&rsquo;t come around nearly as often as they should.</p>

<p>(More photos can be found <a href="http://waffleparadox.smugmug.com/Food/Leg-of-Lamb/">here</a>)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fibonacci Stream]]></title>
    <link href="http://alexkuang.github.io/blog/2013/10/17/fibonacci-stream/"/>
    <updated>2013-10-17T07:15:00-04:00</updated>
    <id>http://alexkuang.github.io/blog/2013/10/17/fibonacci-stream</id>
    <content type="html"><![CDATA[<p>I was going to test out some of the codeblock functionality in octopress, but as it turns out the fancy stuff I wanted
to test is <a href="https://groups.google.com/forum/#!topic/octopress/y1IlHmFYydQ">not available in master</a> and I&rsquo;m far too lazy
to sync to 2.1 at the moment.  As such, everyone will have to settle for this plain jane snippet:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// e.g., fibStream.take(5)</span>
</span><span class='line'><span class="k">def</span> <span class="n">fibStream</span><span class="k">:</span> <span class="kt">Stream</span><span class="o">[</span><span class="kt">BigInt</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">loop</span><span class="o">(</span><span class="n">prev1</span><span class="k">:</span> <span class="kt">BigInt</span><span class="o">,</span> <span class="n">prev2</span><span class="k">:</span> <span class="kt">BigInt</span><span class="o">)</span><span class="k">:</span> <span class="kt">Stream</span><span class="o">[</span><span class="kt">BigInt</span><span class="o">]</span> <span class="k">=</span> <span class="n">prev1</span> <span class="o">#::</span> <span class="n">loop</span><span class="o">(</span><span class="n">prev2</span><span class="o">,</span> <span class="n">prev1</span> <span class="o">+</span> <span class="n">prev2</span><span class="o">)</span>
</span><span class='line'>  <span class="n">loop</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span><span class="mi">1</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nothing fancy, just one of many possible variations of the fibonacci sequence.  This one is done via a <code>Stream</code>,
which is Scala&rsquo;s memoized lazily evaluated list.  (<a href="http://www.scala-lang.org/api/current/index.html#scala.collection.immutable.Stream">More here</a>).</p>

<p>Will probably write more about the why/how of the nested loop <code>def</code> (mostly for my own reference), but for now I think
the codeblock looks pretty neat.  It&rsquo;s still a shame I didn&rsquo;t get to play with funny line numbers/highlighting stuff
though.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Big Bowl O Beef]]></title>
    <link href="http://alexkuang.github.io/blog/2013/10/15/big-bowl-o-beef/"/>
    <updated>2013-10-15T21:50:00-04:00</updated>
    <id>http://alexkuang.github.io/blog/2013/10/15/big-bowl-o-beef</id>
    <content type="html"><![CDATA[<p>I wanted to test out how images worked with the blog, but had nothing imminent to write about.  Since kittens are
already taken, here&rsquo;s a picture of a big bowl of beef with kimchi and rice.</p>

<p><img class="center" src="http://waffleparadox.smugmug.com/Food/Bowl-O-Beef-2013/i-FtTgtWC/0/L/DSC_2245-L.jpg"></p>

<p>Not too bad.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First post]]></title>
    <link href="http://alexkuang.github.io/blog/2013/10/10/first-post/"/>
    <updated>2013-10-10T22:00:00-04:00</updated>
    <id>http://alexkuang.github.io/blog/2013/10/10/first-post</id>
    <content type="html"><![CDATA[<p>&hellip; Or, &ldquo;How I Chose a Blog Platform.&rdquo;</p>

<p>Multiple people have said that I should get back into writing, so I guess I&rsquo;m back into the blogging scene now.  It&rsquo;s
true I did have a food blog before a particular work project completely pole-axed it, and I would love to start it up
again.  The problem is that WordPress has always been a bit cumbersome for me so this time around I wanted something
different.  Plus I&rsquo;ve been meaning to get into the whole tech/misc blogging thing.  So I set out to find something that:</p>

<ol>
<li>Is easy to write in.  I&rsquo;d been fascinated by the idea of blogging in Markdown, so preferably that.</li>
<li>Could render code snippets / do syntax highlighting in most major languages.</li>
<li>Could display pictures with reasonable flexibility and prettiness.</li>
<li>Supported some form of organization based on categories/tags.</li>
</ol>


<p><a href="https://telegr.am/">telegr.am</a> was a strong contender for a while, since it uses Markdown and is written in <code>Scala</code> and
thus would have been familiar ground, but sadly it was missing in some key features.  All the other frameworks I found
were either lackluster, pay-only, or required self-deployment on a server, which I&rsquo;m clearly too lazy to do nowadays.
Thus I came to settle on <a href="http://octopress.org/">Octopress</a>, a framework based on <a href="http://jekyllrb.com/">Jekyll</a> which I
had already played with for my personal site before.  Thus far it fits the bill nearly perfectly, with the only rub
being the heavy dependency on git (or in my particular case, github).  But that isn&rsquo;t really a problem unless I ever
want a blog with non-technical contributors, so that bridge can be crossed when the time comes.</p>

<p>TL;DR &ndash; New blog.  Pardon the appearance during construction.</p>
]]></content>
  </entry>
  
</feed>
