<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[alex kuang]]></title>
  <link href="http://alexkuang.github.io/atom.xml" rel="self"/>
  <link href="http://alexkuang.github.io/"/>
  <updated>2014-02-08T11:41:00-05:00</updated>
  <id>http://alexkuang.github.io/</id>
  <author>
    <name><![CDATA[Alex Kuang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Panna Cotta with Apple Compote - Week 5, Vanilla]]></title>
    <link href="http://alexkuang.github.io/blog/2014/02/08/panna-cotta-with-apple-compote-week-5-vanilla/"/>
    <updated>2014-02-08T10:52:00-05:00</updated>
    <id>http://alexkuang.github.io/blog/2014/02/08/panna-cotta-with-apple-compote-week-5-vanilla</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://waffleparadox.smugmug.com/Food/Panna-Cotta-with-Apple/i-gpKW6cR/0/L/DSC_2421-L.jpg"></p>

<p>The few times I&rsquo;ve used vanilla have always been for dessert, so for this week&rsquo;s challenge I really wanted to try
something savory.  Unfortunately I couldn&rsquo;t think of anything that didn&rsquo;t sound horrifying even in my head, so I ended
up going with a dessert anyway; tough nuts.  To be fair though, I stuck with the spirit of leaving my comfort zone and
made multiple things I&rsquo;ve never done before&mdash;panna cotta and apple compote.</p>

<!-- more -->


<p>Since this was my first attempt, I feel like everything could still use some fine-tuning, but overall the results were
acceptable (more on that below), so I&rsquo;ll jot down the quantities and everything just for reference.</p>

<h2>Apples</h2>

<ul>
<li>2 braeburn apples</li>
<li>200g sugar</li>
<li>8g pectin</li>
<li>1 vanilla bean</li>
</ul>


<p><strong>A quick note on pectin:</strong>  Pectin comes in many forms.  The top differentiator is high or low methoxy
pectin, which dictates what kind of environment the pectin needs to set.  Generally speaking, unless you&rsquo;re shopping at
the modernist pantry, high-methoxy pectin is what you&rsquo;ll be getting.  HM pectin sets in an acidic environment, which is
why most of the time it&rsquo;s sold cut with a little bit of citric acid already.  This is perfectly fine.  Of course, HM
pectin is itself differentiated by how fast it sets: Rapid set, medium set, and so on.  In this case, it shouldn&rsquo;t
matter too much, as any common consumer pectin that&rsquo;s labeled as suitable for jam should be around the right range, but
it&rsquo;s still worth noting since the variation in citric acid + pectin type is what accounts for some brands of pectin not
working with some types of fruit.</p>

<p>The first part is fairly easy.  Dice up the apples into small &frac12; inch chunks (for the more particular among us, I ended
up with roughly 240g apple).  Combine it with the sugar, pectin, and vanilla bean, and put everything on low heat.  The
sugar should start melting fairly quickly, and the apples will start bubbling as they cook, like so:</p>

<p><img class="center" src="http://waffleparadox.smugmug.com/Food/Panna-Cotta-with-Apple/i-nrDwR7n/0/L/DSC_2395-L.jpg"></p>

<p>Keep the apples on low heat until they are completely cooked through and translucent; this should take about 45 minutes.
In the above photo, a few of the chunks in the center and to the left are starting to get there.  Be careful not to burn
anything, and give the pot a stir every once in a while.</p>

<p>After the cooking, they should basically look like jelly.  At this point, the seeds from the spent vanilla pod can be
scraped out and combined with the apples, but that&rsquo;s optional.  Stick everything in a ball jar (or other container of
choice) and chill in the fridge.</p>

<p><img class="center" src="http://waffleparadox.smugmug.com/Food/Panna-Cotta-with-Apple/i-DtBs7C2/0/L/DSC_2405-L.jpg"></p>

<h2>Panna Cotta</h2>

<ul>
<li>600ml cream</li>
<li>3 sheets of gelatin (~5g)</li>
<li>50g sugar</li>
<li>1 vanilla bean</li>
<li>4 cardamom pods</li>
</ul>


<p>First thing is to bloom the gelatin in cold water, using whatever timing the manufacturer recommends.  Pierce the
cardamom pods to help let the flavor out&mdash;either use your hands to crack them a bit, or score the pods with a knife.
For the sugar, just split the bean down the middle and scrape out the seeds.  Because of the moisture, the seeds often
come out feeling more like a paste; just knead it into the sugar with your fingers to prevent clumps in the final
product.</p>

<p>Add about 50ml of the cream to the sugar, and whisk&mdash;Again, this is just to prevent any clumping that may occur.  Add
the rest of the cream, and the cardamom pods, and bring everything to a light simmer&mdash;be careful that it doesn&rsquo;t come to
a full rolling boil.  Hopefully the gelatin has bloomed by now, so add that and let it simmer for another minute or two.
Pour the cream into whatever containers are appropriate, and let everything set in the fridge.  I recommend at least 3-4
hours, preferably overnight.</p>

<h2>Impressions</h2>

<ul>
<li>The apples came out way denser than I expected.  I&rsquo;ve never worked with pectin before, but I think the big mistake was
not accounting for the naturally occurring pectin in the fruit itself.  On hindsight, given how the most commonly sold
pectin is <em>apple pectin</em>, this was kind of a dunce cap moment.</li>
<li>The fruit was also way stronger and sweeter than I expected.  Next time I might dial down the sugar/vanilla in the
fruit, serve less of it, or just not combine it with something as delicate as panna cotta.  Haven&rsquo;t quite decided on
that one yet.</li>
<li>The panna cotta did not have gelatin problems (thankfully), but it was still a bit dense.  For the next try I might
cut the cream down with some milk, probably about 500ml cream to 100ml milk.</li>
<li>The cardamom also didn&rsquo;t come out as much as I would have liked.  It was just barely noticeable if tasting the cream
alone, so I think in the future a full 6 pods for 600ml liquid would be better.  Or even more if being served with
something as strong as a fruit compote.</li>
<li>Now that I think about it, maybe I&rsquo;d be better of cutting out the fruit and serving the panna cotta alone with some
sugar syrup that I&rsquo;ve steeped with cardamom pods.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IAP and Mobile]]></title>
    <link href="http://alexkuang.github.io/blog/2014/02/03/iap-and-mobile/"/>
    <updated>2014-02-03T21:43:00-05:00</updated>
    <id>http://alexkuang.github.io/blog/2014/02/03/iap-and-mobile</id>
    <content type="html"><![CDATA[<p>In-app purchases and the free-to-play model have long been anathema to self-declared &ldquo;real gamers&rdquo; everywhere, but the
recent release (or re-release?) of classics like Tales of Phantasia and Dungeon Keeper seems to have brought yet
another wave of angry discussion to the forefront.  Understandably, people
<a href="http://www.baekdal.com/opinion/how-inapp-purchases-has-destroyed-the-industry/">are</a>
<a href="http://kotaku.com/a-cancer-thats-eroding-the-market-reactions-to-eas-1515121353">very</a>
<a href="http://www.escapistmagazine.com/articles/view/editorials/reviews/10956-Dungeon-Keeper-Mobile-Review-Wallet-Reaper">angry</a>
<a href="http://toucharcade.com/2014/01/27/tales-of-phantasia-review/">that</a> their beloved classics are being turned into f2p
&ldquo;cash farms&rdquo;, but personally I think saying the model is &ldquo;destroying the industry&rdquo; is a bit hyperbolic.</p>

<p>In response, toucharcade recently published a post pointing out an article that takes a <a href="http://toucharcade.com/2014/02/03/iap-isnt-actually-destroying-the-games-industry/">stance to the
contrary</a>.  The original piece is
definitely worth a read to anyone who cares about the topic; it makes a number of good arguments regarding pricing
pressures and facing a realistic economy for the unprecedented levels of competition on iOS.  But it also notes that the
concept of paying for more content&mdash;the &ldquo;original IAP&rdquo;&mdash;dates back to the beginning of the industry with coin op arcade
machines.  This seems like a valid comparison superficially, but as someone who&rsquo;s shelled out way too many quarters on
the likes of Gauntlet Dark Legacy I feel like there are two fundamental differences that this argument glosses over.</p>

<p>First: arcade games always had a large skill component.  It might take a while to get good enough, but it was always
possible to beat the game consistently on sheer skill alone.  The game might have been hard, but the balance was never
so broken as to render completion impossible without the extra coins.  Second: in the cases of the most nefarious IAPs,
you&rsquo;re not paying to spend more time with the game; you&rsquo;re paying for the exact opposite.  When an IAP does nothing but
shorten a timer or increase a premium resource, you&rsquo;re essentially paying more money to decrease the time you spend with
the game.  All &ldquo;Skinner&rsquo;s Box From Hell&rdquo; arguments aside, that is probably what I object to the most.  I don&rsquo;t have an
indiscriminate hatred for the f2p model&mdash;there are definitely cases of it being executed well&mdash;but I have a fundamental
problem with paying more for less.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raclette - Week 4, Things You Hated as a Kid]]></title>
    <link href="http://alexkuang.github.io/blog/2014/01/28/raclette-week-4-things-you-hated-as-a-kid/"/>
    <updated>2014-01-28T06:44:00-05:00</updated>
    <id>http://alexkuang.github.io/blog/2014/01/28/raclette-week-4-things-you-hated-as-a-kid</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://waffleparadox.smugmug.com/Food/Oneshots/i-gvTHKVq/0/L/DSC_2393-L.jpg"></p>

<p>Being your token asian immigrant, my experience with cheese was limited to Kraft slices and string cheese.  Now, there&rsquo;s
nothing wrong with good american cheese on a burger, but I hated string cheese with a burning passion&mdash;Especially when
my mom wanted me to eat some as a snack, citing something or other about calcium and strong bones.  <em>Pfft</em>.  Subsequent
exposure to the likes of cheez-whiz and store-brand grated parmesan really didn&rsquo;t help, and eventually I just dismissed
cheese as categorically unpleasant.</p>

<p>Since then I&rsquo;ve discovered the miracles of parmesan and mozzarella and even some more exotic ones like morbier and p&#8217;tit
basque.  But the first moment I realized that cheese could be excellent in its own right, and even be a major player in
a proper dish, was with raclette.</p>

<p>Raclette is commonly eaten in the swiss alps.  At its core, it&rsquo;s raclette cheese melted over boiled potatoes, commonly
served with cured meat and some pickles or vegetables in the root family; in the above photo, I went with the common
french pickle <em>cornichon</em> and some prosciutto.  The preparation is as easy as food gets: literally just boiling some
potatoes and melting some cheese (I recommend using a toaster oven or a broiler), and then arranging everything on a
plate.</p>

<p>But despite its simplicity, raclette had a large effect on expanding my worldview in food, so&hellip;  There it is.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adventures with Mail.app Gremlins]]></title>
    <link href="http://alexkuang.github.io/blog/2014/01/26/adventures-with-mail-dot-app-gremlins/"/>
    <updated>2014-01-26T09:05:00-05:00</updated>
    <id>http://alexkuang.github.io/blog/2014/01/26/adventures-with-mail-dot-app-gremlins</id>
    <content type="html"><![CDATA[<h4>Background</h4>

<p>Usually I don&rsquo;t care too much if an email or two gets dropped en route.  Between spam filters and sometimes-spotty
(cough, mobile) connections, it&rsquo;s not too much of a stretch to assume that things get lost once in a great while.  But
recently I was trying to set up an interview on the other side of the country, so naturally I paid a little more
attention than usual.  Everything was going quite well, correspondence was zipping back and forth, and I&rsquo;d even bought a
plane ticket for the trip.  But then a lull came when it was time to receive confirmation for hotel arrangements and a
rough schedule for the interview process.</p>

<p>Unbeknownst to me, the HR rep had already tried to send the information twice at this point, but for some
reason the emails weren&rsquo;t landing in my inbox.  I sent one last-ditch follow-up when my flight was boarding, and got a
reply with the info (thankfully) right before the plane took off.  Along with the reply, the HR rep mentioned that the
previous emails she&rsquo;d sent had gone to <code>waffles@mochify.com</code>. <em>(aside: While <code>waffles@mochify.com</code> isn&rsquo;t the first email
I&rsquo;d give out professionally, I&rsquo;m thankful it wasn&rsquo;t something like <code>sexbadger69@gmail.com</code> &hellip;  Actually, now I wonder
if that address is open &hellip;)</em></p>

<h4>The technical details</h4>

<p>This was an old address that I&rsquo;d added to my various devices previously, but then removed for inactivity; I certainly
didn&rsquo;t recall sending any recent email from it.  But when I logged in to check the inbox, lo and behold the missing
emails were staring me in the face, along with a few others that had been &ldquo;dropped&rdquo; not too long ago.  Something smelled
fishy.  I checked over my Sent box for my regular email to no avail; all the correspondence was there, with the correct
<code>From</code>s and <code>To</code>s.  I ended up having to dig into the plain-text of the mime header to spot the issue:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>From: Alex Kuang &lt;[...]&gt;
</span><span class='line'>Content-Type: multipart/alternative;
</span><span class='line'>    boundary="Apple-Mail=_7DA4001C-0AA1-48BD-80F5-00ACDBCCAE9C"
</span><span class='line'>    Message-Id: &lt;ADFD0F4C-6FE0-41F5-AA68-EF8E9845B360@gmail.com&gt;
</span><span class='line'>    Mime-Version: 1.0 (Mac OS X Mail 6.6 \(1510\))
</span><span class='line'>    X-Smtp-Server: smtp.gmail.com:waffles@mochify.com
</span><span class='line'>[...]</span></code></pre></td></tr></table></div></figure>


<p><em>X-Smtp? What?</em>  After a bit of googling I discovered that Mail.app on the Mac keeps a list of outgoing smtp servers
associated with your mail accounts, which you can see in Preferences &ndash;> Accounts &ndash;> &ldquo;Outgoing Mail Server&rdquo; &ndash;> Edit SMTP
Server List.  The problem is, the entry with the association persists <strong>even after an account is removed from the
list</strong>: when I checked my smtp list, it included an entry for mochify as well as a few other one-off addresses that I&rsquo;d
added and removed in similar fashion.  Most of my email (including <code>mochify.com</code>) is handled by google apps, which means
that the smtp server the entries pointed to were all <code>smtp.gmail.com</code>, and the only difference was the
username/authentication associated.</p>

<p>So what ended up happening here was that I&rsquo;d sent the email from my regular account through Mail.app so it still carried
the correct <code>From</code>/etc.  However, for reasons unknown, the outgoing smtp entry for that account did not work at
that moment.  Since <code>mochify</code>&rsquo;s smtp entry pointed at the same <code>smtp.gmail.com</code> server, I&rsquo;m willing to bet that Mail.app
decided it was a perfectly good fallback, added the <code>X-Smtp-Server</code> MIME header, and sent the email causing this weird
reply-to behavior.</p>

<p>There is a checkbox in account preferences that will lock you into using one-and-only-one smtp server and prevent this
from happening, but honestly after this ordeal I will probably just be even more biased towards composing my email using
the web gmail ui.  I&rsquo;m just glad that everything worked out in the end, and anyway this is a good reminder that I should
be more diligent in setting up auto-forwarding even for email addresses I don&rsquo;t plan on using.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chicken Shahi Korma - Week 3, One Pot]]></title>
    <link href="http://alexkuang.github.io/blog/2014/01/19/chicken-shahi-week-3-one-pot/"/>
    <updated>2014-01-19T10:06:00-05:00</updated>
    <id>http://alexkuang.github.io/blog/2014/01/19/chicken-shahi-week-3-one-pot</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://waffleparadox.smugmug.com/Food/Chicken-Shahi-Korma/i-KPv4qLJ/0/L/DSC_2381-L.jpg"></p>

<p>One thing I&rsquo;ve noticed about the weekly food challenges is that it syncs very well with my new self-imposed weekly post
quota.  This works out nicely for me, but at the same time it provides a very convenient cop-out from having to write
anything new, e.g. about tech.  While at the end of the day I&rsquo;m still writing more than I would have, I&rsquo;m wondering if
it&rsquo;d be a good idea to stop counting these towards the weekly quota, or only count them partially.  Another option would
be to pick and choose which challenges to limit the volume, but cherry-picking challenges is for weenies.  Thoughts for
the future, I guess.</p>

<p>At any rate, the &ldquo;point&rdquo; of this week&rsquo;s theme is simplicity&mdash;Getting good flavor out of an easy set up, i.e. &ldquo;one pot&rdquo;.
It seemed like a good time to test out my burgeoning indian food skills, but as it turns out the most complicated part
was just the combination of the spices.</p>

<!-- more -->


<h4>Ingredients</h4>

<ul>
<li>Large spices

<ul>
<li>8 green cardamom pods</li>
<li>6 cloves</li>
<li>3-inch stick of cinnamon</li>
<li>3 bay leaves</li>
</ul>
</li>
<li>Small spices

<ul>
<li>1 tsp ground cumin</li>
<li>1 tsp ground coriander</li>
<li>&frac14; tsp ground cayenne</li>
</ul>
</li>
<li>4 lb chicken thighs</li>
<li>1 cup plain yogurt</li>
<li>Handful of chopped cilantro</li>
<li>Handful of slivered blanched almonds</li>
</ul>


<p>Normally for non-baking work I prefer to cook by taste and instinct rather than measuring too precisely.  But in this
case spices can be quite strong, and it&rsquo;ll probably take years before I could do that effectively, so it&rsquo;s better to be
on the safe side.  For the curious, here&rsquo;s roughly what the spice setup looks like for 4 lb of chicken:</p>

<p><img class="center" src="http://waffleparadox.smugmug.com/Food/Chicken-Shahi-Korma/i-JzpM4D6/0/L/DSC_2372-L.jpg"></p>

<p>I like cilantro so I tend to put in a bit extra; most people will probably want a bit less than what&rsquo;s shown above.
Another quick note is that the chicken thighs should preferably come with skin and bone; again, just more flavor that
way.  You could do it with boneless skinless thighs, or even breasts, but come on.</p>

<p>There really isn&rsquo;t much to this, technique-wise:</p>

<ol>
<li><p>First, combine the small spices and cilantro with the yogurt, then season the chicken pieces with salt and pepper.</p></li>
<li><p>Heat up a healthy amount of oil in your pot, then toss in the large spices and give them a quick stir.  Start
browning the chicken on medium-high heat.  The browning can be done in a separate pan, but 1) you&rsquo;d be missing out on
the flavor from the brown bits at the bottom, and 2) the theme is &ldquo;one pot&rdquo; and that&rsquo;d be cheating.  Don&rsquo;t
over-crowd&mdash;You really want the color on there, so work in multiple batches if necessary.  By the time the chicken&rsquo;s
done, the kitchen should already be smelling delicious.</p></li>
<li><p>Remove all the chicken from the pot, keeping the oil from frying, and toss in some almonds.  As soon as they start
browning, re-add all the chicken along with any juices that may have appeared.  Add the yogurt sauce and give it a good
mix, then cover and let everything simmer on low for 20 minutes or so.</p></li>
<li><p>When ready, turn the heat back up and let the sauce reduce.  Stir gently once in a while to make sure nothing is
burning and sticking.  The final thickness of the sauce is ultimately preference, but in western terms it should at
<em>least</em> pass the &ldquo;coat the back of the spoon&rdquo; test and then some.</p></li>
</ol>


<p>And since this is, after all, &ldquo;one pot&rdquo;, here is a picture of everything in one pot <em>(excuse the desaturation, I blame
the steam.)</em>:</p>

<p><img class="center" src="http://waffleparadox.smugmug.com/Food/Chicken-Shahi-Korma/i-M9sWXcq/0/L/DSC_2379-L.jpg"></p>

<p>When everything is ready, serve with basmati rice or a nice piece of flatbread.  And yes, like most curries, this tastes
even better after sitting around for a day or two.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pierogi - Week 2, Polish]]></title>
    <link href="http://alexkuang.github.io/blog/2014/01/13/pierogi-week-2-polish/"/>
    <updated>2014-01-13T11:07:00-05:00</updated>
    <id>http://alexkuang.github.io/blog/2014/01/13/pierogi-week-2-polish</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://waffleparadox.smugmug.com/Food/Pierogi/i-JHfpDKq/0/L/DSC_2369-L.jpg"></p>

<p>Week 2&rsquo;s theme is Polish, a cuisine that I basically have never touched, or so I thought.  According to the
<a href="http://www.reddit.com/r/52weeksofcooking/comments/1ujvk2/week_2_introduction_thread_polish/">introduction thread</a>,
Polish food involves a lot of meat and potatoes, and the list of example foods included golabki which I&rsquo;d made a bunch
of times already under its Russian name golubtsy.  But choosing that felt too much like cheating, so I went with pierogi
instead.</p>

<p>Since I had only heard of the term pierogi and had no idea what it actually was or what was involved, the first obvious
stop was Google.  A few quick searches revealed that it was the polish equivalent of a filled dumpling/ravioli, and the potato
filling + sour cream in the skin distinguished it from all the other types of dumplings I had seen.  Since the skin
was a bit more foreign and required some resting time, I decided to start with that first.</p>

<!-- more -->


<h4>Skin</h4>

<p>Normally I&rsquo;m the first guy to start screaming about scales and precise weights when anything involves dough, but for
things like dumplings I believe that approximations are perfectly fine, and a scale is probably excessive.
Nevertheless, since this was the first time I decided to jot down some numbers for consistency&rsquo;s sake:</p>

<ul>
<li>250g flour (~2 cups)</li>
<li>50g softened/melted butter (~&frac14; cup)</li>
<li>160g sour cream (~&frac12; cup)</li>
<li>1 egg</li>
<li>pinch of salt</li>
</ul>


<p>I combined the flour with the egg and salt to make a crumbly mixture, then added the butter and sour cream.  The dough
incorporated very easily after a few minutes of working, and was very pliable.  I let it rest for about 30 minutes while
I prepared the filling.  Resting only made the dough even softer because of the relaxing gluten; I also suspect that the
sour cream has a loosening effect like a weaker version of ascorbic acid in puff pastry dough, but I&rsquo;m not 100% on that
so don&rsquo;t quote me.</p>

<h4>Filling</h4>

<p>The filling was exceedingly simple.  I just boiled up some yellow potatoes, and mashed them without liquid.  The
seasoning was salt, pepper, and shredded sharp cheddar; I&rsquo;d say the cheddar was somewhere around 1/3 to &frac12; of the
volume of mash that I had.  After everything was mixed, I stepped away for a cup of coffee (and to let the filling fall
to room temp so it wasn&rsquo;t burning hot, if you care about that sort of thing).</p>

<p>After the filling was prepared and cooled, I rolled out the dough into a ~1/8 inch sheet.  I aimed for something a
little bit thicker than ravioli skins, but not by much.  But since I didn&rsquo;t have a dough cutter and actually needed
circular skins, I decided to use a drinking glass instead:</p>

<p><img class="center" src="http://waffleparadox.smugmug.com/Food/Pierogi/i-QX4VMGK/0/L/DSC_2337-L.jpg"></p>

<p>After pressing out all the rounds, there was a non-trivial amount of dough scrap left which I felt bad about.  I was
feeling daring so I just re-worked and re-rolled it to get as many rounds as possible; the only thing I&rsquo;d note here is
that an additional resting period is necessary for the gluten to re-relax, so I&rsquo;d recommend filling the pressed rounds
while waiting for that to happen.  Or, for the more lazy amongst us, I suppose the scraps could just be cut up and saved
to be dropped in soup or something&hellip;  But who wants to do that?</p>

<p>Wrapping is fairly easy.  Just fold the skin over a small mound of the potato mixture then press the edges together
with your fingers.  If the edges don&rsquo;t stick, you probably over-floured your board or something, so add a bit of water
to help it along.  To really seal things in and make them look prettier, press the edges again with the tines of a fork.
(For those who really care, the gallery at the bottom of the post has how much filling I used for each)</p>

<p><img class="center" src="http://waffleparadox.smugmug.com/Food/Pierogi/i-c2DwTKD/0/L/DSC_2353-L.jpg"></p>

<p>A few of them are slightly lopsided, but not too bad for a first batch.</p>

<h4>Impressions</h4>

<p>Most sources online recommend boiling the pierogis and then frying them with butter and onions to serve.  Since these
are essentially potatoes in dough, I thought they&rsquo;d need a bit of help so I used roughly sliced shallots instead, and
added some kielbasa on the side.  Can&rsquo;t have a &ldquo;meat and potatoes&rdquo; style meal without the meat.</p>

<p>I think the biggest surprise was that pierogis are really &ldquo;go big or go home&rdquo;.  The quantities above are enough to make
roughly 20 skins, or a full two dozen if you really want to stretch it.  The filling needed for that amount of skin
could probably be made from one decent sized yellow potato, <em>maybe</em> two.  And since nobody wants to boil and mash one
potato, that means that you have to make about 100 at once for it to be worth the time.  Alternatively this could
probably be a nice use for leftovers of regular mashed potato, but probably not if you like your mash really creamy.</p>

<p>I can&rsquo;t really speak to authenticity or anything since I&rsquo;ve never actually had pierogis, but I thought they were pretty
nice taste-wise.  Personally they reminded me of fried ravioli, except slightly thicker and more rustic.  I went in
expecting a super heavy mouthful of starch, but the texture was surprisingly light and the sour cream in the skin helped
things along.  I still don&rsquo;t think I&rsquo;d eat these alone, at least not the variety filled with just potato and
cheese&mdash;Even with the shallots, the dish needed the extra punch from the kielbasa.  However, some bacon in the filling
might change my mind.  Adding bacon is never a bad idea.</p>

<p>(Full gallery <a href="http://waffleparadox.smugmug.com/Food/Pierogi">here</a>)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ramen Cake - Week 1, Eggs]]></title>
    <link href="http://alexkuang.github.io/blog/2014/01/06/ramen-cake-week-1-eggs/"/>
    <updated>2014-01-06T13:05:00-05:00</updated>
    <id>http://alexkuang.github.io/blog/2014/01/06/ramen-cake-week-1-eggs</id>
    <content type="html"><![CDATA[<p><em>&mdash;Or, really ghetto okonomiyaki&hellip;</em></p>

<p><img class="center" src="http://waffleparadox.smugmug.com/Food/Ramen-Cake/i-zJ4NmjL/0/L/DSC_2315-L.jpg"></p>

<p>It should come as no surprise to anyone that I&rsquo;m subscribed to
<a href="http://www.reddit.com/r/52weeksofcooking">/r/52weeksofcooking</a>.  The tl;dr is that each week, the subreddit chooses a
food &ldquo;theme&rdquo;&mdash;an ingredient, ethnicity, or some other idea&mdash;and users post dishes that they make according to the theme.
I&rsquo;ve always thought that the idea seemed like a lot of fun, so what better time to start than the new year?  If nothing
else, it makes good blog fodder.</p>

<p>Week 1&rsquo;s theme is eggs, which is a nice and easy start to this little series of experiments.  For this theme I chose
what I like to call &ldquo;ramen cake&rdquo;.  The idea is roughly the same as that of okonomiyaki&mdash;In fact, I got the idea after
watching the corresponding <a href="http://www.youtube.com/watch?v=od2YWgQmeo4">video</a> on Cooking With Dog (an excellent channel
in general, by the way).  It&rsquo;s a nice way to have ramen that doesn&rsquo;t come in a bowl of soup, and with the right
combination of fillings it could even be something approaching nutritious.</p>

<!-- more -->


<p>First, boil your ramen and set aside.  I recommend removing the ramen 30 seconds or so before it&rsquo;s fully cooked.  It&rsquo;ll
continue cooking in the pan later, and overcooking just results in mush&mdash;especially when freeze-dried noodles are
involved.  In the meantime, prepare any other toppings you need as well.  For the pictures in this post I used nong shim
ramen with some sardines and quickly stir-fried bok choy, but basically anything works.  Finally, beat about 3-4 large
eggs (depending on your preferences) until the yolks and whites are evenly incorporated.</p>

<p>Heat up a well-oiled, preferably non-stick, pan over medium-high heat.  Drop the eggs, and as soon as the bottom starts
cooking add the other ingredients and the ramen. Jostle it a bit as necessary to distribute everything, the leave it
alone to set.  Now is a great time to garnish with scallions and add some sauce&mdash;to keep it real, I like using oyster
sauce mixed with part of the ramen packet and a bit of peanut oil to adjust for viscosity.</p>

<p><img class="center" src="http://waffleparadox.smugmug.com/Food/Ramen-Cake/i-xtFsvCZ/0/L/DSC_2304-L.jpg"></p>

<p>When the bottom has solidified enough to handle without disintegrating, it&rsquo;s ready to flip.  Just make sure that the egg
hasn&rsquo;t entirely cooked through yet&mdash;after the flip, we want it to drip downwards a bit and bind all of the ingredients
into one cohesive mass.  Also note that flipping can be a bit hit or miss sometimes, depending on a combination of
spatula size, pan skills, and luck.  One easy option is to cut it into pieces in the pan, and just flip the pieces
individually.</p>

<p>In this case, the culinary gods were with me, and I made the flip successfully:</p>

<p><img class="center" src="http://waffleparadox.smugmug.com/Food/Ramen-Cake/i-BNVnCJp/0/L/DSC_2307-L.jpg"></p>

<p>After the flip, let everything keep frying.  The goal here is to let the rest of the egg cook through and caramelize the
ramen a little bit along the way&mdash;Extra points if the bottom is slightly crispy, like so:</p>

<p><img class="center" src="http://waffleparadox.smugmug.com/Food/Ramen-Cake/i-M4rt2bc/0/L/DSC_2310-L.jpg"></p>

<p>While waiting for everything to cook, feel free to slather on more sauce.  Either way, it should be ready to be shoveled
into faces after a few minutes.</p>

<p>(Full gallery <a href="http://waffleparadox.smugmug.com/Food/Ramen-Cake">here</a>)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ramen Stock]]></title>
    <link href="http://alexkuang.github.io/blog/2014/01/04/ramen-stock/"/>
    <updated>2014-01-04T11:45:00-05:00</updated>
    <id>http://alexkuang.github.io/blog/2014/01/04/ramen-stock</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been sick as a dog for the last couple of days, so I guess this week I&rsquo;ll keep it light.  Since it&rsquo;s about 0
degrees F outside right now, what better time to mention ramen?</p>

<p><img class="center" src="http://waffleparadox.smugmug.com/Food/Oneshots/i-7f9FtLM/0/L/photo-L.jpg"></p>

<p>The above was made with pork belly, spinach, and pickled mushrooms.  I&rsquo;ll probably write everything up in more detail
when I&rsquo;m feeling more prolific, but I&rsquo;d like to take this chance to mention that a great use for the leftover bones
(say, from a roast leg of lamb, or a chicken carcass) is ramen stock.  Just roast the bones in the oven and stick them
in a pot with a few aromatics and vegetables: onions, leeks, carrots, mushrooms, and so on.  Leave it to simmer for a
few hours, and boom.  Stock.  If it&rsquo;s not feasible to leave the stove on, a crock pot would probably work just as well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CMD Misadventures - Codebase Size]]></title>
    <link href="http://alexkuang.github.io/blog/2013/12/23/cmd-misadventures-codebase-size/"/>
    <updated>2013-12-23T06:50:00-05:00</updated>
    <id>http://alexkuang.github.io/blog/2013/12/23/cmd-misadventures-codebase-size</id>
    <content type="html"><![CDATA[<p>After watching the <a href="https://www.destroyallsoftware.com/talks/wat">wat</a> talk and trolling my friends with the
<a href="https://www.destroyallsoftware.com/talks/a-whole-new-world">aneditor</a> talk for about the 200th time, I decided to
finally purchase one season of the Destroy All Software screencasts, despite the (IMHO) steep price tag and my financial
destitution.  (So far?  Totally worth it.  But a full review of the screencasts is neither here nor there.)</p>

<p>I&rsquo;ve always been a big fan of the unix power tools&mdash;<code>find</code>, <code>grep</code>, <code>xargs</code>, and so forth&mdash;but the DAS talks introduced
an idea that had never occurred to me for some insane reason: combine them with git to extract some interesting
information about your codebase.  And so, I decided to go diving into my biggest scala project for insights about its
code size.</p>

<p>One of the most common problems that code size can indicate is the presence of &ldquo;god classes&rdquo; or libraries, which know
and do way too much and thus are correspondingly bigger than the rest of the code by orders of magnitude.  This command
was relatively simple and does not involve git, so here it is in its entirety:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>alexkuang@Orion <span class="o">[</span>00:00:00<span class="o">]</span> <span class="o">[</span>~foobar/src/main/scala<span class="o">]</span> <span class="o">[</span>master<span class="o">]</span>
</span><span class='line'>-&gt; % find . -type f -name <span class="s2">&quot;*.scala&quot;</span> | <span class="k">while </span><span class="nb">read </span>file; <span class="k">do </span>wc -l <span class="nv">$file</span>; <span class="k">done</span> | sort -n
</span><span class='line'>       9 ./com/foobar/models/Permission.scala
</span><span class='line'>      11 ./com/foobar/util/LocParams.scala
</span><span class='line'>      14 ./com/foobar/util/OrgSettings.scala
</span><span class='line'>      16 ./com/foobar/security/package.scala
</span><span class='line'>      17 ./com/foobar/scripts/ReloadStageDB.scala
</span><span class='line'>      18 ./com/foobar/scripts/oneoff/InitSchema.scala
</span><span class='line'>      <span class="c"># ...</span>
</span><span class='line'>     231 ./com/foobar/js/Calendar.scala
</span><span class='line'>     247 ./com/foobar/persistence/Access.scala
</span><span class='line'>     287 ./com/foobar/snippet/BookingCalendar.scala
</span><span class='line'>     307 ./com/foobar/lib/Registration.scala
</span><span class='line'>     319 ./com/foobar/lib/Scheduler.scala
</span></code></pre></td></tr></table></div></figure>


<p>The output was slightly interesting, but nothing groundbreaking.  300 lines is not ideal to me, but manageable.  Broken
down quickly, <code>find #...</code> finds all files inside the current directory ending in &lsquo;.scala&rsquo;, reads each file in, and
passes it off to wc -l, which does a linecount on the file, whitespace and all.  <code>sort</code> does what its name implies, with
<code>-n</code> making it sort <code>1 2 3 11</code> instead of <code>1 11 2 3</code>.  The information was slightly cool, but as a hack it&rsquo;s not very
interesting, so let&rsquo;s throw some git in there to try to get a sense of how fast the codebase has grown over time.  After
all, superlinear growth is usually indicative of a ton of repetition and therefore unnecessary code complexity.</p>

<!-- more -->


<p>First, starting with walking the git repo.  <code>git rev-list &lt;branch&gt;</code> should do what we want it to, but in the case of
larger repos it the list can get a bit unwieldy/huge.  Enter <code>awk</code>, which lets you do a bunch of neat things with your
text but most importantly has an easy variable for line number, of all things <em>(note to self: learn2awk better?)</em>, thus:
<code>awk 'NR % &lt;n&gt; == 0'</code> to get only every nth revision list.  Combine that with the same reading as above, and do a
similar scala file find with a linecount, and the command is as follows: <em>(Yes, in this particular project I dev&rsquo;d right
in master instead of using a nvie-style git-flow.  Bad developer, bad!)</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git rev-list master | awk <span class="s1">&#39;NR % 20 == 0&#39;</span> | <span class="k">while </span><span class="nb">read </span>revhash; <span class="k">do </span>git checkout -q <span class="nv">$revhash</span> | <span class="se">\ </span>
</span><span class='line'><span class="o">&amp;&amp;</span> find . -name <span class="s1">&#39;*.scala&#39;</span> | xargs cat | wc -l; <span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>The more finicky among us might comment right about now that the command is already pretty huge and nigh unreadable if
revisited in about two weeks&mdash;and he&rsquo;d be right.  But this is a quick one-off hack for some interesting info (something
that unix tools are absolutely amazing at), and if I cared that much I&rsquo;d probably write a real script, or at least
re-format it into a proper bash function.</p>

<p>So the above command gives us a bunch of line counts which is useful, but it doesn&rsquo;t really give us a sense of the
progression.  At this point I&rsquo;d usually either 1) compose some huge complicated thing that kept track of the current
line AND the previous in an attempt to do math, or 2) give up and write a real script for it later, but one of the DAS
videos showed something that was completely new to me: using <code>jot</code> to create a chart.  Even if I learned nothing else,
this alone made everything worth it.  Very quickly&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>-&gt; % jot - 1 5
</span><span class='line'><span class="c"># print range 1 to 5</span>
</span><span class='line'>1
</span><span class='line'>2
</span><span class='line'>3
</span><span class='line'>4
</span><span class='line'>5
</span><span class='line'>-&gt; % jot -b <span class="s1">&#39;*&#39;</span> - 1 5
</span><span class='line'><span class="c"># range 1 to 5, printing &#39;*&#39; instead</span>
</span><span class='line'>*
</span><span class='line'>*
</span><span class='line'>*
</span><span class='line'>*
</span><span class='line'>*
</span><span class='line'>-&gt; % jot -b <span class="s1">&#39;*&#39;</span> - 1 5 | xargs
</span><span class='line'><span class="c"># For all its magic, xargs just chunks up your input to be used as args.</span>
</span><span class='line'>* * * * *
</span><span class='line'>-&gt; % jot -b <span class="s1">&#39;*&#39;</span> - 1 5 | xargs | tr -d <span class="s1">&#39; &#39;</span>
</span><span class='line'><span class="c"># And tr to translate.  Side note: as a recovering Perl user, it slightly annoys me that there&#39;s a tr util but not an s</span>
</span><span class='line'><span class="c"># util.  But I guess that&#39;s what sed is for...?</span>
</span><span class='line'>*****
</span></code></pre></td></tr></table></div></figure>


<p>And now all that&rsquo;s left is to combine the <code>jot</code> magic with the above command by reading a the linecount into a variable
called <code>lines</code>, using that in the <code>jot</code> call, and printing everything out.  In the interest of full disclosure, here&rsquo;s
the final command along with the output from my project:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>-&gt; % git rev-list master | awk <span class="s1">&#39;NR % 20 == 0&#39;</span> | <span class="k">while </span><span class="nb">read </span>revhash; <span class="k">do </span>git checkout -q <span class="nv">$revhash</span> <span class="o">&amp;&amp;</span> <span class="se">\ </span>
</span><span class='line'>find . -name <span class="s1">&#39;*.scala&#39;</span> | xargs cat | wc -l | <span class="se">\ </span>
</span><span class='line'><span class="nb">read </span>lines <span class="o">&amp;&amp;</span> <span class="o">((</span><span class="nv">hashes</span> <span class="o">=</span> <span class="nv">$lines</span> / 100<span class="o">))</span> <span class="o">&amp;&amp;</span> <span class="se">\ </span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;`jot -b &#39;#&#39; - 1 $hashes | xargs | tr -d &#39; &#39;` $lines&quot;</span>; <span class="k">done</span>
</span><span class='line'><span class="c">######################################################### 5700</span>
</span><span class='line'><span class="c">##################################################### 5333</span>
</span><span class='line'><span class="c">################################################### 5151</span>
</span><span class='line'><span class="c">############################################### 4796</span>
</span><span class='line'><span class="c">############################################# 4530</span>
</span><span class='line'><span class="c">##################################### 3786</span>
</span><span class='line'><span class="c">################################### 3528</span>
</span><span class='line'><span class="c">#################################### 3660</span>
</span><span class='line'><span class="c">#################################### 3615</span>
</span><span class='line'><span class="c">################################ 3208</span>
</span><span class='line'><span class="c">############################ 2848</span>
</span><span class='line'><span class="c">############################ 2832</span>
</span><span class='line'><span class="c">############################ 2855</span>
</span><span class='line'><span class="c">########################### 2786</span>
</span><span class='line'><span class="c">######################## 2418</span>
</span><span class='line'><span class="c">##################### 2186</span>
</span><span class='line'><span class="c">################## 1834</span>
</span><span class='line'><span class="c">################ 1664</span>
</span><span class='line'><span class="c">############## 1412</span>
</span><span class='line'><span class="c">############ 1270</span>
</span><span class='line'><span class="c">########### 1179</span>
</span><span class='line'><span class="c">######## 892</span>
</span><span class='line'><span class="c">###### 651</span>
</span><span class='line'><span class="c">#### 420</span>
</span><span class='line'><span class="c"># 138</span>
</span></code></pre></td></tr></table></div></figure>


<p>The growth at the beginning looked pretty normal, and I must say I&rsquo;m slightly happy that around the middle it remained
constant, and even took a slight dip afterwards.  After the dip though it seems like the growth started shooting up
again, which is not a good sign.  This is consistent with my personal experience, as I recall starting to really throw
in the super-hacks at around that time, so everything is probably due for another refactor.</p>

<p>In closing, I&rsquo;d like to remark that while this post was pretty monolithic and it took a lot of text to explain
everything for the first time, in real life this command probably took about 2-3 minutes to write.  And that&rsquo;s what I
find these utils are really really good at&mdash;Quick dirty answers to the little &ldquo;I wonder&hellip;&rdquo; / &ldquo;What if&hellip;&rdquo; questions
that tend to pop up while coding.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Les Iterables]]></title>
    <link href="http://alexkuang.github.io/blog/2013/12/21/les-iterables/"/>
    <updated>2013-12-21T08:16:00-05:00</updated>
    <id>http://alexkuang.github.io/blog/2013/12/21/les-iterables</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://alexkuang.github.io/images/les-iterables.jpg" width="500"></p>

<blockquote><p>Not very uplifting&#8230;</p><footer><strong>David Pollak</strong></footer></blockquote>


<blockquote><p>Slick production values.</p><footer><strong>Jan Christopher Vogt</strong></footer></blockquote>


<blockquote><p>Wonderful acting!</p><footer><strong>Jonas Boner</strong></footer></blockquote>


<p><em>(Sorry guys, saw this in <a href="http://reddit.com/r/scala">/r/scala</a> and kind of had to.)</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure First Impressions]]></title>
    <link href="http://alexkuang.github.io/blog/2013/12/20/clojure-first-impressions/"/>
    <updated>2013-12-20T14:05:00-05:00</updated>
    <id>http://alexkuang.github.io/blog/2013/12/20/clojure-first-impressions</id>
    <content type="html"><![CDATA[<p>After achieving some measure of familiarity with Scala, and with newfound copious amounts of free time, I decided I
wanted to see more of what the functional world had to offer.  The obvious choices were Haskell and Clojure; but while
Haskell has the upper hand in functional purity and a crazy advanced type system, I like to think I&rsquo;m a pragmatic guy at
heart and Clojure seemed more practical.  I haven&rsquo;t worked with it too extensively, but my experience so far can be
summarized by two words: Simple and composable.</p>

<h4>The language</h4>

<p>Clojure is a refreshingly simple language.  Despite my last foray into a Lisp being about half a decade ago, the
learning curve was much gentler than I&rsquo;d expected.  Maybe it&rsquo;s because I was already in a functional programming
mindset, but the straightforward syntax and <a href="http://clojure-doc.org/">abundance</a>
<a href="http://clojure.org/getting_started">of</a> <a href="http://clojure.org/cheatsheet">documentation</a> probably helped.  And on a
completely subjective level: <code>iDislikeCamelCase</code>, and <code>clojure-case-is-pretty-neat</code>.</p>

<h4>The ecosystem</h4>

<p>Of course, the overall enjoyability of using a language doesn&rsquo;t depend solely on the core language, but also the
libraries and toolchain available.  Most of the libraries I&rsquo;ve seen keep in line with the design of the language: super
lightweight, super simple, super composable, and as a result super easy to ramp up on and use.  Theoretically that
should just describe all good library design in general, but I feel like the clojure community takes it especially to
heart.</p>

<p>Compojure, for example, chose to implement its url
<a href="https://github.com/weavejester/compojure/wiki/Destructuring-Syntax">destructuring</a> to closely follow the destructuring
available in stock Clojure <code>let</code>s expressions.  I can&rsquo;t help but draw the comparison to Scala, where I&rsquo;d be more likely
to find that url decomposition exists only in the form of an exotic DSL.  Another huge example for me is the difference
between the simplicity of the Clojure build tool Leiningen and the craziness of Scala&rsquo;s SBT.  Sorry SBT&mdash;You work very
well, but I&rsquo;d rather not have to google what the <code>&lt;++=</code> operator does every time I touch the build.</p>

<h4>With vim</h4>

<p>One of my original reasons for leaning clojure was its close integration with
<a href="http://www.chris-granger.com/lighttable/">LightTable</a>.  As it turns out, the functionality I liked could be
replicated in vim with <a href="https://github.com/tpope/vim-fireplace">fireplace.vim</a>&rsquo;s quasi-insta-repl and insta-doc, due in
no small part to leiningen and nrepl&rsquo;s awesomeness.
<a href="https://github.com/kien/rainbow_parentheses.vim">Rainbow parentheses</a> is also pretty cool, and has been useful enough
that I will probably keep it on even when I don&rsquo;t have to deal with the hardcore levels of parens in Lisps:</p>

<p><img class="center" src="http://alexkuang.github.io/images/rainbow-parens.png"></p>

<h4>Overall</h4>

<p>If programming languages could be graded on usability, Clojure would get full marks.  It has been a breath of fresh air
after dealing with the crazy complexity in Scala.  Undoubtedly working through the latter had a part in making the
former much easier, and Scala will always have a place with me, but for now I find myself slowly joining the rest of the
Clojure bandwagon.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zelda as a Metaphor for Complexity]]></title>
    <link href="http://alexkuang.github.io/blog/2013/12/11/zelda-as-a-metaphor-for-complexity/"/>
    <updated>2013-12-11T18:29:00-05:00</updated>
    <id>http://alexkuang.github.io/blog/2013/12/11/zelda-as-a-metaphor-for-complexity</id>
    <content type="html"><![CDATA[<p>Recently, my gaming bandwidth has been taken up by the new Zelda game, A Link Between Worlds.  It&rsquo;s been a while since
my last trip to Hyrule, but I&rsquo;ve always loved the ingenuity behind the dungeons, especially the ones in Ocarina of Time
which could take upwards of hours (Water Temple, I&rsquo;m looking at you) to complete on the first run.  One of them jumps to
mind particularly: The Forest Temple, a dungeon you encounter in the early-mid game immediately after gaining access to
adult Link.</p>

<p>At first glance, it seems like a completely normal dungeon&mdash;You&rsquo;ve got your wolves, you&rsquo;ve got your carnivorous plants,
and the obvious puzzle in the form of 4 torches that have to be lit.  Fairly straightforward, until the game hits you
with this:</p>

<p><img class="center" src="http://alexkuang.github.io/images/forest-temple-hallway.jpg"></p>

<p>The first time you hit the twisting hallway, you have to follow it as-is to the other side, your perspective being
warped, to end up in a room with you standing on its &ldquo;wall&rdquo;.  On the &ldquo;floor&rdquo; is a chest, inaccessible in your current
state, and further on is a door you don&rsquo;t have the key to.  After a few more rooms and a battle with some wolves, you
end up with the bow which allows you to hit a switch to un-twist the hallway, bringing a completely new
perspective to the rooms&mdash;Most obviously, the chest from the earlier &ldquo;floor&rdquo; is now reachable, and after a little
contemplation and a lot of climbing, you get the key to the previously locked door&hellip;  <em>Which you can&rsquo;t access until you
re-twist the hallway.</em></p>

<p>This simple sequence is, in essence, what makes the classical Zelda dungeons challenging and oh so much fun.  In
addition to an &ldquo;item of the moment&rdquo;, each area contains an inventive mechanic that completely changes the landscape
of the entire dungeon.  A room is completely different when your perspective is rotated, platforms become traversable
after you flood the floor with sand, and so on.  It&rsquo;s no longer just <em>Push a block over here</em>, it&rsquo;s <em>Push a block over
here to change the water level so we can push that other block, and then change the water level back to align the two
blocks properly and maybe we can finally get to that chest over there.  Oh wait, that didn&rsquo;t work, maybe if I switch the
water level back BEFORE moving the second block&hellip;</em></p>

<p>Sound familiar?  The hardest dungeons&#8217; mechanics tend to use some piece of outside state to introduce exponentially more
complex interactions between the existing items that Link already has access to.  Interactions that now depend not only
on the current environment, but also the configuration of surrounding environments, and probably the order that
everything was done as well.  Keeping track of all that is welcome, even enjoyable, when I&rsquo;m playing Zelda.  But I have
no wish to be dealing with such things when I&rsquo;m trying to make sure my code is doing what I want it to.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Neophyte's Take on Scala]]></title>
    <link href="http://alexkuang.github.io/blog/2013/12/09/a-neophytes-take-on-scala/"/>
    <updated>2013-12-09T18:12:00-05:00</updated>
    <id>http://alexkuang.github.io/blog/2013/12/09/a-neophytes-take-on-scala</id>
    <content type="html"><![CDATA[<p>A <a href="http://overwatering.org/blog/2013/12/scala-1-star-would-not-program-again/">blog post</a> has recently been making the
rounds in all the usual programming fora&mdash;/r/programming, hackernews, and so on&mdash;even eliciting a
<a href="https://groups.google.com/forum/#!topic/scala-debate/153H3Ya4Nxk">response</a> from Scala&rsquo;s creator himself.  There&rsquo;s a
lot of discussion both productive and inflammatory out there already, but I thought I&rsquo;d jot down my perspective on the
common points as someone who: 1. picked scala up relatively recently (2.9.2 and 2.10), 2. has worked with it for a few
months on the side, and 3. comes from a background of dynamic languages.</p>

<h4>Long Compile Times</h4>

<p>I can definitely see where this is coming from.  Scala&rsquo;s compile times can be pretty long, though I had pegged that as
the cost of using a compiled language anyway.  I, at least, felt a marked increase in times upgrading from <code>2.9.2</code> to
<code>2.10</code>, presumably from the slew of new features like macros.  However, it seems that <code>2.11</code> will thankfully be
<a href="http://java.dzone.com/articles/state-scala-2013">focused</a> on compiler optimizations.  In the meantime, I&rsquo;ve found that
judicious use of some of Scala&rsquo;s heavier features (such as implicits) keeps the compile times manageable.
<a href="http://zeroturnaround.com/software/jrebel/">JRebel</a> has been a godsend as well for hot-reloading in incremental
compilation, and they do offer a personal Scala license for free.  Without JRebel my life as a scala user would have
been a lot harder.</p>

<h4>Opaque Syntax</h4>

<p>I agree completely here.  Scala&rsquo;s flexibility in parsing + its allowance of symbolic method names obviously allows for a
lot of flexibility.  This allows the construction of all sorts of DSLs; whether these DSLs end up being expressive or
just plain confusing, is another thing altogether.  In this case, I&rsquo;d have to say that just because something is
possible does not mean it should be done all the time.</p>

<!-- more -->


<p>The original post mentions that their build script&rsquo;s syntax seemed to be all over the place; I&rsquo;m assuming they were
referring to the de facto scala build tool, <a href="http://www.scala-sbt.org/">sbt</a>.  While it&rsquo;s great in a lot of ways, I
personally am not a big fan of their heavy use of symbolic names either.  Just as an example, a relatively simple build
file for one of my personal projects already has all of the following:</p>

<figure class='code'><figcaption><span>build.sbt </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">libraryDependencies</span> <span class="o">++=</span> <span class="nc">Seq</span><span class="o">(</span> <span class="o">...</span> <span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">testOptions</span> <span class="n">in</span> <span class="nc">Test</span> <span class="o">+=</span> <span class="o">(...)</span>
</span><span class='line'>
</span><span class='line'><span class="n">resourceGenerators</span> <span class="n">in</span> <span class="nc">Compile</span> <span class="o">&lt;+=</span> <span class="o">(...)</span>
</span></code></pre></td></tr></table></div></figure>


<p>All of them are obviously for adding to some sort of sequence, but still different enough to trip you up.  And this is
still relatively shallow territory&mdash;I haven&rsquo;t even mentioned the insanity that comes with more advanced libraries, like
the <a href="http://stackoverflow.com/questions/14472310/pronounceable-names-for-scalaz-operators">fish operator</a>.</p>

<p>In Odersky&rsquo;s google groups thread, he mentions a proposal for requiring an equivalent alphabetical alias for all
symbolic methods.  I hope that goes through.  If nothing else, it&rsquo;ll make the methods easier to google.</p>

<h4>Documentation</h4>

<p>As with any budding technology, documentation tends to lag behind development.  However, language and core library
documentation has improved immensely even in the time since I picked up Scala, so many kudos to the typesafe team for
that.  However, the third-party libraries still have a way to go; as helpful and educational as it may be, source code
should <em>not</em> be the go-to method for research.</p>

<h4>Types and Case Classes</h4>

<p>Here&rsquo;s where I have to respectfully disagree completely with the original post.  I <em>love</em> types and case classes.  Being
able to encode logic in your types that would otherwise have ended up as boilerplate-y edge case checking, <em>and</em> having
the compiler do it for you instead of maintaining the extra tests, is a win in my book.  Coming from a dynamic web
background, having a compiler do some of these checks for me was a breath of fresh air, especially since it doesn&rsquo;t come
at the cost of extreme clunkiness a la Java.</p>

<p>And case classes / <a href="http://learnyouahaskell.com/making-our-own-types-and-typeclasses">algebraic data types</a> are the
bee&rsquo;s knees.  Between the <code>copy</code> method and the free pattern matching, I don&rsquo;t see how case classes do anything but get
rid of repetition.  Forgive the simplistic example:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Calculator</span><span class="o">(</span><span class="n">brand</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">model</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">version</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Extraction, conditionals, and assignment, all done succinctly</span>
</span><span class='line'><span class="k">def</span> <span class="n">calcType</span><span class="o">(</span><span class="n">calc</span><span class="k">:</span> <span class="kt">Calculator</span><span class="o">)</span> <span class="k">=</span> <span class="n">calc</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="nc">Calculator</span><span class="o">(</span><span class="s">&quot;hp&quot;</span><span class="o">,</span> <span class="s">&quot;20B&quot;</span><span class="o">,</span> <span class="mi">1</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="s">&quot;financial&quot;</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'>  <span class="k">case</span> <span class="nc">Calculator</span><span class="o">(</span><span class="n">brand</span><span class="o">,</span> <span class="n">model</span><span class="o">,</span> <span class="n">version</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="s">&quot;Calculator: %s %s %s is of unknown type&quot;</span><span class="o">.</span><span class="n">format</span><span class="o">(</span><span class="n">brand</span><span class="o">,</span> <span class="n">model</span><span class="o">,</span> <span class="n">version</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// No custom methods/etc needed</span>
</span><span class='line'><span class="k">def</span> <span class="n">upgrade</span><span class="o">(</span><span class="n">calc</span><span class="k">:</span> <span class="kt">Calculator</span><span class="o">)</span> <span class="k">=</span> <span class="n">calc</span><span class="o">.</span><span class="n">copy</span><span class="o">(</span><span class="n">version</span> <span class="k">=</span> <span class="n">calc</span><span class="o">.</span><span class="n">version</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Overall impressions</h4>

<p>Despite its flaws, I&rsquo;ve really enjoyed working with Scala and it will probably remain a part of my toolbox.  Its
flexibility and power makes it a great gen-purpose language, especially in its type system and ability to combine
functional programming with OO.  It sits in the JVM, which means interoperability with the existing mammoth Java
ecosystem comes with just a little bit of glue code.  And more importantly, it means that if I should pick up Clojure in
the future, interoperability with THAT will not be too far off either, knock on wood.</p>

<p>That said, it&rsquo;s not by any means a perfect language.  The same flexibility that makes it great to use can often result
in convoluted APIs, and it&rsquo;s very easy to shoot yourself in the foot.  Living in the JVM also means the language has to
deal with things like type erasure; that results in some annoying limitations, especially if you&rsquo;re looking to use scala
in a more advanced functional capacity (see <a href="https://github.com/scalaz/scalaz">scalaz</a>).  And lastly&hellip;  Scala, at least
to me, is one of those tools that feels natural once you&rsquo;re used to it, but requires a significant mental shift to fully
grok&mdash;I wouldn&rsquo;t want to be plopped into scala on a fresh project with a one month deadline.  Ideally, there should be
some better documentation to help bridge that gap.</p>

<p>Luckily, if that mailing list thread is any indication, the community is aware of these shortcomings.  And as the
language and ecosystem mature, they will hopefully become less and less of a problem.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jab, jab]]></title>
    <link href="http://alexkuang.github.io/blog/2013/12/04/jab/"/>
    <updated>2013-12-04T19:04:00-05:00</updated>
    <id>http://alexkuang.github.io/blog/2013/12/04/jab</id>
    <content type="html"><![CDATA[<p>In the past, my biggest problem with blogging has always been with finding something to write about.  Every time an idea
came, I&rsquo;d recall the original post that inspired it, or have one miraculously pop up on google upon doing more
research.  Inevitably the post would be articulate, well-researched, and laden with comments from impressed readers to
boot.  And I would hit control+w, convinced that I don&rsquo;t have anything to add; even if I did, I&rsquo;m an awful writer and
nobody reads my blog anyway.</p>

<p>But writing is an Important Skill, one that I&rsquo;d very much like to improve.  I&rsquo;m certainly not going to get any better by
<em>not</em> doing it, and <a href="http://weknowmemes.com/2012/05/sucking-at-something-is-the-first-step-to-becoming/">everyone has to start somewhere</a>: keep practicing, keep
drilling, keep jabbing away, and eventually you&rsquo;ll probably make progress.  I remember an old post of Jeff Atwood&rsquo;s
where his only advice was to <a href="http://www.codinghorror.com/blog/2007/10/how-to-achieve-ultimate-blog-success-in-one-easy-step.html">pick a schedule</a> and stick
with it.  Maybe it&rsquo;s about time I did just that.  <strong>One post a week</strong>, even if the topic sounds asinine and I&rsquo;m low on
inspiration and nobody will read it (or <em>especially</em> if nobody will read it?).</p>

<p>With all that said, I&rsquo;d like to introduce my newest housemate, <a href="http://waffleparadox.smugmug.com/Animals/Zelda">Zelda</a>.</p>

<p><img class="center" src="http://waffleparadox.smugmug.com/Animals/Zelda/i-rNGBWHH/0/L/DSC_2268-L.jpg"></p>

<p>She arrived with all of 3 days&#8217; notice, and is at just about that age where kittens tend to be terrible people.  She&rsquo;ll
bully the other (much bigger) cats, knock over bowls and trash bags, attack everything like the king of the jungle, and
just generally be an unabashed little snot.  But she&rsquo;s disarmingly adorable, so naturally none of that matters in the
slightest.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Roast Leg of Lamb]]></title>
    <link href="http://alexkuang.github.io/blog/2013/11/17/roast-leg-of-lamb/"/>
    <updated>2013-11-17T12:32:00-05:00</updated>
    <id>http://alexkuang.github.io/blog/2013/11/17/roast-leg-of-lamb</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://waffleparadox.smugmug.com/Food/Leg-of-Lamb/i-q4M6vbN/0/L/DSC_2277-L.jpg"></p>

<p>Last weekend I saw a giant leg of New Zealand lamb that looked way too good to pass up, crazy Whole Foods prices or not.
Huge roasted joints of meat are always a win with me but I strongly prefer bone in; there&rsquo;s just so much more flavor
that way.  I took the basic steps from <a href="http://www.youtube.com/watch?v=5qvEdCmD8Pk">this video</a> by Thomas Keller, using
an oven temp of 325 for ~1hr and frenching the tip of the bone to aid in carving.  I finished the last few minutes with
a cranked up broiler to really get a nice crust on the surface.</p>

<p>There was one problem I had with the conventional wisdom, though: laying the herbs on/around the meat and just seasoning
the surface doesn&rsquo;t seem like it would be enough to really get that taste in there, especially with something this
thick.  So I took a cue from how cloves are used in ham, substituting the cloves for garlic and the ham joint for a lamb
leg.  Spearing the garlic with small sprigs of rosemary added just the right extra punch, and ended up staining the
garlic green as a bonus.</p>

<p>I would consider this experiment a success.  Embedding the garlic really gets the flavor into the meat, and the rosemary
adds a lot to the presentation as well. If nothing else, it can be an excuse to crack some Monty Python shrubbery jokes
at the dinner table.  Chances to do that don&rsquo;t come around nearly as often as they should.</p>

<p>(More photos can be found <a href="http://waffleparadox.smugmug.com/Food/Leg-of-Lamb/">here</a>)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fibonacci Stream]]></title>
    <link href="http://alexkuang.github.io/blog/2013/10/17/fibonacci-stream/"/>
    <updated>2013-10-17T07:15:00-04:00</updated>
    <id>http://alexkuang.github.io/blog/2013/10/17/fibonacci-stream</id>
    <content type="html"><![CDATA[<p>I was going to test out some of the codeblock functionality in octopress, but as it turns out the fancy stuff I wanted
to test is <a href="https://groups.google.com/forum/#!topic/octopress/y1IlHmFYydQ">not available in master</a> and I&rsquo;m far too lazy
to sync to 2.1 at the moment.  As such, everyone will have to settle for this plain jane snippet:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// e.g., fibStream.take(5)</span>
</span><span class='line'><span class="k">def</span> <span class="n">fibStream</span><span class="k">:</span> <span class="kt">Stream</span><span class="o">[</span><span class="kt">BigInt</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">loop</span><span class="o">(</span><span class="n">prev1</span><span class="k">:</span> <span class="kt">BigInt</span><span class="o">,</span> <span class="n">prev2</span><span class="k">:</span> <span class="kt">BigInt</span><span class="o">)</span><span class="k">:</span> <span class="kt">Stream</span><span class="o">[</span><span class="kt">BigInt</span><span class="o">]</span> <span class="k">=</span> <span class="n">prev1</span> <span class="o">#::</span> <span class="n">loop</span><span class="o">(</span><span class="n">prev2</span><span class="o">,</span> <span class="n">prev1</span> <span class="o">+</span> <span class="n">prev2</span><span class="o">)</span>
</span><span class='line'>  <span class="n">loop</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span><span class="mi">1</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nothing fancy, just one of many possible variations of the fibonacci sequence.  This one is done via a <code>Stream</code>,
which is Scala&rsquo;s memoized lazily evaluated list.  (<a href="http://www.scala-lang.org/api/current/index.html#scala.collection.immutable.Stream">More here</a>).</p>

<p>Will probably write more about the why/how of the nested loop <code>def</code> (mostly for my own reference), but for now I think
the codeblock looks pretty neat.  It&rsquo;s still a shame I didn&rsquo;t get to play with funny line numbers/highlighting stuff
though.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Big Bowl O Beef]]></title>
    <link href="http://alexkuang.github.io/blog/2013/10/15/big-bowl-o-beef/"/>
    <updated>2013-10-15T21:50:00-04:00</updated>
    <id>http://alexkuang.github.io/blog/2013/10/15/big-bowl-o-beef</id>
    <content type="html"><![CDATA[<p>I wanted to test out how images worked with the blog, but had nothing imminent to write about.  Since kittens are
already taken, here&rsquo;s a picture of a big bowl of beef with kimchi and rice.</p>

<p><img class="center" src="http://waffleparadox.smugmug.com/Food/Bowl-O-Beef-2013/i-FtTgtWC/0/L/DSC_2245-L.jpg"></p>

<p>Not too bad.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First post]]></title>
    <link href="http://alexkuang.github.io/blog/2013/10/10/first-post/"/>
    <updated>2013-10-10T22:00:00-04:00</updated>
    <id>http://alexkuang.github.io/blog/2013/10/10/first-post</id>
    <content type="html"><![CDATA[<p>&hellip; Or, &ldquo;How I Chose a Blog Platform.&rdquo;</p>

<p>Multiple people have said that I should get back into writing, so I guess I&rsquo;m back into the blogging scene now.  It&rsquo;s
true I did have a food blog before a particular work project completely pole-axed it, and I would love to start it up
again.  The problem is that WordPress has always been a bit cumbersome for me so this time around I wanted something
different.  Plus I&rsquo;ve been meaning to get into the whole tech/misc blogging thing.  So I set out to find something that:</p>

<ol>
<li>Is easy to write in.  I&rsquo;d been fascinated by the idea of blogging in Markdown, so preferably that.</li>
<li>Could render code snippets / do syntax highlighting in most major languages.</li>
<li>Could display pictures with reasonable flexibility and prettiness.</li>
<li>Supported some form of organization based on categories/tags.</li>
</ol>


<p><a href="https://telegr.am/">telegr.am</a> was a strong contender for a while, since it uses Markdown and is written in <code>Scala</code> and
thus would have been familiar ground, but sadly it was missing in some key features.  All the other frameworks I found
were either lackluster, pay-only, or required self-deployment on a server, which I&rsquo;m clearly too lazy to do nowadays.
Thus I came to settle on <a href="http://octopress.org/">Octopress</a>, a framework based on <a href="http://jekyllrb.com/">Jekyll</a> which I
had already played with for my personal site before.  Thus far it fits the bill nearly perfectly, with the only rub
being the heavy dependency on git (or in my particular case, github).  But that isn&rsquo;t really a problem unless I ever
want a blog with non-technical contributors, so that bridge can be crossed when the time comes.</p>

<p>TL;DR &ndash; New blog.  Pardon the appearance during construction.</p>
]]></content>
  </entry>
  
</feed>
