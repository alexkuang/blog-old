<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[alex kuang]]></title>
  <link href="http://alexkuang.github.io/atom.xml" rel="self"/>
  <link href="http://alexkuang.github.io/"/>
<<<<<<< HEAD
  <updated>2015-01-24T16:21:07-05:00</updated>
=======
  <updated>2014-11-25T18:11:22-05:00</updated>
>>>>>>> 3f751f29d79be717da3f49498942848728c0ff04
  <id>http://alexkuang.github.io/</id>
  <author>
    <name><![CDATA[Alex Kuang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
<<<<<<< HEAD
    <title type="html"><![CDATA[2015, a Whole New Year!]]></title>
    <link href="http://alexkuang.github.io/blog/2015/01/24/2015-a-whole-new-year/"/>
    <updated>2015-01-24T14:25:50-05:00</updated>
    <id>http://alexkuang.github.io/blog/2015/01/24/2015-a-whole-new-year</id>
    <content type="html"><![CDATA[<p>It&rsquo;s 2015, and a whole new year!  Several updates, of no particular relation and in no particular order:</p>

<h3>Some Site Updates</h3>

<p>I finally got around to updating Octopress after I noticed the search bar was broken.  The process was
relatively painless and some of the new features look neat, but I can&rsquo;t say I&rsquo;m a huge fan of the enforced solarized
light scheme in codeblocks.</p>

<p>While I was at it, I also decided to refresh the headline and about page, since it&rsquo;s been a while.</p>

<h3>Thing of the Week</h3>

<p>While I&rsquo;ve actually been really good about staying on top of sending the internal email blasts for TotW, I ended up
neglecting the blog cross-posting.  Part of it is because after I started, I had more work-related travel and didn&rsquo;t
have the blog repo all properly set up on the other laptop; and the other part is that translating back and forth
between markdown and outlook is kind of a PITA.  In the future, I will probably set up a proper workflow with pandoc and
everything to make it easier.  But in the meantime, I&rsquo;ve back-posted them with dates tagged for context, plus some bonus
after-the-fact commentary.</p>

<p>As far as the TotW itself, it&rsquo;s been a success in my book.  Reactions have generally been positive, and a lot of the
posts end up generating very interesting conversation where I often end up learning something new.  In addition, to keep
up with the writing I have to be 1) more active in learning new things, and 2) more thorough since I actually have to
write about it.  Win, win.  Next step: to collect more feedback, then perhaps involve more people and hopefully expand
it beyond just my immediate teammates.</p>

<h3>2014 in Review and MicroConf</h3>

<p>Back in late 2013 / early 2014, I was extremely frustrated with a number of things and decided to leave my full-time
job.  After resting off some of the burnout, I set off to build a side project with a friend with two goals in mind: 1) Learn
new tech and get back into the game properly; in this case, Scala and Lift.  2) Build out a prototype scheduling app and
try to bootstrap an actual business with it.  The latter ultimately failed, but I still learned a ton and the knowledge
gained from the former arguably got me to my position today as a Scala developer.  (In hindsight, trying to learn a
completely new tech stack <em>and</em> all the business + domain-specific stuff required was crazy&hellip;  Next time, I would
definitely prototype with something easier and more familiar.)</p>

<p>Without getting too side-tracked, suffice to say that 2014 was insane for personal growth and productivity, and I&rsquo;d love
to continue that trend for 2015.  And while I&rsquo;m definitely not looking to do anything drastic employment-wise, I will
say that the side-project itch has never really left me.  So I figured after all this time listening to the likes of
<a href="http://www.startupsfortherestofus.com/">Startups For The Rest Of Us</a> and <a href="http://bootstrapped.fm/">bootstrapped.fm</a>,
2015 would be a great year to go to MicroConf and actually hang out with all the folks living the lifestyle.  Hopefully
I come back with heaps of new insight and ideas, but either way it looks to be a blast.  Anyway, I managed to snag a
ticket after some cutthroat site-camping and waitlist-waiting, so I am stoked.</p>

<p>tl;dr - VEGAS, BABY!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thing of the Week: `gn` in Vim]]></title>
    <link href="http://alexkuang.github.io/blog/2015/01/24/gn-in-vim/"/>
    <updated>2015-01-24T11:53:51-05:00</updated>
    <id>http://alexkuang.github.io/blog/2015/01/24/gn-in-vim</id>
    <content type="html"><![CDATA[<p>Back to vim this week!  This one might be a bit esoteric&ndash;apologies in advance&ndash;but it’s such a useful feature that I
had to share.</p>

<p><code>gn</code> is a kinda-sorta-but-not-really-motion that selects the matches of the current search pattern.  It’s kind of like
<code>n</code> (go to next match in search), except it also selects the contents of the match in visual mode.  But where it really
shines is when used with operators like <code>c</code> (change), etc to operate on the match.  Quick demo to see it in action,
before continuing:</p>

<script type="text/javascript" src="https://asciinema.org/a/15656.js" id="asciicast-15656" async></script>


<p>So this is nice for a few reasons.  First, it’s neat to be able to operate on just the match of a search.  I remember a
few times before I found <code>gn</code> where I was doing something similar to the demo, tried to use <code>cw</code>, and got mildly annoyed
that I had to retype half the word because the <code>w</code> motion was too aggressive.</p>

<p>Another nice thing is that with <code>gn</code>, the dot command will both move to the next match and repeat whatever operation you
did, instead of having to do the movement and operation separately using <code>n.</code>.  It seems petty, but hey it’s a full 50%
keystroke savings!!</p>

<p>Arguably, the demo above could have been done with an ex command like <code>:%s/test/actual</code> (universal search and replace),
but I think <code>gn</code> still offers a lot.  It works on all operators, so <code>ygn</code> would yank the match, <code>gUgn</code> would uppercase
the match, and so on.  Plus, it allows an easy on-the-fly workflow that’s still decently fast without the “crap I have
to tune all the edge cases in my expression”: for example, if you want to only change some instances of <code>test</code> to
<code>actual</code>, but others to <code>sandbox</code>.</p>

<p>As always, see <code>:h gn</code> for more details.  Also note that gn has only been available since vim 7.4 or something like
that, but there’s no reason anyone shouldn’t be using the latest on their personal boxes…</p>

<h3>Bonus</h3>

<p>This email also generated some additional discussion, which led to my discovery of the multi-select feature in Sublime,
and the <a href="https://github.com/terryma/vim-multiple-cursors">associated vim plugin</a>.  It seems like it&rsquo;s in a different
spirit than <code>gn</code>, but still a very cool way of thinking about operating on search results that I had not seen before.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thing of the Week: Thread Macro (01/07/15)]]></title>
    <link href="http://alexkuang.github.io/blog/2015/01/24/thread-macro/"/>
    <updated>2015-01-24T11:53:42-05:00</updated>
    <id>http://alexkuang.github.io/blog/2015/01/24/thread-macro</id>
    <content type="html"><![CDATA[<p>Let’s deviate from Scala for a bit and talk about clojure.  Or lisps in general, I guess.  A lot of the “kinda joking
except not really” quips that commonly float around on the internet are about the parentheses, as in how there are so
many of them.  For example, if you want to take a number <code>x</code> and add one, multiply by two, then add 3, the code might
naively look something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nb">* </span><span class="p">(</span><span class="nb">+ </span><span class="nv">x</span> <span class="mi">1</span><span class="p">)</span> <span class="mi">2</span><span class="p">)</span> <span class="mi">3</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or perhaps like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">+ </span><span class="mi">3</span> <span class="p">(</span><span class="nb">* </span><span class="mi">2</span> <span class="p">(</span><span class="nb">+ </span><span class="mi">1</span> <span class="nv">x</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Look at the parens!  Especially the consecutive 3 closing ones in the second variation.  For a sufficiently long chain
of functions, it can get pretty unreadable—especially with multiple arguments and whatnot.</p>

<p>Enter clojure’s thread macro.  The thread macro is a macro in the form of <code>(-&gt; x &amp; forms)</code>, and it “threads” <code>x</code> through
the <code>forms</code> as the first arg*.  Which sounds terribly confusing explained, so an example is probably better here.  Take
this snippet using the thread macro:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="c1">;; add one, multiply by two, and add three</span>
</span><span class='line'><span class="p">(</span><span class="nb">-&gt; </span><span class="nv">x</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">+ </span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">* </span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">+ </span><span class="mi">3</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>This desugars into <code>(+ (* (+ x 1) 2) 3)</code>, i.e. the first variation of the initial example above.  Personally, I find the
macro version much more readable since each call is on its own line, and it seems more expressive of applying a series
of functions to the initial x.</p>

<p>The thread macro is also useful for chaining together collection methods like <code>map</code>.  Since clojure doesn’t have
first-class OO support (instead favoring protocols and such), map exists as a regular function that takes the collection
as an arg, instead of as a method on a collection class.  So chaining together a bunch of ops on a vector might look
something like&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="c1">;; add one to every number and filter for even numbers</span>
</span><span class='line'><span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nb">+ </span><span class="mi">1</span> <span class="nv">%</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">filter </span><span class="nv">even?</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; Without the thread macro, would look like:</span>
</span><span class='line'><span class="p">(</span><span class="nb">filter </span><span class="nv">even?</span> <span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nb">+ </span><span class="mi">1</span> <span class="nv">%</span><span class="p">)</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span><span class="p">]))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The only difference is that in this case, ->> was used.  ->> is “thread last”, which is like -> (“thread first”), except
it inserts the expression at the end of the form.</p>

<p>This pattern also exists in other languages (especially those that don’t offer first-class OO, which allows fancy
<code>return self</code> type stuff), like Elixir’s pipe <code>|&gt;</code> (in the spirit of the unix pipe) which is what prompted me to spread
the word about this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="c1"># double and add one to each element</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="o">|&gt;</span> <span class="nc">Enum</span><span class="p">.</span><span class="n">map</span><span class="p">(</span><span class="k">fn</span> <span class="n">x</span> <span class="p">-&gt;</span> <span class="n">x</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="o">|&gt;</span> <span class="nc">Enum</span><span class="p">.</span><span class="n">map</span><span class="p">(</span><span class="k">fn</span> <span class="n">x</span> <span class="p">-&gt;</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The thread macro pattern doesn’t have as much of a place in Scala, since Scala has mechanisms like the collection
library and implicit conversions to help express similar logic in elegant ways.  But when I first read up on macros in
lisp, I spent some time scratching my head at the day-to-day practical uses until I found this and had my first
“ohhhhhhhhhhhh” moment.  In any case, hope this was mildly interesting!</p>

<p>* - Well technically, as the second item in the form, which is effectively the first arg for functions&hellip; But that might
be a bit too lispy.</p>

<h3>Bonus</h3>

<p>When I published this email to the internal list, it generated some discussion wherein I learned that there are other
neat features of the same sort like <a href="https://clojuredocs.org/clojure.core/doto">doto</a>, and that they&rsquo;re all just
various derivations of the K combinator.  Of course, googling k-combinators led to a pretty
<a href="http://en.wikipedia.org/wiki/SKI_combinator_calculus">heavy looking wiki page</a>, so I was referred to
<a href="http://combinators.info/">http://combinators.info/</a> , which I have been trying to get through since.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thing of the Week: keybase.io (12/24/14)]]></title>
    <link href="http://alexkuang.github.io/blog/2015/01/24/keybase-dot-io/"/>
    <updated>2015-01-24T11:53:30-05:00</updated>
    <id>http://alexkuang.github.io/blog/2015/01/24/keybase-dot-io</id>
    <content type="html"><![CDATA[<p>Since it&rsquo;s nearly the holidays, I figured something more frivolous would be good for this week.</p>

<p><a href="https://keybase.io/">keybase.io</a> is a combination public key store slash centralized identity slash hipster social
network app.  How it works is that you generate a key pair and upload the public key to their store.  From there, you
can use your key pair to sign messages and post them on twitter, github, bit coin sites, etc, to verify that those
accounts actually belong to you.  At the end of it, you get a funny page like this saying that “why yes, all of these
accounts are crypto-verified to be the same person”, like this:  <a href="https://keybase.io/alexkuang">https://keybase.io/alexkuang</a></p>

<p>It’s still very much in toy app status at the moment, but I think it’s a really cool idea.  I believe they’re open for
signup now; not sure if there’s a beta line or something, but apparently I have invites if anyone wants.</p>

<p>Happy holidays!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thing of the Week: The Silver Searcher (12/17/14)]]></title>
    <link href="http://alexkuang.github.io/blog/2015/01/24/the-silver-searcher/"/>
    <updated>2015-01-24T11:53:21-05:00</updated>
    <id>http://alexkuang.github.io/blog/2015/01/24/the-silver-searcher</id>
    <content type="html"><![CDATA[<h3>grep</h3>

<p>This week I’d like to talk about grep.  Grep is a great general-purpose tool and works very well for filtering text in
the middle of a long command chain, but I’ve found it a bit clunky as a codebase search tool.</p>

<p>For example, let’s say you’re sitting in some project and trying to grep for all the places where a function is being
called.  The naïve first attempt would be:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grep myFunc</span></code></pre></td></tr></table></div></figure>


<p>Except that just hangs, since grep defaults to reading from stdin.  A next attempt might be:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grep myFunc .</span></code></pre></td></tr></table></div></figure>


<p>Except then grep would complain that . is a directory, which leads to:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grep –r myFunc .</span></code></pre></td></tr></table></div></figure>


<p>Which finally works, but still leaves a bit to be desired.  The biggest annoyance is that grep will get caught up in
files that you don’t necessarily care about, e.g. Tags files, third-party dependency files, binary files… “Binary file
./lib/default/xxx.jar matches” anyone?</p>

<h3>ag</h3>

<p>Introducing <a href="http://geoff.greer.fm/ag/">ag, the silver searcher</a>!  Ag:</p>

<ul>
<li>Fulfills the above “find this in cwd” use case via a simple, short <code>ag myFunc</code></li>
<li>Is easy to install and super fast</li>
<li>Respects project ignore files: for example, it will ignore the patterns found in your .gitignore</li>
<li>In the case of files that you want in the repo but still don’t want to search, it also supports the use of a .agignore file</li>
<li>Integrates well into other tools: AFAIK there are ag plugins for vim, emacs, and text mate.</li>
</ul>


<p>Fun fact: I was doing the whole <code>grep –r</code> thing for an embarrassingly long time before I bothered to search for a better
workflow.  My initial search turned up ack, which then led to ag.  As far as I can tell, feature-wise they’re
comparable; I eventually settled on ag just ‘cause the command requires less typing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thing of the Week: Vim % Expansion (12/10/14)]]></title>
    <link href="http://alexkuang.github.io/blog/2015/01/24/vim-expansion/"/>
    <updated>2015-01-24T11:52:53-05:00</updated>
    <id>http://alexkuang.github.io/blog/2015/01/24/vim-expansion</id>
    <content type="html"><![CDATA[<h3>% (Current File Name)</h3>

<p>Another vim tip this week!  This time, it’s about ‘%’, which expands to ‘current file name’.  This is especially useful
in projects with java/scala style directory setups, where your source is approximately 1.5 million folders away from the
project root, but you kind of want to hang around project root for things like ant/sbt/etc to work.  <code>%</code> makes this
easier to work with files in the deeply nested folders while doing this.</p>

<p>Taking a contrived example, instead of doing something like this to <code>git log</code> the file you are currently editing:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>:!git log src/main/scala/com/bizo/(…)/Foo.scala</span></code></pre></td></tr></table></div></figure>


<p>You can just do:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>:!git log %</span></code></pre></td></tr></table></div></figure>


<p>This is extremely convenient and works everywhere in command line mode (basically, whenever ‘:’ is used), but is also
useful to have if you’re ever writing vim script.  See <code>:h expand</code> for the function to use in vim script, and some other
special keywords.</p>

<p>But wait!  There’s more!</p>

<!-- more -->


<p>Vim also supports file modifiers.  For example, <code>:h</code> gives you the ‘head’ of the file name, i.e. the directory of the
file.  Taking another (contrived) example, you can git add the entire folder containing the file you are editing by
doing something like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>:!git add %:h</span></code></pre></td></tr></table></div></figure>


<p>See <code>:h file-modifiers</code> for more details (and more modifiers).</p>

<h3>Another Convenient Expansion</h3>

<p>I use <code>%:h</code> so often (for example, when I realize I’ve opened a file before creating the directory containing it, or am
editing a file in a directory that doesn’t exist) that I’ve made a shortcut for it in my vimrc:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cnoremap %% &lt;C-R&gt;=expand('%:h').'/'&lt;CR&gt;</span></code></pre></td></tr></table></div></figure>


<p>Roughly speaking, it remaps the key chord <code>%%</code> in command line mode to paste from a special register that evals the vim
script inside it, which calls the expand() function.</p>

<p>Long story short, what this allows me to do is do something like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>:!mkdir -p %%</span></code></pre></td></tr></table></div></figure>


<p>And the <code>%%</code> will expand in-place into whatever <code>%:h</code> resolved to.  Not only is this a win because it’s slightly less to
type than %:h, but the expansion also allows you to quickly modify your command on the fly and go up/down a directory if
needed.</p>

<p>And of course, here’s the requisite asciinema with a quick demo of this in action:</p>

<script type="text/javascript" src="https://asciinema.org/a/14592.js" id="asciicast-14592" async></script>


<p>Hope that’s useful / mildly interesting!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thing of the Week: Scala Enrichment (12/03/14)]]></title>
    <link href="http://alexkuang.github.io/blog/2015/01/24/scala-enrichment/"/>
    <updated>2015-01-24T11:52:37-05:00</updated>
    <id>http://alexkuang.github.io/blog/2015/01/24/scala-enrichment</id>
    <content type="html"><![CDATA[<p>Douglas Crockford recently gave a tech talk at work, where he casually endorsed Scala during the Q&amp;A at the end.  Given
that and the fact that I&rsquo;ve been hearing increasing mentions of it in the company at large, I figured this week I&rsquo;d plug
a neat feature of Scala and a recent use case where I found it extremely handy.</p>

<h3>The Feature</h3>

<p>Anyone who&rsquo;s worked with The AWS SDK (or just Java code in general) will be familiar with the builder pattern.
Recently, I was writing some code to automate setup of CloudWatch alarms for a DynamoDB table.  The alarm request
started looking something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">req</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">PutMetricsAlarmRequest</span><span class="o">()</span>
</span><span class='line'>  <span class="o">.</span><span class="n">withNamespace</span><span class="o">(</span><span class="s">&quot;DynamoDB&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">withDimensions</span><span class="o">(</span><span class="n">dimensionsForTableName</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">withStatistic</span><span class="o">(</span><span class="s">&quot;Sum&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">withComparisonOperator</span><span class="o">(</span><span class="nc">GreaterThanThreshold</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">withThreshold</span><span class="o">(</span><span class="n">thresholdNumber</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">withMetricName</span><span class="o">(</span><span class="n">throttledMetricName</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">withEvaluationPeriods</span><span class="o">(</span><span class="n">periods</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">withPeriod</span><span class="o">(</span><span class="n">periodDuration</span><span class="o">.</span><span class="n">toSeconds</span><span class="o">.</span><span class="n">toInt</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">withAlarmActions</span><span class="o">(</span><span class="n">idMappingSNS</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">withAlarmName</span><span class="o">(</span><span class="n">alarmNameFor</span><span class="o">(</span><span class="n">tableName</span><span class="o">,</span> <span class="n">throttledMetric</span><span class="o">,</span> <span class="n">throttledThreshold</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">cloudwatchClient</span><span class="o">.</span><span class="n">putMetricAlarm</span><span class="o">(</span><span class="n">req</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which is serviceable, but less than ideal given that I had multiple alarms of roughly the same nature.  Plus, I felt
like it left something to be desired in terms of readability and communicating the intent of the alarm in a succinct
way.  Enter <code>implicit class</code>s and the &ldquo;enrichment&rdquo;* pattern!  Basically, it lets us turn the above into something more
like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">req</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">PutMetricAlarmRequest</span><span class="o">()</span>
</span><span class='line'>  <span class="o">.</span><span class="n">forTable</span><span class="o">(</span><span class="n">tableName</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">triggerOnSumGreaterThan</span><span class="o">(</span><span class="n">throttledMetric</span><span class="o">,</span> <span class="n">throttledThreshold</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">afterEvaluationPeriods</span><span class="o">(</span><span class="n">evaluationPeriodDuration</span><span class="o">,</span> <span class="n">evaluationPeriods</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">withAlarmActions</span><span class="o">(</span><span class="n">idMappingSNS</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">withAlarmName</span><span class="o">(</span><span class="n">alarmNameFor</span><span class="o">(</span><span class="n">tableName</span><span class="o">,</span> <span class="n">throttledMetric</span><span class="o">,</span> <span class="n">throttledThreshold</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">cloudwatchClient</span><span class="o">.</span><span class="n">putMetricAlarm</span><span class="o">(</span><span class="n">req</span><span class="o">)</span> <span class="cm">/** Can still pass req back into AWS API! */</span>
</span></code></pre></td></tr></table></div></figure>


<p>With the addition of this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">implicit</span> <span class="k">class</span> <span class="nc">MetricAlarmRequestHelper</span><span class="o">(</span><span class="n">req</span><span class="k">:</span> <span class="kt">PutMetricAlarmRequest</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">forTable</span><span class="o">(</span><span class="n">tableName</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">req</span><span class="o">.</span><span class="n">withNamespace</span><span class="o">(</span><span class="s">&quot;DynamoDB&quot;</span><span class="o">).</span><span class="n">withDimensions</span><span class="o">(</span><span class="n">tableMetricDimensions</span><span class="o">(</span><span class="n">tableName</span><span class="o">).</span><span class="n">asJava</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">triggerOnSumGreaterThan</span><span class="o">(</span><span class="n">metricName</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">threshold</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">req</span><span class="o">.</span><span class="n">withStatistic</span><span class="o">(</span><span class="s">&quot;Sum&quot;</span><span class="o">).</span><span class="n">withComparisonOperator</span><span class="o">(</span><span class="nc">GreaterThanThreshold</span><span class="o">).</span><span class="n">withThreshold</span><span class="o">(</span><span class="n">threshold</span><span class="o">).</span><span class="n">withMetricName</span><span class="o">(</span><span class="n">metricName</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">afterEvaluationPeriods</span><span class="o">(</span><span class="n">periodDuration</span><span class="k">:</span> <span class="kt">Duration</span><span class="o">,</span> <span class="n">periods</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">req</span><span class="o">.</span><span class="n">withEvaluationPeriods</span><span class="o">(</span><span class="n">periods</span><span class="o">).</span><span class="n">withPeriod</span><span class="o">(</span><span class="n">periodDuration</span><span class="o">.</span><span class="n">toSeconds</span><span class="o">.</span><span class="n">toInt</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h3>How It Works</h3>

<p>One of the coolest&ndash;and probably most confusing&ndash;keywords in scala is <code>implicit</code>, which can refer to many different
things.  For now, let&rsquo;s limit the discussion to implicit conversions.  A grossly oversimplified tl;dr is that there can
be some def of the form:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">implicit</span> <span class="k">def</span> <span class="n">foo2bar</span><span class="o">(</span><span class="n">foo</span><span class="k">:</span> <span class="kt">Foo</span><span class="o">)</span><span class="k">:</span> <span class="kt">Bar</span> <span class="o">=</span> <span class="o">{</span> <span class="err">…</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And as long as that def is in scope, the code will convert anything of type Foo into type Bar without having to re-write
that logic or call some conversion method.  For more information on implicits in general, see this excellent answer by
Daniel Sobral, who is basically the Jon Skeet of the Scala world:
<a href="http://stackoverflow.com/questions/5598085/where-does-scala-look-for-implicits/5598107#5598107">http://stackoverflow.com/questions/5598085/where-does-scala-look-for-implicits/5598107#5598107</a></p>

<p>Extending the use of implicits, that means that if you do something like, for the above use-case:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">MetricAlarmRequestHelper</span><span class="o">(</span><span class="n">req</span><span class="k">:</span> <span class="kt">PutMetricAlarmRequest</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span> <span class="cm">/** Same function defs as above */</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">implicit</span> <span class="k">def</span> <span class="n">vanillaRequest2Helper</span><span class="o">(</span><span class="n">req</span><span class="k">:</span> <span class="kt">PutMetricAlarmRequest</span><span class="o">)</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">MetricAlarmRequestHelper</span><span class="o">(</span><span class="n">req</span><span class="o">)</span>
</span><span class='line'><span class="k">implicit</span> <span class="k">def</span> <span class="n">helper2vanillaRequest</span><span class="o">(</span><span class="n">helper</span><span class="k">:</span> <span class="kt">MetricAlarmRequestHelper</span><span class="o">)</span> <span class="k">=</span> <span class="n">helper</span><span class="o">.</span><span class="n">req</span>
</span></code></pre></td></tr></table></div></figure>


<p>then scala will be able to magically convert from the vanilla request to the helper for use in your client code, and
then from the helper back to the vanilla request for passing to other parts of the Amazon API. <code>implicit class</code> is just
short-hand introduced in Scala 2.10 that does the above for you in one convenient construct that makes things even more
concise.  For more info, see the scala docs: <a href="http://docs.scala-lang.org/overviews/core/implicit-classes.html">http://docs.scala-lang.org/overviews/core/implicit-classes.html</a></p>

<p>Beyond use cases like wrapping builders, this kind of enrichment using <code>implicit</code> can be extremely powerful, especially
for extending functionality where it&rsquo;s not practical to alter the original code.  Though as with all advanced features
of anything, it&rsquo;s probably best not to go overboard.  :)</p>

<h3>Naming</h3>

<p>Quick bit of bonus trivia&hellip;  When the pattern first rose into prominence, it was known colloquially as &ldquo;pimp my class&rdquo;.
Then folks got all up in arms about the political correctness of the word &ldquo;pimp&rdquo;, so now the common term is
&ldquo;enrichment&rdquo;.</p>
]]></content>
  </entry>
  
  <entry>
=======
>>>>>>> 3f751f29d79be717da3f49498942848728c0ff04
    <title type="html"><![CDATA[Thing of the Week: Bash Bangs]]></title>
    <link href="http://alexkuang.github.io/blog/2014/11/25/thing-of-the-week-bash-bangs/"/>
    <updated>2014-11-25T17:40:00-05:00</updated>
    <id>http://alexkuang.github.io/blog/2014/11/25/thing-of-the-week-bash-bangs</id>
    <content type="html"><![CDATA[<p>This week I wanted to do a quick tip on some neat functionality in bash (and other bash-like shells), the bang commands.</p>

<p>Let&rsquo;s say you have some long important command that you want to run.  You run it, only to discover that you need sudo
privileges.  For situations like this, <code>!!</code> (entire last command) can be a great time-saver.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<<<<<<< HEAD
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">echo </span><span class="m">1</span> <span class="m">2</span> <span class="m">3</span> <span class="m">4</span> 5
</span><span class='line'><span class="m">1</span> <span class="m">2</span> <span class="m">3</span> <span class="m">4</span> <span class="m">5</span> <span class="c"># let&#39;s pretend echo throws an error too and wants sudo for some reason</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>sudo !!
</span><span class='line'>sudo <span class="nb">echo </span><span class="m">1</span> <span class="m">2</span> <span class="m">3</span> <span class="m">4</span> 5
</span><span class='line'>Password:
</span><span class='line'><span class="m">1</span> <span class="m">2</span> <span class="m">3</span> <span class="m">4</span> 5
=======
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">echo </span>1 2 3 4 5
</span><span class='line'>1 2 3 4 5 <span class="c"># let&#39;s pretend echo throws an error too and wants sudo for some reason</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>sudo !!
</span><span class='line'>sudo <span class="nb">echo </span>1 2 3 4 5
</span><span class='line'>Password:
</span><span class='line'>1 2 3 4 5
>>>>>>> 3f751f29d79be717da3f49498942848728c0ff04
</span></code></pre></td></tr></table></div></figure>


<p>Now, let&rsquo;s say you don&rsquo;t want to blindly re-run the last command.  <code>:p</code> can be used to print it without overwriting the
&ldquo;last command&rdquo; history.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<<<<<<< HEAD
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">echo </span><span class="m">1</span> <span class="m">2</span> <span class="m">3</span> <span class="m">4</span> 5
</span><span class='line'><span class="m">1</span> <span class="m">2</span> <span class="m">3</span> <span class="m">4</span> 5
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>!!:p
</span><span class='line'><span class="nb">echo </span><span class="m">1</span> <span class="m">2</span> <span class="m">3</span> <span class="m">4</span> 5
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>sudo !!
</span><span class='line'>sudo <span class="nb">echo </span><span class="m">1</span> <span class="m">2</span> <span class="m">3</span> <span class="m">4</span> 5
</span><span class='line'>Password:
</span><span class='line'><span class="m">1</span> <span class="m">2</span> <span class="m">3</span> <span class="m">4</span> 5
=======
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">echo </span>1 2 3 4 5
</span><span class='line'>1 2 3 4 5
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>!!:p
</span><span class='line'><span class="nb">echo </span>1 2 3 4 5
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>sudo !!
</span><span class='line'>sudo <span class="nb">echo </span>1 2 3 4 5
</span><span class='line'>Password:
</span><span class='line'>1 2 3 4 5
>>>>>>> 3f751f29d79be717da3f49498942848728c0ff04
</span></code></pre></td></tr></table></div></figure>


<p>Bang commands also extend to the individual parts of the last command you ran.  The most basic form of this is <code>echo
!:[n]</code>, where [n] is the nth word in the command, indexed from 0.  There are also shortcuts: <code>!^</code> gives the first arg
(like <code>!:1</code>) and <code>!$</code> gives the last arg.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">echo </span>a b c d e
</span><span class='line'>a b c d e
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> !:1
</span><span class='line'><span class="nb">echo </span>a
</span><span class='line'>a
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo </span>a b c d e
</span><span class='line'>a b c d e
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>!:5:p <span class="c"># :p works with any bangs!</span>
</span><span class='line'>e
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> !:5
</span><span class='line'><span class="nb">echo </span>e
</span><span class='line'>e
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo </span>a b c d e
</span><span class='line'>a b c d e
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> !<span class="err">$</span>
</span><span class='line'><span class="nb">echo </span>e
</span><span class='line'>e
</span></code></pre></td></tr></table></div></figure>


<<<<<<< HEAD
<p>Personally, I use <code>!$</code> the most, since very often I&rsquo;ll only want the last arg (e.g., <code>ls [some tab-completed dir]</code> ->
=======
<p>Personally, I use <code>!$</code> the most, since very often I&rsquo;ll only want the last arg (e.g., <code>ls [some tab-completed dir]</code> &ndash;>
>>>>>>> 3f751f29d79be717da3f49498942848728c0ff04
<code>rm -r !$</code>).  Plus, it&rsquo;s the easiest sequence to hit, finger-wise.</p>

<p>One final tip: awesome shells like, say, <code>zsh</code>, will actually tab-complete bangs and get rid of the need for <code>:p</code>.
e.g. <code>sudo !!&lt;TAB&gt;</code> gets replaced with <code>sudo echo 1 2 3 4 5</code> in place.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thing of the Week: Vim Visual Block Mode]]></title>
    <link href="http://alexkuang.github.io/blog/2014/11/20/thing-of-the-week-vim-visual-block-mode/"/>
    <updated>2014-11-20T18:33:00-05:00</updated>
    <id>http://alexkuang.github.io/blog/2014/11/20/thing-of-the-week-vim-visual-block-mode</id>
    <content type="html"><![CDATA[<p>Friday Dev Demos are a big part of Bizo culture.  Every Friday, developers take turn presenting a short 10-15 min
demo on something cool they&rsquo;d found that wasn&rsquo;t necessarily work related.  The topic could be anything from a neat
snippet of code to a cool iOS application they&rsquo;d just found to a fun web game.  Dev demo day is great for the social
aspect, but also for the chance to showcase (and draw inspiration from) ideas that might not come up in day-to-day
discussion.</p>

<p>Unfortunately, the practice kind of fell by the wayside in the chaos of
<a href="http://blog.bizo.com/blog/from-the-digital-c-suite/linkedin-to-acquire-bizo">joining a new company</a> and all the
<<<<<<< HEAD
changes that entails.  While I&rsquo;m sure it&ndash;or something similar&ndash;will make a comeback, in the meantime I decided to
=======
changes that entails.  While I&rsquo;m sure it&mdash;or something similar&mdash;will make a comeback, in the meantime I decided to
>>>>>>> 3f751f29d79be717da3f49498942848728c0ff04
try carrying on the torch by starting a weekly &ldquo;Thing of the Week&rdquo; email blast that is in roughly the same spirit.  And
I figured while I&rsquo;m at it, why not stick it on the blog?  If nothing else, it will mean more practice writing and more
incentive for me to be proactive in learning new things to talk about.</p>

<p>So without further ado, the first &ldquo;Thing of the Week&rdquo; is a neat little feature in vim that I don&rsquo;t think deserves enough
<<<<<<< HEAD
attention&ndash;Visual Block mode.  The visual modes in vim are very similar to highlighting in other editors, but I&rsquo;ve
=======
attention&mdash;Visual Block mode.  The visual modes in vim are very similar to highlighting in other editors, but I&rsquo;ve
>>>>>>> 3f751f29d79be717da3f49498942848728c0ff04
always felt that Visual Block is the underrated cousin to Visual and Visual Line mode.  Rather than trying to explain
what it does in words, here&rsquo;s a quick terminal cast to demonstrate via asciinema:</p>

<script type="text/javascript" src="https://asciinema.org/a/14064.js" id="asciicast-14064" async></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Baby's First Alfred Workflow]]></title>
    <link href="http://alexkuang.github.io/blog/2014/10/18/babys-first-alfred-workflow/"/>
    <updated>2014-10-18T15:32:00-04:00</updated>
    <id>http://alexkuang.github.io/blog/2014/10/18/babys-first-alfred-workflow</id>
    <content type="html"><![CDATA[<p>Lately I&rsquo;ve been spending a lot of my work time staring at <a href="http://aws.amazon.com/cloudwatch/">CloudWatch</a> metrics.
Particularly, we have a <a href="http://aws.amazon.com/kinesis/">Kinesis</a> application that publishes metrics on how long a
record spends hanging around in the stream before getting picked up by our processor.  The problem is that the metric is
published in milliseconds, which while precise, is not exactly human-readable for large enough durations.</p>

<p>I&rsquo;ve been a huge fan of <a href="http://www.alfredapp.com/">Alfred</a> for a while, and I use its quick-launch and custom search
functions nearly constantly.  I only recently got around to ponying up for the powerpack, which lets you define custom
<<<<<<< HEAD
&ldquo;workflows&rdquo;, so I figured&ndash;why not use a workflow to convert the milliseconds to something more readable?</p>
=======
&ldquo;workflows&rdquo;, so I figured&mdash;why not use a workflow to convert the milliseconds to something more readable?</p>
>>>>>>> 3f751f29d79be717da3f49498942848728c0ff04

<!-- more -->


<p>The Alfred workflow UI is basically a fancy flow chart.  It allows you to string together elements for input,
<<<<<<< HEAD
actions, and output&ndash;Kind of like a graphical representation of a unix pipe.  The final product of the workflow looked
=======
actions, and output&mdash;Kind of like a graphical representation of a unix pipe.  The final product of the workflow looked
>>>>>>> 3f751f29d79be717da3f49498942848728c0ff04
something like this:</p>

<p><img class="center" src="http://alexkuang.github.io/images/alf-flow.png"></p>

<p>The first step is to define a keyword, which is how this workflow will be invoked in the alfred menu:</p>

<p><img class="center" src="http://alexkuang.github.io/images/alf-keyword.png"></p>

<p>All this means is that I can use <code>mr (x)</code> to invoke the workflow, where x is some parameter.  <code>{query}</code> is just Alfred&rsquo;s
<<<<<<< HEAD
magic string for&ndash;you guessed it&ndash;injecting <code>argv</code>.  In this case, it updates the &lsquo;preview&rsquo; item in the dropdown as the
=======
magic string for&mdash;you guessed it&mdash;injecting <code>argv</code>.  In this case, it updates the &lsquo;preview&rsquo; item in the dropdown as the
>>>>>>> 3f751f29d79be717da3f49498942848728c0ff04
argstring is entered.</p>

<p>The actual script itself is simple and super hacked together in python, but the UI here is still worth showing.  Note the
use of {query}:</p>

<p><img class="center" src="http://alexkuang.github.io/images/alf-py.png"></p>

<p>In addition to python, the &ldquo;run script&rdquo; element also supports bash, ruby, and all manner of things up to and including Perl.</p>

<p>And, the final product:</p>

<p><img class="center" src="http://alexkuang.github.io/images/alf-demo.png"></p>

<p><img class="center" src="http://alexkuang.github.io/images/alf-print.png"></p>

<p>There are a few optimizations I can see immediately (for example, the &lsquo;large print&rsquo; output seems a bit kludgy), but it&rsquo;s
not bad for a few minutes&#8217; work!</p>

<p>And while this script was relatively simple, there&rsquo;s tons more to be explored.  In addition to running a script, Alfred
also supports other actions such as opening an application, running a web search, running iTunes, and then some.  And
for output, Alfred can do things like copy to clipboard or post to the Mac&rsquo;s Notification Center.  Really, it&rsquo;s like a
graphical scripting language on steroids with easy interaction with OS X.  I&rsquo;ve seen some projects lately for more
accessible coding via graphical interfaces; Alfred&rsquo;s approach is a pretty good start as far as I&rsquo;m concerned.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Curry House Noodles]]></title>
    <link href="http://alexkuang.github.io/blog/2014/08/02/curry-house-noodles/"/>
    <updated>2014-08-02T13:49:00-04:00</updated>
    <id>http://alexkuang.github.io/blog/2014/08/02/curry-house-noodles</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://waffleparadox.smugmug.com/Food/Curry-House-Noodles/i-8tzWS42/0/L/DSC_3216-L.jpg"></p>

<p>These noodles were heavily inspired by my trip to <a href="http://www.thehse.com/">The House</a> in San Francisco.  They had a dish
that was essentially a very fancy lo mein, with some Satay-ish sauce with wasabi, topped with vegetable and steak.
Noodles?  Steak?  SAUCE?!  I didn&rsquo;t know it was possible to combine so many of my favorite things.</p>

<!-- more -->


<p>This version is much more simple, with much less vegetable variety and substituting the wasabi-sauce with the good ol&#8217;
standby Madras curry.</p>

<<<<<<< HEAD
<p>First, prep all relevant vegetables&ndash;In my case, julienning carrots and cucumbers, and slicing some onions.  Then boil
=======
<p>First, prep all relevant vegetables&mdash;In my case, julienning carrots and cucumbers, and slicing some onions.  Then boil
>>>>>>> 3f751f29d79be717da3f49498942848728c0ff04
the noodles according to the relevant package instructions and shock with cold water to stop the cooking.  I recommend a
wheat-based noodle; nothing with huge amounts of egg, or alkaline.  Not that it&rsquo;d be terrible or anything, I just don&rsquo;t
think it&rsquo;d work as well.</p>

<<<<<<< HEAD
<p>While doing all that, also sear off and cook a steak&ndash;The specifics of a well-cooked steak probably deserve a post of
=======
<p>While doing all that, also sear off and cook a steak&mdash;The specifics of a well-cooked steak probably deserve a post of
>>>>>>> 3f751f29d79be717da3f49498942848728c0ff04
their own.</p>

<p>While the steak is resting in a nice warm place, get a pan nice and hot and cook off the onions and vegetables.  Add in
the spices.  I was feeling slightly lazy, so I went back to the ol&#8217; Madras curry powder.  Anyone hand-mixing spices
should go for something with heavier turmeric/coriander and just a touch of spice, as opposed to a mixture that&rsquo;s
basically all cayenne.</p>

<p>Add a tiny bit of water to turn the curry into a thick paste and help the vegetables cook off.</p>

<p><img class="center" src="http://waffleparadox.smugmug.com/Food/Curry-House-Noodles/i-JBZW4kW/0/L/DSC_3210-L.jpg"></p>

<p>Add the noodles and give them a toss.  Add some cream to round out the flavors, then finish the cooking.</p>

<p><img class="center" src="http://waffleparadox.smugmug.com/Food/Curry-House-Noodles/i-bdKbzWN/0/L/DSC_3215-L.jpg"></p>

<p>And after everything is all nice, cooked, and combined, top with julienned cucumbers, steak, and maybe some scallions.</p>

<p><img class="center" src="http://waffleparadox.smugmug.com/Food/Curry-House-Noodles/i-d7hpQdj/0/L/DSC_3221-L.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Funny Pina Coladas]]></title>
    <link href="http://alexkuang.github.io/blog/2014/08/02/funny-pina-coladas/"/>
    <updated>2014-08-02T13:40:00-04:00</updated>
    <id>http://alexkuang.github.io/blog/2014/08/02/funny-pina-coladas</id>
    <content type="html"><![CDATA[<p>And so ends my streak of weekly posts.  ~8 months isn&rsquo;t too bad, is it?  I swear I have a legitimate excuse, though.
You see, last week I was away at an all-hands retreat for work.  Not only was I away from my computer for the majority
of it, some <a href="http://blog.bizo.com/blog/from-the-digital-c-suite/linkedin-to-acquire-bizo">big announcements</a> and the
resultant celebrations left me physically incapacitated, to put it politely.</p>

<p>In retribution, I offer you two things.  First, is a make-up food post (that will be published immediately after this
one).  Second, is a picture of a pina colada in a pineapple that I made on a bored Sunday afternoon:</p>

<p><img class="center" src="http://waffleparadox.smugmug.com/Food/Pina-Colada/i-qwZfFsq/0/L/DSC_3201-L.jpg"></p>

<p>The pineapple idea turned out pretty nicely.  I actually came really close to buying one of those fancy kitchen gadgets
<<<<<<< HEAD
that I always make fun of&ndash;in this case, a pineapple corer.  Luckily I refrained and, as it turns out, you can do pretty
=======
that I always make fun of&mdash;in this case, a pineapple corer.  Luckily I refrained and, as it turns out, you can do pretty
>>>>>>> 3f751f29d79be717da3f49498942848728c0ff04
well with a <a href="http://waffleparadox.smugmug.com/Food/Pina-Colada/i-s2XvKSK/0/L/DSC_3153-L.jpg">paring knife</a> and a
<a href="http://waffleparadox.smugmug.com/Food/Pina-Colada/i-d33xr5Q/0/L/DSC_3156-L.jpg">spoon</a>.  That said, the drink itself
could have used much improvement.  I used to think I wasn&rsquo;t a &ldquo;booze&rdquo; type person until I met folks who really knew what
they were doing and realized that, much like food, booze requires a lot of skill and care to pull off properly.  So I&rsquo;ll
be exploring that more; whether enough to start posting about it remains to be seen.  But in the meantime&hellip;</p>

<p>Pineapple!</p>

<p><img class="center" src="http://waffleparadox.smugmug.com/Food/Pina-Colada/i-wt87t3P/0/L/DSC_3208-L.jpg"></p>
]]></content>
  </entry>
  
  <entry>
<<<<<<< HEAD
    <title type="html"><![CDATA[Asciinema]]></title>
=======
    <title type="html"><![CDATA[asciinema]]></title>
>>>>>>> 3f751f29d79be717da3f49498942848728c0ff04
    <link href="http://alexkuang.github.io/blog/2014/07/16/asciinema/"/>
    <updated>2014-07-16T15:40:00-04:00</updated>
    <id>http://alexkuang.github.io/blog/2014/07/16/asciinema</id>
    <content type="html"><![CDATA[<p>I was tooling around the other day and discovered a service called <a href="https://asciinema.org">asciinema</a> which provides
<<<<<<< HEAD
terminalcasts&ndash;essentially, &ldquo;screencasts&rdquo; with terminal I/O.  This is awesome for a few reasons.</p>
=======
terminalcasts&mdash;essentially, &ldquo;screencasts&rdquo; with terminal I/O.  This is awesome for a few reasons.</p>
>>>>>>> 3f751f29d79be717da3f49498942848728c0ff04

<p>From a content consumer&rsquo;s standpoint, it&rsquo;s often hard to follow a blog post that&rsquo;s trying to outline a command line tip,
or a vim tip, for the simple fact that the static nature of writing alone isn&rsquo;t optimal for showing the flow between
&ldquo;steps&rdquo; (commands, keystrokes, what have you) and &ldquo;output&rdquo; (what you&rsquo;re supposed to see after executing commands).
Having a dynamic format for demos helps with this greatly.  Sure, there are screencasts, but that involves dealing with
videos and their associated heavy Flash Player bullshit.  asciinema is rendered with just bits of html and js.</p>

<p>From a wannabe content producer&rsquo;s standpoint&hellip;  Writing is <em>hard</em>.  Writing while crafting appropriate examples is
harder.  Doing all that while struggling with capturing the nature of the examples in plain text?  No thanks.
<<<<<<< HEAD
Again&ndash;Yes, there is the option of screencasts, but those are painful to set up.  Screencasts means worrying about
things like capturing software, background audio, What Tab Do I Have Open In My Browser, and Will Video Compression
Screw My Text Legibility.  As a consummately lazy person who only wants to do short self-contained clips for now&hellip;
That&rsquo;s way too big of a barrier.  asciinema is easy&ndash;Just install, then <code>asciinema rec</code> from the terminal and <code>&lt;CTRL-D&gt;</code>
to exit and upload.</p>

<p>And embedding takes 2 seconds&ndash;Check it!</p>
=======
Again&mdash;Yes, there is the option of screencasts, but those are painful to set up.  Screencasts means worrying about
things like capturing software, background audio, What Tab Do I Have Open In My Browser, and Will Video Compression
Screw My Text Legibility.  As a consummately lazy person who only wants to do short self-contained clips for now&hellip;
That&rsquo;s way too big of a barrier.  asciinema is easy&mdash;Just install, then <code>asciinema rec</code> from the terminal and <code>&lt;CTRL-D&gt;</code>
to exit and upload.</p>

<p>And embedding takes 2 seconds&mdash;Check it!</p>
>>>>>>> 3f751f29d79be717da3f49498942848728c0ff04

<script type="text/javascript" src="https://asciinema.org/a/10785.js" id="asciicast-10785" async></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA['MURICA - Ribs]]></title>
    <link href="http://alexkuang.github.io/blog/2014/07/11/murica-ribs/"/>
    <updated>2014-07-11T21:32:00-04:00</updated>
    <id>http://alexkuang.github.io/blog/2014/07/11/murica-ribs</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://waffleparadox.smugmug.com/Food/Murica-Ribs/i-NJP5Mrc/0/L/DSC_3131-L.jpg"></p>

<p>It is one of my greatest regrets as a Super Manly-Man that my current living situation is prohibitive against the
construction of fire pits, or even the ownership of so much as a grill.  And it is a travesty that on the Fourth of
<<<<<<< HEAD
July&ndash;one of the meatiest holidays of the meatiest of countries (&lsquo;MURICAAAAA)&ndash;I had to settle for a measly oven for my
=======
July&mdash;one of the meatiest holidays of the meatiest of countries (&lsquo;MURICAAAAA)&mdash;I had to settle for a measly oven for my
>>>>>>> 3f751f29d79be717da3f49498942848728c0ff04
ribs.  But alas, one must make do.</p>

<!-- more -->


<p>As far as ribs done in a scrawny house-oven go, these were actually pretty good; I basically stole the entire thing
wholesale from an episode of Good Eats.  While I wouldn&rsquo;t say braised ribs inspire me to go out and slay bears, I&rsquo;d say
all in all it could have turned out a lot worse.</p>

<h2>Meat</h2>

<ul>
<li>2 racks of ribs</li>
</ul>


<h2>Spice Rub</h2>

<ul>
<li>8 parts (I used a &frac14; cup per &ldquo;part&rdquo;) brown sugar</li>
<li>3 parts kosher salt (halve that if you insist on using table salt, you heathen)</li>
<li>1 part Chili P</li>
<li>1 part &ldquo;everything else&rdquo;</li>
</ul>


<h2>Everything Else</h2>

<p>A great big mix of&hellip;</p>

<ul>
<li>Old Bay</li>
<li>Dried Thyme</li>
<li>Cayenne Pepper</li>
<li>Black Pepper</li>
<li>Onion Powder</li>
</ul>


<h2>Braising Liquid</h2>

<ul>
<li>1 cup white while</li>
<li>2 Tb white wine vinegar</li>
<li>A few cloves of garlic, crushed</li>
<li>drizzle of honey</li>
</ul>


<p>Combine everything in the Spice Rub and make sure to mix well.  I ended up mixing and storing it in a few Ball jars,
<<<<<<< HEAD
since this stuff will keep forever.  Cover the ribs in it.  Seriously, don&rsquo;t be shy with the spice either&ndash;what are you,
=======
since this stuff will keep forever.  Cover the ribs in it.  Seriously, don&rsquo;t be shy with the spice either&mdash;what are you,
>>>>>>> 3f751f29d79be717da3f49498942848728c0ff04
a communist?</p>

<p>After the ribs are completely coated, wrap them in aluminum foil.  First seal up the foil lengthwise, then roll up the
ends to make a neat little package.  If you&rsquo;re paranoid like me, you can double-layer the foil.  Stick this in the
fridge overnight.</p>

<p><img class="center" src="http://waffleparadox.smugmug.com/Food/Murica-Ribs/i-J847KwB/0/L/DSC_3069-L.jpg"></p>

<p><img class="center" src="http://waffleparadox.smugmug.com/Food/Murica-Ribs/i-4MR872V/0/L/DSC_3074-L.jpg"></p>

<p>Several beers and a good night&rsquo;s sleep later, wake up and groggily pre-heat your oven to 225F.  Put everything for the
Braising Liquid into a saucepan, and bring to a simmer.  Remove the ribs, unroll one of the foil ends, and dump the
braising liquid into the foil packages.  It&rsquo;s kind of like feeding a pet, if your pet were aluminum and you were
planning on eating its insides.</p>

<p>Place everything onto a metal tray, and the tray into the oven.  Wait for 2 &frac12; to 3 hours, then remove and unwrap the
ribs.  Drain the braising liquid into a saucepan.</p>

<p><img class="center" src="http://waffleparadox.smugmug.com/Food/Murica-Ribs/i-N6TLMVp/0/L/DSC_3079-L.jpg"></p>

<p>Reduce the liquid in the pan until it reaches a sauce-like consistency.  We&rsquo;re talking about well past the french
&ldquo;spoon-back-coating&rdquo; level; look for something closer to a thick glaze.</p>

<p><img class="center" src="http://waffleparadox.smugmug.com/Food/Murica-Ribs/i-ZVPCzzC/0/L/DSC_3086-L.jpg"></p>

<p>Slather the sauce onto the ribs, then stick them under a broiler for a few minutes.  Marvel at the excellent color and
sizzling goodness.</p>

<p>Slice, cover with more sauce, and garnish with copious amounts of Independence.  Potato salad might also work.</p>

<p><img class="center" src="http://waffleparadox.smugmug.com/Food/Murica-Ribs/i-qX9g7j3/0/L/DSC_3138-L.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Caramelized Lemongrass Chicken]]></title>
    <link href="http://alexkuang.github.io/blog/2014/07/03/caramelized-lemongrass-chicken/"/>
    <updated>2014-07-03T15:06:00-04:00</updated>
    <id>http://alexkuang.github.io/blog/2014/07/03/caramelized-lemongrass-chicken</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://waffleparadox.smugmug.com/Food/Caramelized-Lemongrass-Chicken/i-FBL6Qgb/0/L/DSC_3055-L.jpg"></p>

<p>I don&rsquo;t make this as often as I should, since to be honest prepping lemongrass is kind of a pain even with a food
processor.  But when I do make the effort, it&rsquo;s totally worth it.  The refreshing flavors of lemongrass play really well
with the rich, strong flavors of caramel and chicken.  Plus, who doesn&rsquo;t like fish sauce?  Make sure to use the brand
with the crabs, though; otherwise, what&rsquo;s the point?</p>

<!-- more -->


<ul>
<li>1 lb boneless chicken thighs</li>
<li>4 stalks of lemongrass</li>
<li>1 yellow onion, chopped</li>
<li>2 Tbs sugar, 2 Tbs high heat oil</li>
<li>2 tsp fish sauce</li>
<li>4 cloves minced garlic</li>
<li>cilantro</li>
<li>scallions</li>
<li>whole chilies</li>
<li>salt, pepper</li>
</ul>


<p>Start off with prepping the lemongrass.  Cut the bottoms off the stalks as well as the tops, right where they start
turning dark green.  Bash them a few times with the back of your knife (or a brick, I guess), and slice into thin rings.
Then run your knife through the thin rings a few times to end up with a fine mince.  This is probably the most painful
and labor-intensive part of this entire dish, but it&rsquo;s important.  Bruising and chopping the lemongrass in this way
is essential to releasing the flavor, but at the same time nobody wants to pick big pieces of lemongrass out of their
teeth.  For the lazy/economical among us, I&rsquo;m sure a few pulses in the food processor would also work.  I&rsquo;ve also been
told you can buy pulverized lemongrass frozen, but&hellip;  Come on.  If you&rsquo;re reading this blog, you obviously have the
time to do some proper prep.</p>

<p>Cut the chicken thighs into small &frac12; to 1-inch cubes.  If the thighs came with skin, great; keep it, it helps with
flavor.  If not, that&rsquo;s alright too I suppose.  Personally, I just buy thighs with bone and skin on, and just debone
myself.  And as with most of these types of dishes, I&rsquo;m morally obligated to note that trying to substitute chicken
breast here is a capital offense.  Thighs just have so much more flavor.</p>

<p>Season the chicken with salt, pepper, and a few tablespoons of the chopped lemongrass, and set it aside for a few
minutes.  In the meantime, heat the oil in a large skillet over medium-high heat until it&rsquo;s shimmery and just about to
smoke.  Add the sugar, which should melt with some stirring after a minute or two.  Keep stirring, and wait for the
sugar syrup to turn brown and caramel-y.  At no point should the mixture smoke: If it does, the pan&rsquo;s gotten too hot,
and should be taken off the heat for a bit.</p>

<p>Stir in the rest of the chopped lemongrass, the onion, and the garlic, and fry for a few minutes.  Crank the heat all
the way up and throw in the chicken.  After a minute, throw in the chilies, and keep cooking until the chicken&rsquo;s done.
Take the pan off the heat, then add the fish sauce.  (Hint: Make sure to save the fish sauce for when the high heat
cooking is done, or else it&rsquo;ll smell up the joint.)  Finish with chopped scallions and chopped cilantro.</p>

<p><img class="center" src="http://waffleparadox.smugmug.com/Food/Caramelized-Lemongrass-Chicken/i-FHVvjDS/0/L/DSC_3045-L.jpg"></p>

<p>With a solid bowl of white rice, this amount of chicken is probably good for serving about 3-4 people, depending on
appetite needs and size.  For this particular run, I ended up with a bowl of vermicelli, with julienned cucumbers and
mint on the side.  Topped with more fish sauce.  Having no exposure to any sort of Vietnamese home culture, I can&rsquo;t
really speak to this dish&rsquo;s authenticity or anything like that.  I mean, I&rsquo;m sure some Vietnamese food icon is rolling
in their grave over my use of fish sauce and vermicelli, but at least it&rsquo;s delicious.</p>

<p><img class="center" src="http://waffleparadox.smugmug.com/Food/Caramelized-Lemongrass-Chicken/i-5CjWGbk/0/L/DSC_3063-L.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bracket Expansion in the Shell]]></title>
    <link href="http://alexkuang.github.io/blog/2014/06/25/bracket-expansion-in-the-shell/"/>
    <updated>2014-06-25T18:58:00-04:00</updated>
    <id>http://alexkuang.github.io/blog/2014/06/25/bracket-expansion-in-the-shell</id>
    <content type="html"><![CDATA[<p>Just a quick post to show of a neat little trick for those who are more command-line-driven: bracket expansion.</p>

<p>Basically, bracket expansion means that <code>some-string-called-{x,y}-here</code> desugars in the shell to
<code>some-string-called-x-here some-string-called-y-here</code>.  This is especially useful if, say, you&rsquo;re in a Java-like
directory structure and you accidentally placed your source class in your test folder, and you need to move it back:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># desugars into mv src/test/java/com/foobar/app/Class.java src/main/java/com/foobar/app/Class.java</span>
</span><span class='line'>mv src/<span class="o">{</span><span class="nb">test</span>,main<span class="o">}</span>/java/com/foobar/app/Class.java
</span></code></pre></td></tr></table></div></figure>


<p>Or if you&rsquo;ve already committed to source control, this also works quite nicely with <code>git mv</code>.  Another nice example from
recent memory is, say, if you were cleaning up some directories nested by date and wanted to only wipe a few months:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rm /posts/2014/<span class="o">{</span>01,03,06,07<span class="o">}</span>/*.html
</span></code></pre></td></tr></table></div></figure>


<p>Anyway, just a quick little post for a neat little trick.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA["Fuck It Friday" - Weeks 12 + 13, Street Food + Potatoes]]></title>
    <link href="http://alexkuang.github.io/blog/2014/06/16/fuck-it-its-friday-weeks-12-13/"/>
    <updated>2014-06-16T17:18:00-04:00</updated>
    <id>http://alexkuang.github.io/blog/2014/06/16/fuck-it-its-friday-weeks-12-13</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://waffleparadox.smugmug.com/Food/Fuck-It-Friday/i-5WQTNMH/0/L/DSC_3030-L.jpg"></p>

<p>This <em>was</em> going to be a big ol&#8217; fancy affair.  I set out to knock out two weeks&#8217; worth of challenges at once, and take
advantage of some sweet, sweet morels at the market.  Unfortunately, the potatoes decided to be uncooperative, so here
we are.</p>

<!-- more -->


<p>The original idea was to make curried fried clams as the &ldquo;street food&rdquo; portion of the challenge; luckily that turned out
pretty well.  I first laced some flour with turmeric, cumin, garam masala, cayenne, and salt, then soaked some minced
clams in milk.  A few minutes in some 350-degree oil later, voila!  One note though: rest them in parchment paper or a
mesh rack; paper towels will just end up steaming them as they cool, ruining the crunchy texture.</p>

<p><img class="center" src="http://waffleparadox.smugmug.com/Food/Fuck-It-Friday/i-7Rn3Gpg/0/L/DSC_3023-L.jpg"></p>

<p>While the curryish flavors got a bit overwhelmed by the tartar sauce, I like to think that it provided a bit more depth
to the flavor.  Placebo effect, anyone?</p>

<p>Here&rsquo;s where things get a bit dicey.  The original plan was to slice up a bunch of potatoes and stack them, then form a
mini-cake by surrounding it with a potato-morel &ldquo;icing&rdquo;.  However, I decided to be a dunce and add some morel-induced
cream, which ended up turning the potato-morel combo into more of a wet puree than a potato cake.</p>

<p><img class="center" src="http://waffleparadox.smugmug.com/Food/Fuck-It-Friday/i-kc4j69J/0/L/DSC_3025-L.jpg"></p>

<p>To salvage the situation, I ended up pan-frying the slices and combining them with the puree, making something like a
mutated gratin dauphinois.</p>

<p>At this point, I had given up all delusions of pretentious grandeur and decided, &ldquo;Fuck it, it&rsquo;s Friday&rdquo;.  Thus, I turned the
entire thing on its head, going from <em>frou-frou potato cake</em> to <em>giant plate of stuff</em> with cole slaw and extra tartar
sauce.  All things considered, it could have turned out much worse; at least it was still delicious, and that&rsquo;s what
really counts.  And I suppose the &ldquo;pile of food&rdquo; format is more appropriate for the street food theme anyway.</p>

<p><img class="center" src="http://waffleparadox.smugmug.com/Food/Fuck-It-Friday/i-vjNkfpR/0/L/DSC_3035-L.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello, Hardware World!]]></title>
    <link href="http://alexkuang.github.io/blog/2014/06/14/hello-hardware-world/"/>
    <updated>2014-06-14T16:56:00-04:00</updated>
    <id>http://alexkuang.github.io/blog/2014/06/14/hello-hardware-world</id>
    <content type="html"><![CDATA[<p>Recently, one of our tech leads at work previewed <a href="https://github.com/ogrodnek/analog-metrics-talk">a talk</a> that he&rsquo;s
planning to give on analog metrics for the upcoming Strange Loop conference.  I&rsquo;ve always wanted to play with
microcontrollers, and this really gave me a kick in the pants to get started.  Since I had a bit of amazon credit lying
around, I decided to buy an arduino starter kit with all sorts of buttons, lights, and doo-dads, but not enough power to
actually fry anything (I hope).  I still can&rsquo;t tell my head from my ass, but so far I can make a button turn on an LED.</p>

<p><img class="center" src="http://waffleparadox.smugmug.com/Other/Camera-Awesome-Photos/i-h59QFDb/0/L/CA_06051420063663-L.jpg"></p>

<p>Next step: world domination!</p>
]]></content>
  </entry>
  
  <entry>
<<<<<<< HEAD
    <title type="html"><![CDATA[Follow the Honey]]></title>
=======
    <title type="html"><![CDATA[Follow The Honey]]></title>
>>>>>>> 3f751f29d79be717da3f49498942848728c0ff04
    <link href="http://alexkuang.github.io/blog/2014/06/05/follow-the-honey/"/>
    <updated>2014-06-05T20:14:00-04:00</updated>
    <id>http://alexkuang.github.io/blog/2014/06/05/follow-the-honey</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://waffleparadox.smugmug.com/Other/Follow-The-Honey/i-kDb523C/0/L/DSC_2978-L.jpg"></p>

<<<<<<< HEAD
<p>A few weeks ago I was dragged somewhat skeptically to a honey store.  Yep, that&rsquo;s right&ndash;a honey store.  A store, that&rsquo;s
=======
<p>A few weeks ago I was dragged somewhat skeptically to a honey store.  Yep, that&rsquo;s right&mdash;a honey store.  A store, that&rsquo;s
>>>>>>> 3f751f29d79be717da3f49498942848728c0ff04
dedicated to honey.  I know.  Strange as it may sound, it&rsquo;s actually a thing.  But after my (thus far only) trip,
I&rsquo;m a convert.</p>

<!-- more -->


<p>The storefront is very cozy, nestled within the basement of a building in Harvard Square.  The inside is all amber and,
<<<<<<< HEAD
to the surprise of absolutely nobody, decorated with various bee-related paraphernalia&ndash;Everything from cards with bees
=======
to the surprise of absolutely nobody, decorated with various bee-related paraphernalia&mdash;Everything from cards with bees
>>>>>>> 3f751f29d79be717da3f49498942848728c0ff04
to beeswax candles.  Why couldn&rsquo;t I have known about this place back when we were doing
<a href="http://alexkuang.com/blog/2010/10/01/caneles-bordelais/">caneles</a>?  The first attempts with copper molds all but
required beeswax; hell, I still prefer that to cooking spray.  But I digress.</p>

<p>The workers were all super happy and friendly.  I wonder if it was the general almost-hippie peaceful vibe of the
interior, but they almost seemed <em>too</em> happy.  As in I was almost tempted to ask for the, ahem, &ldquo;special&rdquo; honey, so to
speak.  In any case, they were all perfectly pleasant and helpful and eager to offer samples from the honey bar.  Did
I mention they have a honey bar?  It&rsquo;s absolutely bizarre.  The first question I was asked was &ldquo;what flavors do you like
in your honey?&rdquo;  <em>I have no idea, are you kidding me?  I&rsquo;ve only had the kind in the bear bottles.</em></p>

<<<<<<< HEAD
<p>I ended up trying a few varieties ranging from the savory and spicy to the sweet and fruity.  And it&rsquo;s like coffee&ndash;Once
=======
<p>I ended up trying a few varieties ranging from the savory and spicy to the sweet and fruity.  And it&rsquo;s like coffee&mdash;Once
>>>>>>> 3f751f29d79be717da3f49498942848728c0ff04
you have the real stuff, you don&rsquo;t want to go back unless you have no other choice.  For my part, I walked out with
nearly 3 digits&#8217; worth of merch.</p>

<p><img class="center" src="http://waffleparadox.smugmug.com/Other/Follow-The-Honey/i-xBT3tP7/0/L/DSC_2989-L.jpg"></p>

<p>The most interesting is probably the Hawaiian honey, which is from bees gathering from flowers off the side of volcanos
<<<<<<< HEAD
in Hawaii.  If that sounds exotic, don&rsquo;t worry&ndash;It&rsquo;s got a correspondingly exotic price tag, about 30-some dollars for 8
=======
in Hawaii.  If that sounds exotic, don&rsquo;t worry&mdash;It&rsquo;s got a correspondingly exotic price tag, about 30-some dollars for 8
>>>>>>> 3f751f29d79be717da3f49498942848728c0ff04
oz (226g).  I bought two jars: one was Kiawe honey infused separately with lilikoi flowers, and one uninfused Macadamia
honey.  The former actually came in semi-solid form (common for raw honey) and packed a sharp passion fruit flavor.  The
latter was a more &ldquo;typical&rdquo; liquid texture, and rosey gold with a mild nutty flavor.</p>

<p><img class="center" src="http://waffleparadox.smugmug.com/Other/Follow-The-Honey/i-RqWvFwQ/0/L/DSC_2990-L.jpg"></p>

<p>In addition to these, I also walked out with two jars of honey gathered from Oaxaca, Mexico.  Oaxaca&rsquo;s a great
<<<<<<< HEAD
region for food agriculture&ndash;Some pretty good coffee comes out of there as well.  This honey was very savory, almost
=======
region for food agriculture&mdash;Some pretty good coffee comes out of there as well.  This honey was very savory, almost
>>>>>>> 3f751f29d79be717da3f49498942848728c0ff04
spicey, and a dark maple-syrupy color.  It was also very reasonably priced, something like $12-13 for I would guess 12oz
out of the keg.  Oh, did I mention there were kegs?  Honey, <em>on tap</em>.  Whodaknownit?</p>

<p><img class="center" src="http://waffleparadox.smugmug.com/Other/Follow-The-Honey/i-7QKxJ2M/0/L/DSC_2977-L.jpg"></p>

<p><img class="center" src="http://waffleparadox.smugmug.com/Other/Follow-The-Honey/i-hBBmCWs/0/L/DSC_2991-L.jpg"></p>

<p>If it isn&rsquo;t obvious by now, I&rsquo;d recommend anyone in the area to stop by at least once, regardless of inherent interest
in bees and honey.  If nothing else there are very nice people giving out free samples, and who knows?  Maybe just a few
tastes will be enough.</p>
]]></content>
  </entry>
  
  <entry>
<<<<<<< HEAD
    <title type="html"><![CDATA[Oysters With Lemon Pearls - Week 11 Molecular]]></title>
=======
    <title type="html"><![CDATA[Oysters with Lemon Pearls - Week 11 Molecular]]></title>
>>>>>>> 3f751f29d79be717da3f49498942848728c0ff04
    <link href="http://alexkuang.github.io/blog/2014/05/27/oysters-with-lemon-pearls-week-11-molecular/"/>
    <updated>2014-05-27T17:23:00-04:00</updated>
    <id>http://alexkuang.github.io/blog/2014/05/27/oysters-with-lemon-pearls-week-11-molecular</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://waffleparadox.smugmug.com/Food/Oysters-With-Lemon-Pearls/i-5NhtLD4/0/L/DSC_2972-L.jpg"></p>

<p>I was really looking forward to the Molecular theme, since I&rsquo;d been itching to play with some of this newfangled
Modernist Cuisine stuff for a while now.  So I went ahead and ordered a <a href="http://www.amazon.com/Modernist-Pantry-Spherification-Kit/dp/B008657GS0/ref=sr_1_1?ie=UTF8&amp;qid=1401210725&amp;sr=8-1&amp;keywords=spherification+kit">spherification kit</a>
from amazon, and came up with the idea of pairing spheres with oysters.</p>

<!-- more -->


<p>The kit came with fairly straightforward instructions, so I just followed those.  For my liquid base I used lemonade
mixed with lemon juice for acidity.  I added 2 grams of sodium citrate, since the kit recommended that for potentially
acidic solutions.</p>

<p>The spheres came together fairly well, though it was pretty slow going at first.  I&rsquo;m also displeased that the syringe
included with the kit is one use only&hellip;</p>

<p><img class="center" src="http://waffleparadox.smugmug.com/Food/Oysters-With-Lemon-Pearls/i-p99X433/0/L/DSC_2968-L.jpg"></p>

<p>The spheres look good, but I think that&rsquo;s about all that I can say about them positively.  Taste-wise, they were
<<<<<<< HEAD
slightly rubbery and the insides were way too viscous&ndash;Closer to maple syrup than juice.  Maybe it was the
=======
slightly rubbery and the insides were way too viscous&mdash;Closer to maple syrup than juice.  Maybe it was the
>>>>>>> 3f751f29d79be717da3f49498942848728c0ff04
disappointment from expecting something closer to the &ldquo;popping boba&rdquo; found in bubble tea/frozen yogurt, but overall I
just found the texture unpleasant.  In addition, the alginate stifled the acidity in the lemon and left a funny taste in
my mouth, making the pearls taste basically like jello filled with slightly off sugar syrup.</p>

<p>All in all, I would have been better served making plain old lemon jello with the oysters, which is what I&rsquo;ve done in
the past.  It&rsquo;s possible that I did something terribly wrong despite my self-perceived precision, or perhaps this kit
just didn&rsquo;t include the right substances for this set of circumstances.  Half the instructions seemed to exist for
upselling, e.g., &ldquo;buy our slotted spoon!&rdquo;, &ldquo;buy our PH meter!&rdquo;</p>

<p>Either way, this was a huge disappointment and I don&rsquo;t see myself trying again any time soon.</p>
]]></content>
  </entry>
  
<<<<<<< HEAD
=======
  <entry>
    <title type="html"><![CDATA[Why I Preferred Dark Souls I]]></title>
    <link href="http://alexkuang.github.io/blog/2014/05/23/why-i-preferred-dark-souls-i/"/>
    <updated>2014-05-23T21:24:00-04:00</updated>
    <id>http://alexkuang.github.io/blog/2014/05/23/why-i-preferred-dark-souls-i</id>
    <content type="html"><![CDATA[<p>Dark Souls 2 is a great game.  Let&rsquo;s get that out of the way.  I&rsquo;ve logged low 3 digits in hours of gameplay, and made
it through the game multiple times.  The combat system is tuned, there&rsquo;s a ton of content, and multiplayer is pretty fun
(or at least, it was at the levels I hung around).  But I still prefer the original, and Demon&rsquo;s Souls, over it.</p>

<!-- more -->


<p>The biggest turn-off in DS2 was the shift in design goals.  The dripping atmosphere and rich world were always the
primary draws in the franchise, and the difficulty took a back seat (relatively speaking) as a tool to work towards that
goal.  In DS2, it felt more like the developers&#8217; primary goal was &ldquo;HOW CAN WE MAKE THIS HARDER?&rdquo;  This was evidenced in
the way combat shifted towards the many-vs-one paradigm; not only with regular enemies, but with the bosses as well.
The Skeleton Lords, the Dragon Knights, the Looking Glass Knight, Twin Pursuers, Ruin Sentinels&hellip;  &ldquo;How can we make
this harder?  Let&rsquo;s just put more enemies in.&rdquo;  Not only is the repetition insulting, aiming for &ldquo;hard&rdquo; is just
completely missing the point.</p>

<p>Take the DS1 fight with Artorias.  It&rsquo;s such a fan favorite not only because it was ridiculously hard, but because the
entire fight was steeped in the world&rsquo;s lore.  After fighting Sif, going through the Abyss, and reading bits and pieces
from the game&rsquo;s NPCs about the fall of Artorias the Abysswalker, his charge towards the player holds a gravity that
couldn&rsquo;t be matched by even 20 Pursuers.  Seriously, <a href="https://www.youtube.com/watch?v=ctW277Kpcv0">check it</a>.</p>

<p>Speaking of the lore, that&rsquo;s another big point of contention with me.  I feel like there&rsquo;s a big difference between lore
and plot.  Lore is the background of the world.  It&rsquo;s the story behind each NPC, each item, each location, and it&rsquo;s
great for it to be subtle and nebulous.  A richly built, subtly woven world gives the player an opportunity to explore
and really dive into the atmosphere of everything.</p>

<p>The plot, however, is simply the thread of the story that drives the player&rsquo;s main progression, and needs to be very
clear cut.  Another concrete example, as spoiler-free as possible: In DS1, the player embarks on a quest to re-light the
first flame on the request of a dying man in the asylum.  On his quest to do that, he awakens a primordial serpent, and
the progression from there differs, ending with the player either re-kindling the first flame or leaving it to die.  The
story is pretty straightforward there, and at any given point you&rsquo;re pretty clear about the motivations of your
character.</p>

<p>In contrast, DS2 opens up with something about a curse in Drangleic and how you must go there, <strong>only to
never revisit the topic</strong>.  No seriously, what the hell is that?  They make this whole deal with the old ladies about
the curse of Drangleic, and then you get there and it becomes about finding the 4 Great Souls and King Vendrick?  And
then I guess somehow you&rsquo;re supposed to realize that oh right, after finding the king you need to travel through certain
memories to retrieve certain knowledge, and oh by the way SHADOWY RULER.  If that sounds confusing because I&rsquo;m trying to
leave out spoilers, don&rsquo;t worry&mdash;It&rsquo;s not much better with the characters and specifics filled in.</p>

<p>Beyond even the toning down of the art, this lack of direction was, to put it politely, a huge buzz-kill.  I understand
that a lot of these decisions were made to bring the franchise to a wider audience, since Demon&rsquo;s Souls was a rather
niche title with relatively limited commercial success.  But seriously guys.  DS2 was like watered down tea to DS1 +
DeS&#8217; black coffee.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coi]]></title>
    <link href="http://alexkuang.github.io/blog/2014/05/15/coi/"/>
    <updated>2014-05-15T19:58:00-04:00</updated>
    <id>http://alexkuang.github.io/blog/2014/05/15/coi</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://waffleparadox.smugmug.com/Other/Blog/i-qNXR8CC/0/O/coi-asparagus.jpg" width="500" height="500"></p>

<p>Of course it&rsquo;s just after I dish out a healthy dose of self-deprecation about restaurant writing that I feel compelled
to write about another restaurant.  So I&rsquo;ll keep it short.</p>

<p>I went to Daniel Patterson&rsquo;s Coi recently.  The only thing I can say about the food is that it wasn&rsquo;t overtly
over-the-top.  Nor was it deliberately modernist or filled with crazy techniques using chemicals I can&rsquo;t pronounce.  But
it was very very delicious and still managed to surprise me.  I can&rsquo;t overstate how awesome this is, and would recommend
the trip to anyone given to spending unhealthy amounts of money on food.</p>

<p>Also bought a signed copy of the book while I was there.  I can&rsquo;t wait to read it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Funny Thing About Quitting]]></title>
    <link href="http://alexkuang.github.io/blog/2014/05/10/the-funny-thing-about-quitting/"/>
    <updated>2014-05-10T20:53:00-04:00</updated>
    <id>http://alexkuang.github.io/blog/2014/05/10/the-funny-thing-about-quitting</id>
    <content type="html"><![CDATA[<p>We were shooting the shit in the gym on Thursday, when the subject of wasted memberships came up.  As I&rsquo;m sure is common
in any other type of service with a monthly membership, we apparently have a fair amount of people who pay for an
unlimited pass but only show up once every two weeks or so.  Or even people who pay for a membership and just don&rsquo;t show
up at all.  This isn&rsquo;t such a big deal at a place where the monthly fee is $10, but for BJJ gyms in metropolitan areas,
the costs tend to fall somewhere between $100-$200 / month.</p>

<p>That&rsquo;s a pretty significant amount of money.  So why would people spend it for a service they&rsquo;re not bothering to use?
Sure, there&rsquo;s a &ldquo;one year&rdquo; contract for the gym, but owners tend to be understanding most of the time, and the effort in
canceling that is pretty trivial.  I think the real barrier is in the way people think about quitting.</p>

<p>When we pick up a hobby and things get serious, it starts working its way into our definitions of ourselves.  This is
especially true for something like jiu jitsu, which involves a heavy investment and intrinsically comes with rewards
like &ldquo;higher self confidence&rdquo;, but it also applies to anything from learning a new language to picking up an instrument
to experimenting with painting.</p>

<p>So it&rsquo;s only natural that when life starts getting in the way, we cling onto that image.  Maybe we go from every day to
only a few times a week.  Then once a week.  Then once a month.  Then <em>&ldquo;Oh yeah, I&rsquo;m learning to speak Spanish, but
it&rsquo;s been a few months since I&rsquo;ve had the chance to practice&hellip;&rdquo;</em>  But we rarely ever cross the threshold into
consciously declaring that we&rsquo;ve quit.  Are you still really playing the guitar if it&rsquo;s been six months since you&rsquo;ve
touched it?  One year?  Three?</p>

<p>Canceling a membership requires the conscious decision that <em>yes, I&rsquo;ve quit</em>.  But we never really seem to cross that
point.  It&rsquo;s always one rationalization after another.  Perhaps if we&rsquo;re could be more honest with ourselves, we could
save a lot of the resources that that costs us, whether that be a monthly membership fee that could be better put
towards something else, or the energy and creativity spent in thinking up justifications for ourselves.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some CH Backport vimporn]]></title>
    <link href="http://alexkuang.github.io/blog/2014/05/02/some-ch-backport-vimporn/"/>
    <updated>2014-05-02T20:45:00-04:00</updated>
    <id>http://alexkuang.github.io/blog/2014/05/02/some-ch-backport-vimporn</id>
    <content type="html"><![CDATA[<p>In some ways, the curehappiness backports came at the perfect time, since I&rsquo;d been looking for something to sharpen my
vim skills on.  Technically I work in vim day-to-day, but usually the rest of the mental activity involved with coding
end up pushing my vim-awareness more to the side than I&rsquo;d like.  This backport, however, was heavy on repetition but
otherwise braindead, so it made the perfect set of practice exercises.  And since I had such fun (hey, it was a really
boring Sunday afternoon&hellip;), I figured I&rsquo;d share in case anyone else finds this useful&mdash;or even better, has suggestions
to make similar tasks more efficient in the future.  Please note that this is a rather quick fly-by and assumes moderate
familiarity with vim mechanics.  I&rsquo;ll probably do more slow, detailed posts in the future&hellip;</p>

<!-- more -->


<h3>The Start</h3>

<p>Since I had all the posts in html form, using <code>:set paste</code> and copy-pasting from the browser seemed the most
straightforward.  Or at least, more straightforward than trying to manually un-mangle everything in the post after being
wrung through wordpress.  For most of the posts, the paste result looked something like this:</p>

<p><img class="center" src="http://alexkuang.github.io/images/ch-backport-vim/start.png" width="598" height="440"></p>

<p>Not too awful, but the TODO is obvious:</p>

<ol>
<li>Needs a banner image</li>
<li>Lines need to be wrapped (not strictly necessary, but personal pet peeve)</li>
<li>Ingredients + Methodology need to be de-dented</li>
<li>Ingredients needs to be an unordered list</li>
<li>Methodology needs to be an ordered list.</li>
</ol>


<p>Technically I guess headings need to be put in too, but since headings are simply <code># HEADING 1</code>, <code>## HEADING 2</code>, etc, in
markdown, that&rsquo;s pretty trivial.</p>

<h3>Banner image</h3>

<p>This bit was easy.  I have a plugin installed called <code>vim-snipmate</code> (check it out
<a href="https://github.com/garbas/vim-snipmate">here</a>) that&rsquo;s just built for stuff like this.  Simply put, defining the snippet
below:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>snippet img
</span><span class='line'>    {% img center ${1} %}</span></code></pre></td></tr></table></div></figure>


<p>allowed me to type <code>img&lt;TAB&gt;</code> and it would insert <code>{% img center %}</code>, with my cursor right after the <code>center</code> and ready
to drop in my picture url.</p>

<h3>Wrapping lines</h3>

<p>vim has a normal mode command, <code>gq</code>, that does this quite well.  Personally I like using visual line mode (<code>V</code>) to
select the text to wrap, but using it with a motion (e.g., <code>gq}</code> to wrap a block) works as well.</p>

<p><img class="center" src="http://alexkuang.github.io/images/ch-backport-vim/gq-before.png" width="598" height="440"></p>

<p><img class="center" src="http://alexkuang.github.io/images/ch-backport-vim/gq-after.png" width="598" height="440"></p>

<p>I only wrapped the plain paragraphs here, as there is still some fancy dedenting and formatting to do with the Ingredients
and Methodology sections first.</p>

<h3>De-denting</h3>

<p>The vim command for de-denting is <code>&lt;</code>.  Once again, combining with visual line mode or a motion (ex: <code>&lt;}</code>) makes it
quick and easy.  (Just in case&mdash;Yes, <code>&gt;</code> is the command for indenting)</p>

<h3>Ingredients => Unordered List</h3>

<p>This one, I&rsquo;ll admit, is a little snazzy.  I used the lesser-known cousin of visual and visual line mode, visual block
mode (accessed via <code>&lt;Ctrl&gt;-V</code>).  Once selecting the first characters of the lines I wanted with visual block, I could
hit <code>&lt;Shift-I&gt;</code> to drop into insert mode before current character, <code>-</code> to insert what I wanted, then <code>&lt;ESC&gt;</code> to apply
to everything in the selection.</p>

<p><img class="center" src="http://alexkuang.github.io/images/ch-backport-vim/ul-before.png" width="598" height="440"></p>

<p><img class="center" src="http://alexkuang.github.io/images/ch-backport-vim/ul-during.png" width="598" height="440"></p>

<p><img class="center" src="http://alexkuang.github.io/images/ch-backport-vim/ul-after.png" width="598" height="440"></p>

<p>Note that this is also a great way to mass-comment blocks of code in languages that only support single line comments
with <code>#</code> or whatnot.</p>

<h3>Methodology => Ordered List</h3>

<p>And of course, the best is for last.  Ordered lists in markdown, logically, can be formatted something like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1. item 1
</span><span class='line'>2. item 2
</span><span class='line'>3. item 3</span></code></pre></td></tr></table></div></figure>


<p>However, it&rsquo;s actually possible to cheat and still get ordered list output by doing:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1. item 1
</span><span class='line'>1. item 2
</span><span class='line'>1. item 3</span></code></pre></td></tr></table></div></figure>


<p>It turns out that the markdown spec doesn&rsquo;t care about the order of the numbering as long as the lines begin with
numbers in that format.  So technically, I could use the same trick as the Ingredients Unordered List except inserting
<code>1.</code>, and I&rsquo;d be done.</p>

<p>&hellip;  But where&rsquo;s the fun in that?</p>

<p>So here&rsquo;s another tidbit: in vim, if you place the cursor over a number and hit <code>&lt;Ctrl&gt;-A</code> in normal mode, it increments
the number.  In a very smart way, too&mdash;it takes into account all of the digits, not just the one under the cursor.
Using this, it&rsquo;s pretty easy to write a vim macro (namely, a series of recorded keystrokes that can be repeated).</p>

<p>Rather than explain in long form, it seems easier just paste the sequence and annotate it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>qq^yaWjP^^Aq <span class="c"># Complete keystroke sequence</span>
</span><span class='line'>             <span class="c"># Note that ^A is one character--see below for details</span>
</span><span class='line'>
</span><span class='line'>qq   <span class="c"># Start recording keystrokes into the q register</span>
</span><span class='line'>^    <span class="c"># Go to first non-blank character of line</span>
</span><span class='line'>yaW  <span class="c"># yank (copy) a Word--Capital W means a &quot;word&quot; is terminated only by spaces, not punctuation like &quot;-&quot; </span>
</span><span class='line'>j    <span class="c"># Go down a line</span>
</span><span class='line'>P^   <span class="c"># Paste before cursor, then go back to first non-blank character</span>
</span><span class='line'>^A   <span class="c"># Increment number</span>
</span><span class='line'>q    <span class="c"># Stop recording</span>
</span></code></pre></td></tr></table></div></figure>


<p>It ends up looking something like this, played out:</p>

<p><img class="center" src="http://alexkuang.github.io/images/ch-backport-vim/mac-1.png" width="598" height="440"></p>

<p><img class="center" src="http://alexkuang.github.io/images/ch-backport-vim/mac-2.png" width="598" height="440"></p>

<p><img class="center" src="http://alexkuang.github.io/images/ch-backport-vim/mac-3.png" width="598" height="440"></p>

<p><em>(Aside: I should start making gifs again for stuff like this&hellip;  Perhaps another day when I have more time.)</em></p>

<p>Once the macro is recorded, it can be played back via <code>@q</code>, or whichever register it was recorded into.  More
importantly, because it resets to the right positions in the lines and moves down automatically, it can actually be
repeated!  e.g., <code>2@q</code> turns this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>1. item 1
</span><span class='line'>item 2
</span><span class='line'>item 3
</span></code></pre></td></tr></table></div></figure>


<p>into this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>1. item 1
</span><span class='line'>2. item 2
</span><span class='line'>3. item 3
</span></code></pre></td></tr></table></div></figure>


<p>Writing macros to position in a looping way like this is another post altogether, but suffice to say this saved a TON of
time over multiple posts.  Granted, it still depends on the <code>1.</code> being inserted manually, but that&rsquo;s pretty trivial I
think.</p>

<p>Another neat thing that might not immediately be obvious is that regular yanking (or copying, if you will) goes into the
same registers as macro recordings.  So you can use <code>"qp</code> to paste the contents of your macro into a buffer to map it to
keys or functions (ex: <code>nnoremap &lt;leader&gt;o ^yaW[...]</code>).</p>

<p>Furthermore, this means that if a recording goes wrong, you can just paste it out, edit it, then select and <code>"qy</code> (or
similar) to yank back the edited form.  The only caveat is that certain characters like <code>^A</code> may paste out and LOOK like
two characters, but is infact only one character.  Not a big deal if you&rsquo;re just yanking and replacing text, but it can
be a weird GOTCHA if you&rsquo;re trying to write a macro by hand or something.  (In this particular case, the <code>^A</code> character
can be obtained in insert mode via <code>&lt;Ctrl-V&gt;&lt;Ctrl-A&gt;</code>, but it pays to watch out in general for stuff like this)</p>

<p>So there you have it, ladies and gentlemen&mdash;My idea of fun on a Sunday afternoon&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CH Backports]]></title>
    <link href="http://alexkuang.github.io/blog/2014/04/26/ch-backports/"/>
    <updated>2014-04-26T21:46:00-04:00</updated>
    <id>http://alexkuang.github.io/blog/2014/04/26/ch-backports</id>
    <content type="html"><![CDATA[<p>For anyone unfamiliar, I wrote a food blog a while back called curehappiness with my then-roommate,
<a href="http://tlextrait.com/">Thomas</a>.  It was active mostly during my college years, dying down due to a whole variety of
reasons&mdash;office life, apathy at the post-grad lifestyle, wordpress being a pain&hellip;  All that great stuff.  The project
had originally started as an off-the-cuff idea for something to do with a newly commissioned server; after a while, I
decided to shuffle up my server arrangements, and curehappiness&#8217; Wordpress installation got the axe.  Since I couldn&rsquo;t
be bothered to backup the entire WP install, I just saved a bunch of the posts in HTML form instead, with the idea of
one day porting it to whatever new platform I would be running.</p>

<p>After all this time on Octopress + Github Pages, I finally pulled the trigger.  All the backported posts will be from
before 2013, tagged as <code>ch-backports</code>, and will contain a link at the top to this post.  They&rsquo;ve largely been preserved
verbatim, minus a few corrections like &lsquo;boal&rsquo; &ndash;> &lsquo;bowl&rsquo; (seriously, past Alex???).  However, I couldn&rsquo;t resist adding
small notes from the future, which will be in blockquotes at the top:</p>

<blockquote><p>like so.</p></blockquote>

<p>I ported the posts with the most worthwhile content&mdash;namely, recipes and records of experiments.  Restaurant reviews and
other such content were few and far between, and honestly aside from a couple of wisecracks and some nice pictures, they
felt pretty banal; not a solid reason for censorship, granted, but I still felt it wasn&rsquo;t worth the effort.  I&rsquo;ll
probably upload the photos from those posts to smugmug at some point and save the rewrites for when I have actual
original insights beyond &ldquo;yes, the food was good&rdquo;.</p>

<p>As a final note, migrating was not trivial, but I did get some nice hackery out of it.  I&rsquo;ll probably post the
tech-gorey details later, but suffice to say that I&rsquo;ve learned my lesson about storing data in arbitrary mangled html
generated by a WYSIWYG editor run through who knows how many plugins and themes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hack Days Are Awesome]]></title>
    <link href="http://alexkuang.github.io/blog/2014/04/26/hack-days-are-awesome/"/>
    <updated>2014-04-26T15:32:00-04:00</updated>
    <id>http://alexkuang.github.io/blog/2014/04/26/hack-days-are-awesome</id>
    <content type="html"><![CDATA[<p>Earlier this week, we had a &ldquo;hack day&rdquo; at work.  Or more precisely, two hack days.  I think the name is pretty
self-explanatory&mdash;work on whatever you want, which can be something helpful to or completely unrelated to your currently
assigned tasks, as long as it&rsquo;s something interesting.  Now, &ldquo;hack time&rdquo; is a pretty established institution in the
software world, especially amongst the hip startuppy companies.  I&rsquo;m sure everyone has heard of Google&rsquo;s &ldquo;20% time&rdquo; idea
by now, and the story of Microsoft&rsquo;s Xbox starting as a side-project.  Proponents (especially those who are trying to
pitch a business case to managers with varying degrees of pointy-haired-ness) cite building camaraderie, stimulating
creativity, and increasing morale as some of the biggest benefits.</p>

<p>None of this is news.  But I came away this week with a surprising realization.  When coding professionally for business
use cases, things like resilience and stability are often at the top of the requirement list&mdash;Or at least, I&rsquo;d really
hope so.  If it&rsquo;s not, kindly give me the name of your company so I know what stock to not buy ;).  To this end, coding
is never as simple as just sitting down and banging away at a keyboard.  It involves testing, discussions, design,
thinking, more testing, more thinking, and so on and so forth.</p>

<p>Don&rsquo;t get me wrong.  These are all very, very good things.  But I, at least, was surprised at how nice it was to just
sit down and bang away at a keyboard with abandon.  It sounds rather obvious in hindsight, but compared to the usual
rigorously managed process of software development at work, it&rsquo;s super liberating to just cowboy out some code with no
considerations other than speed and getting the job done.  And what&rsquo;s more, I realized that I had constrained myself to
the same careful management in all of my personal projects as well, especially when prototyping out potential MVPs and
such.  Again&mdash;Definitely a good thing, in most cases.  But after this week I&rsquo;m thinking that injecting some &ldquo;hack
day&rdquo;-ish time into my personal projects is in order, if for no reason other than to let the crazy out.</p>

<p><strong>tl;dr</strong> &ndash; Hack days are awesome.  I should do more of them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Whole Chicken Biryani]]></title>
    <link href="http://alexkuang.github.io/blog/2014/04/23/whole-chicken-biryani/"/>
    <updated>2014-04-23T21:38:00-04:00</updated>
    <id>http://alexkuang.github.io/blog/2014/04/23/whole-chicken-biryani</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://waffleparadox.smugmug.com/Food/Whole-Chicken-Biryani/i-2SMxkfv/0/L/DSC_2941-L.jpg"></p>

<p>And it&rsquo;s time for yet another episode of &ldquo;As [I Have] Seen On TV&rdquo;!  This time, I draw inspiration from Ramsay&rsquo;s Great
Escape, in which Gordon gets tired of his financial troubles and career as a TV chef and so decides to&hellip;  Go off to
make more TV.  Go figure.</p>

<!-- more -->


<p>Regardless of motivations, it&rsquo;s a pretty engaging show.  Throughout two seasons, he travels through southeast
Asia&mdash;India, China, Vietnam, and the like&mdash;slumming it with the locals to learn their skills and eventually returning to
the &ldquo;civilized areas&rdquo; of the country to demonstrate his newfound knowledge.  The only real complaint I have is the
(hopefully unintended) air of condescension that he develops at times.  &ldquo;Look, these people have <em>absolutely nothing</em>
and they still eat like kings!  It&rsquo;s <em>amazing</em>!&rdquo;</p>

<p>That aside, there are some memorable moments, one of which was a wedding catering to something in the neighborhood of
1000 guests.  Ramsay goes back to his line cook roots and helps a chef stuff a goat with some chicken stuffed with quail
stuffed with egg which is then loaded into a giant vat of rice. Despite my dreams to own a farm one day I still haven&rsquo;t
the means to pull a goat out of thin air, but I figured a whole chicken biryani might be worth a shot.  While I have
done biryani before, this was highly experimental, so this will be more of a photo log than set instructions</p>

<p><img class="center" src="http://waffleparadox.smugmug.com/Food/Whole-Chicken-Biryani/i-45Rk3rc/0/L/DSC_2943-L.jpg"></p>

<p>First, the chicken was rubbed with oil and lemon juice mixed with biryani-ish spices: cloves, cayenne, cumin seed,
coriander, and so on.  That was left to sit for a little bit while I par-boiled my rice, and then thrown into a pot to
roast with some potatoes.  I used my usual temps: 450 for &frac12; hour, 370 after.  In this case I shortened the cooking
time a bit, since it still had to cook with the rice.</p>

<p><img class="center" src="http://waffleparadox.smugmug.com/Food/Whole-Chicken-Biryani/i-sD6CTSf/0/L/DSC_2944-L.jpg"></p>

<p>After the chicken was done, I deglazed the bottom of the pot and lined it with freshly sliced tomatoes.  Then I stuffed
some of the rice and potato into the chicken, loaded the chicken and potatoes back into the pot, and covered with the
par-boiled rice.  I lined the pot cover with a cloth to trap the steam, and it finished in about 45 minutes at a
medium-lowish heat.</p>

<p><img class="center" src="http://waffleparadox.smugmug.com/Food/Whole-Chicken-Biryani/i-5JQdj93/0/L/DSC_2950-L.jpg"></p>

<p>Overall this turned out pretty well.  There wasn&rsquo;t much deviation from &ldquo;standard biryani procedure&rdquo;, which basically
just involves cubed meat instead of a whole bird.  The biggest pain was getting the meat off the chicken at the end: it
came off, but took some effort.  Perhaps a longer cooking time, or more moisture to cook the chicken with, next time?</p>
]]></content>
  </entry>
  
>>>>>>> 3f751f29d79be717da3f49498942848728c0ff04
</feed>
