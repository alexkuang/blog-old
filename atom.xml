<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[alex kuang]]></title>
  <link href="http://alexkuang.github.io/atom.xml" rel="self"/>
  <link href="http://alexkuang.github.io/"/>
  <updated>2016-05-20T09:02:32-04:00</updated>
  <id>http://alexkuang.github.io/</id>
  <author>
    <name><![CDATA[Alex Kuang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Compiler Is Your Friend]]></title>
    <link href="http://alexkuang.github.io/blog/2016/05/20/the-compiler-is-your-friend/"/>
    <updated>2016-05-20T07:06:20-04:00</updated>
    <id>http://alexkuang.github.io/blog/2016/05/20/the-compiler-is-your-friend</id>
    <content type="html"><![CDATA[<p>One sentiment I see from people coming from dynamically typed languages (python, ruby) or even Java and C is a general
dismissiveness about static typing and compilers.  At best, the sentiment is &ldquo;Oh, well it makes sure my input is an Int,
or a Float, or a Bool&hellip;  That&rsquo;s cool I guess, but I can do that with TDD&rdquo;.  At worst, static typing is seen as
something to fight against &ndash; shackles that limit our creativity and bar us from what we <em>really</em> want to do and the
beautiful programs that we could write if only the type-checker got out of our way.</p>

<p>Personally, I think of the type-checker (and by extension the compiler, really) not only as a free suite of rigorous
tests built from first principles, but as a friend that is nice enough to correct me, the silly human, when I think I&rsquo;m
making sense but I&rsquo;m really not.  Sure, sometimes that friend is a bit dense (<em>ahem</em> Java, <em>ahem</em>) and can&rsquo;t quite
understand what I&rsquo;m trying to say, but in the case of a language like Scala I find that the compiler is right more often
than not.  In fact, I had a whole giant wall of text geared up to talk about the value in using <code>Option</code> over <code>null</code>, in
using <code>Either</code> instead of exceptions, in capturing values without using Stringly-Typed data&hellip;  But then Li Haoyi beat
me to it with another addition to his wonderful Strategic Scala Style series: <a href="http://www.lihaoyi.com/post/StrategicScalaStylePracticalTypeSafety.html">Practical Type
Safety</a>.  I highly recommend reading it (and
the rest of the Strategic Scala Style series) before coming back.</p>

<p>Still here?  That post covers a lot of what I wanted to say, but I wanted to put some extra emphasis on one particular
topic:</p>

<p><img class="center" src="http://alexkuang.github.io/images/adts.jpg"></p>

<!-- more -->


<h3>ADTs (!!!)</h3>

<p>ADTs (Algebraic Data Types) are so, so good.  You can take a lot of features away in Scala and I could probably get by,
but ADTs &ndash; Or at least, the closest Scala approximation &ndash; are on the short list that you&rsquo;d have to pry out of my cold
dead hands&hellip; Along with higher order functions and pattern matching, probably.</p>

<p>So, a quick review&hellip;  What are Algebraic Data Types?  ADTs are so named because their structure can be described in two
operations: Product, and Sum.</p>

<h4>Product Types</h4>

<p>Product types are present in one form or another in the vast majority of mainstream programming languages.  People may
know it as a struct in C, or a record, or a tuple, or a <code>case class</code> in Scala.  It&rsquo;s essentially a way of mashing
multiple types together into one type.  The reason it is called a product type is because the cardinality of the type
(i.e., the set of all possible values for it), is the product of the cardinality of the type&rsquo;s constituents.  Some quick
examples:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// Has 2 possible values: A(true), A(false)</span>
</span><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">A</span><span class="o">(</span><span class="n">b</span><span class="k">:</span> <span class="kt">Boolean</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// has (2 * 2 = 4) possible values: AA(true, true), AA(true, false), AA(false, true), AA(false, false)</span>
</span><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">AA</span><span class="o">(</span><span class="n">b1</span><span class="k">:</span> <span class="kt">Boolean</span><span class="o">,</span> <span class="n">b2</span><span class="k">:</span> <span class="kt">Boolean</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Sum Types</h4>

<p>Where product types express &ldquo;this <em>and</em> that <em>and</em> the other thing&rdquo;, sum types (also commonly known as union types)
express &ldquo;this <em>or</em> that <em>or</em> the other thing&rdquo;.  Sum types are so named because the cardinality of a sum type is the
sum of the cardinality of the type&rsquo;s consituents.  Unfortunately in Scala 2.x, there isn&rsquo;t direct support for sum types,
but they can be roughly approximated with <code>sealed trait</code>.  Some examples:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// Probably not how any of this is implemented in the actual standard lib but you get the idea  :)</span>
</span><span class='line'><span class="k">sealed</span> <span class="k">trait</span> <span class="nc">Boolean</span>
</span><span class='line'><span class="k">final</span> <span class="k">case</span> <span class="k">object</span> <span class="nc">True</span> <span class="k">extends</span> <span class="nc">Boolean</span>
</span><span class='line'><span class="k">final</span> <span class="k">case</span> <span class="k">object</span> <span class="nc">False</span> <span class="k">extends</span> <span class="nc">Boolean</span>
</span><span class='line'>
</span><span class='line'><span class="k">sealed</span> <span class="k">trait</span> <span class="nc">Option</span><span class="o">[</span><span class="kt">T</span><span class="o">]</span>
</span><span class='line'><span class="nc">final</span> <span class="k">case</span> <span class="k">class</span> <span class="nc">Some</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">T</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">Option</span><span class="o">[</span><span class="kt">T</span><span class="o">]</span>
</span><span class='line'><span class="k">final</span> <span class="k">case</span> <span class="k">class</span> <span class="nc">None</span> <span class="k">extends</span> <span class="nc">Option</span><span class="o">[</span><span class="k">_</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">sealed</span> <span class="k">trait</span> <span class="nc">Either</span><span class="o">[</span><span class="kt">A</span>, <span class="kt">B</span><span class="o">]</span>
</span><span class='line'><span class="nc">final</span> <span class="k">case</span> <span class="k">class</span> <span class="nc">Left</span><span class="o">[</span><span class="kt">A</span>, <span class="kt">B</span><span class="o">](</span><span class="n">a</span><span class="k">:</span> <span class="kt">A</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">Either</span><span class="o">[</span><span class="kt">A</span>, <span class="kt">B</span><span class="o">]</span>
</span><span class='line'><span class="k">final</span> <span class="k">case</span> <span class="k">class</span> <span class="nc">Right</span><span class="o">[</span><span class="kt">A</span>, <span class="kt">B</span><span class="o">](</span><span class="n">b</span><span class="k">:</span> <span class="kt">B</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">Either</span><span class="o">[</span><span class="kt">A</span>, <span class="kt">B</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>One cheerful note is that proper union type support was announced for Dotty at ScalaDays 2016, so hurrah!  *confetti*</p>

<h3>So What?</h3>

<p>At first glance, ADTs might seem simplistic &ndash; kinda like fancied up named tuples.  But they are deceptively powerful,
because combining them effectively allows you to encode invariants about your program&rsquo;s logic and state in the
type system, and therefore leverage the compiler to keep you from violating those invariants and writing buggy software.</p>

<p>Which sounds like a bunch of abstract nonsense, so it&rsquo;s time for a concrete example!</p>

<h3>Modeling Real Life: Wrangling User Lists</h3>

<p>Working in the marketing space, it is very common to deal with lists of users.  It can be a list of users from a mailing list, a list
of website visitors, or a list of people who have downloaded your white paper.  In any case, it is a list of users that you
have in your possession, and you want to follow them around the internet and serve them ads.  Such a list of users might
have attributes like an id and a human-readable name.  Since most folks aren&rsquo;t in the business of building exchanges,
it might also have a downstream platform to target (e.g., AdWords, or Facebook).  It might also have some different
states that keep track of whether the list&rsquo;s meta-data has been sent to the downstream platform, or whether it&rsquo;s been
archived or soft-deleted and when that state transition happened.</p>

<p>So one reasonable implementation at a data structure for such a user list might look something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">sealed</span> <span class="k">trait</span> <span class="nc">ListStatus</span>
</span><span class='line'><span class="k">final</span> <span class="k">case</span> <span class="k">object</span> <span class="nc">Pending</span> <span class="k">extends</span> <span class="nc">ListStatus</span>
</span><span class='line'><span class="k">final</span> <span class="k">case</span> <span class="k">object</span> <span class="nc">Active</span> <span class="k">extends</span> <span class="nc">ListStatus</span>
</span><span class='line'><span class="k">final</span> <span class="k">case</span> <span class="k">object</span> <span class="nc">Archived</span> <span class="k">extends</span> <span class="nc">ListStatus</span>
</span><span class='line'>
</span><span class='line'><span class="k">sealed</span> <span class="k">trait</span> <span class="nc">Platform</span>
</span><span class='line'><span class="k">final</span> <span class="k">case</span> <span class="k">object</span> <span class="nc">Facebook</span> <span class="k">extends</span> <span class="nc">Platform</span> <span class="c1">// And so on and so forth</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">UserList</span><span class="o">(</span>
</span><span class='line'>  <span class="n">id</span><span class="k">:</span> <span class="kt">Long</span><span class="o">,</span>
</span><span class='line'>  <span class="n">name</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span>
</span><span class='line'>  <span class="n">status</span><span class="k">:</span> <span class="kt">ListStatus</span><span class="o">,</span>
</span><span class='line'>  <span class="n">createdTime</span><span class="k">:</span> <span class="kt">Long</span><span class="o">,</span>
</span><span class='line'>  <span class="n">archivedTime</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">Long</span><span class="o">],</span>
</span><span class='line'>  <span class="n">downstreamId</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="c1">// i.e., a &quot;foreign key&quot; to the list on the downstream platform</span>
</span><span class='line'><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>At first glance, this seems like pretty reasonable code.  The various states and platforms are enumerated, and it seems
to carry all the information we want with decent naming and so on.  At the very least it&rsquo;s better than carting around a
tab-separated string, or something like <code>val list: (Long, String, ListStatus, Long, Option[Long], Option[String])</code>.</p>

<p>But there&rsquo;s still something a bit off here.  In particular, look around the optional fields.  With this current model,
it is possible to construct an internally inconsistent list:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">list</span> <span class="k">=</span> <span class="nc">UserList</span><span class="o">(</span>
</span><span class='line'>  <span class="n">id</span> <span class="k">=</span> <span class="mi">1</span><span class="o">,</span>
</span><span class='line'>  <span class="n">name</span> <span class="k">=</span> <span class="s">&quot;website visitors&quot;</span><span class="o">,</span>
</span><span class='line'>  <span class="n">status</span> <span class="k">=</span> <span class="nc">Active</span><span class="o">,</span>
</span><span class='line'>  <span class="n">createdTime</span> <span class="k">=</span> <span class="nc">System</span><span class="o">.</span><span class="n">currentTimeMillis</span><span class="o">,</span>
</span><span class='line'>  <span class="n">archivedTime</span> <span class="k">=</span> <span class="nc">None</span><span class="o">,</span>
</span><span class='line'>  <span class="n">downstreamId</span> <span class="k">=</span> <span class="nc">None</span> <span class="c1">// Wait, what?</span>
</span><span class='line'><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The example above is internally inconsistent because the list&rsquo;s active status indicates that it should be onboarded to
the downstream platform, but for some reason we do not have a downstream id.  There are other &ldquo;weird&rdquo; cases like this
that are possible but do not make sense semantically &ndash; for example, <code>archivedTime = Some(1)</code> with <code>status = Pending</code>.</p>

<p>This data structure is almost trivially simple, but there area already a good number of things that can go wrong,
especially once we take outside input and possibly complex business logic into account.  And here there&rsquo;s nothing
stopping us from constructing these degenerate cases other than our ability to keep everything in our heads (spotty even
at the best of times) and read the code <em>really really</em> carefully every time we work with this particular data structure
(good luck).</p>

<p>Another point to consider is what this does to the code that works with the data:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// Send users from our list to downstream platform so we can serve them ads</span>
</span><span class='line'><span class="k">def</span> <span class="n">onboardUsersToList</span><span class="o">(</span><span class="n">list</span><span class="k">:</span> <span class="kt">UserList</span><span class="o">,</span> <span class="n">users</span><span class="k">:</span> <span class="kt">Seq</span><span class="o">[</span><span class="kt">User</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">list</span><span class="o">.</span><span class="n">status</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">Active</span> <span class="k">=&gt;</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">platformId</span> <span class="k">=</span> <span class="n">list</span><span class="o">.</span><span class="n">downstreamId</span><span class="o">.</span><span class="n">getOrElse</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// this should never happen</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nc">IllegalStateException</span><span class="o">(</span><span class="s">&quot;Downstream id not found for active list&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">platformClient</span><span class="o">.</span><span class="n">sendUsers</span><span class="o">(</span><span class="n">platformId</span><span class="o">,</span> <span class="n">users</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="k">throw</span> <span class="k">new</span> <span class="nc">IllegalArgumentException</span><span class="o">(</span><span class="s">&quot;Cannot onboard users for non-active list&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above code is a conceptually simple method that takes users from our list and sends them to a downstream platform,
e.g.  Facebook.  It technically does what we want, but there is a lot of clutter introduced by the management of the
status.  The block under <code>list.downstreamId.getOrElse</code> is particularly bad, since it basically amounts to saying &ldquo;well
we don&rsquo;t think we&rsquo;re wrong, but we technically could be wrong, so we have to sprinkle this boilerplate-ish error
handling into our business logic&rdquo;.  Apparently, this sort of thing is
<a href="https://github.com/anthavio/anthavio-commons/blob/e1982362cb3671c85b79923b1b3199f6eee8d60f/src/main/java/net/anthavio/NeverHappenException.java">not</a>
<a href="https://github.com/adi-bolb/pair-programming-match-making/blob/51496f4b854c56974324d3f97ac19b7e76ac9a54/src/main/java/org/findapair/ThisShouldNeverHappenException.java">that</a>
<a href="https://github.com/akestner/DockerPlugin/blob/42abd2aaf6c649827d4101250bee761d0f65d160/src/com/akestner/plugins/docker/exception/ShouldNotHappenException.java">uncommon</a>.</p>

<p>One possible remedy is to refactor <code>UserList</code> to encode some of the constraints into the type:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">final</span> <span class="k">case</span> <span class="k">class</span> <span class="nc">UserListMetadata</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">Long</span><span class="o">,</span> <span class="n">name</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">createdTime</span><span class="k">:</span> <span class="kt">Long</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">sealed</span> <span class="k">trait</span> <span class="nc">UserList</span> <span class="o">{</span> <span class="n">metadata</span><span class="k">:</span> <span class="kt">UserListMetadata</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">final</span> <span class="k">case</span> <span class="k">class</span> <span class="nc">PendingList</span><span class="o">(</span><span class="n">metadata</span><span class="k">:</span> <span class="kt">UserListMetadata</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">UserList</span>
</span><span class='line'><span class="k">final</span> <span class="k">case</span> <span class="k">class</span> <span class="nc">ActiveList</span><span class="o">(</span><span class="n">metadata</span><span class="k">:</span> <span class="kt">UserListMetadata</span><span class="o">,</span> <span class="n">downstreamId</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">UserList</span>
</span><span class='line'><span class="k">final</span> <span class="k">case</span> <span class="k">class</span> <span class="nc">ArchivedList</span><span class="o">(</span><span class="n">metadata</span><span class="k">:</span> <span class="kt">UserListMetadata</span><span class="o">,</span> <span class="n">archivedTime</span><span class="k">:</span> <span class="kt">Long</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">UserList</span>
</span></code></pre></td></tr></table></div></figure>


<p>This lets us rewrite the above method as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">onboardUsersToList</span><span class="o">(</span><span class="n">list</span><span class="k">:</span> <span class="kt">ActiveList</span><span class="o">,</span> <span class="n">users</span><span class="k">:</span> <span class="kt">Seq</span><span class="o">[</span><span class="kt">User</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">platformClient</span><span class="o">.</span><span class="n">sendUsers</span><span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="n">downstreamId</span><span class="o">,</span> <span class="n">users</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>At this point, one might protest, &ldquo;That just makes you push the status validation somewhere else!  The first
implementation was just bad practice, you could easily have written this simple version with the old type by refactoring
to <code>def onboardUsersToList(downstreamId: String, users: Seq[User])</code>.&rdquo;  Yes, this is perfectly true.  The validation
still has to take place <em>somewhere</em> since the code will presumably be interacting with the outside world.  The
difference here is that the former implementation can only enforce cleanliness and correctness with malleable things
like documentation and best practice guidelines, whereas the latter implementation enforces it by simply <em>refusing to
compile until you fix it</em>.  The latter implementation also reduces the amount of &ldquo;unforced&rdquo; errors since it is
impossible to construct an <code>ActiveList</code> object without a <code>downstreamId</code>, whereas it was possible to accidentally create
a <code>UserList(status = Active, downstreamId = None)</code> previously.</p>

<h3>Stepping back</h3>

<p>Hopefully the above example demonstrated a reasonable real-world case where ADTs can be really useful.  ADTs seem really
basic &ndash; and in the vast world of type hackery they are only a starting point &ndash; but you can do some surprisingly
powerful things with these fundamental building blocks.</p>

<p>There is one last point I want to make.  As a professional programmer (i.e., employed by a business to write code that
ostensibly generates some amount of profit), the goal of all this is not to encode the world at the type level.  The
goal is to reduce complexity and mental overhead.  There are some insane things possible once you go down the rabbit
hole of type hackery &ndash; for example, <a href="http://jto.github.io/articles/typelevel_quicksort/">type-level quicksort</a>.  This
is all great fun and by no means a bad thing, but at some point it&rsquo;s important to step back and think, &ldquo;Right, somebody
else actually has to read, maintain, and modify this code at some point.  <em>Maybe</em> this should not go into production.&rdquo;</p>

<p>This is especially important to keep in mind in a language like Scala, which provides us with plentiful amounts of
power to complicate things and shoot ourselves in the foot if we&rsquo;re not careful.  Or, in other words:</p>

<p><img class="center" src="http://alexkuang.github.io/images/can_should.jpg">
(Source: <a href="https://twitter.com/ThePracticalDev/status/730177044030566400">https://twitter.com/ThePracticalDev/status/730177044030566400</a>)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing an API Client With Akka-http]]></title>
    <link href="http://alexkuang.github.io/blog/2016/04/26/writing-an-api-client-with-akka-http/"/>
    <updated>2016-04-26T08:00:00-04:00</updated>
    <id>http://alexkuang.github.io/blog/2016/04/26/writing-an-api-client-with-akka-http</id>
    <content type="html"><![CDATA[<p><a href="https://www.stockfighter.io">Stockfighter</a> is a CTF (short for Capture the Flag) game that I first heard about at
Microconf 2015, but haven&rsquo;t gotten a chance to play up until very recently.  I plan on posting more about my impressions
of the game later, but very shortly: it is a series of programming challenges based on the concept of stock exchanges
and ways to manipulate stock exchanges.  Along with the web UI, a public json <a href="https://starfighter.readme.io/">API</a> is
exposed as a mechanism for interacting with the game.  There did not seem to be any Scala clients floating around, so
I took this as a chance to play around with <a href="http://doc.akka.io/docs/akka/2.4.4/scala/http/index.html">akka-http</a>.</p>

<!-- more -->


<h3>Scaffolding</h3>

<p>After some quick googling and reading of tutorials, it looked like the basic structure of an http client would be
something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">package</span> <span class="nn">stockfighter.client</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">akka.actor.ActorSystem</span>
</span><span class='line'><span class="k">import</span> <span class="nn">akka.http.scaladsl.model._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">akka.stream.ActorMaterializer</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">TradingApiClient</span><span class="o">(</span><span class="n">apiKey</span><span class="k">:</span> <span class="kt">String</span><span class="o">)(</span><span class="k">implicit</span> <span class="k">val</span> <span class="n">system</span><span class="k">:</span> <span class="kt">ActorSystem</span> <span class="o">=</span> <span class="nc">ActorSystem</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">implicit</span> <span class="k">val</span> <span class="n">materializer</span> <span class="k">=</span> <span class="nc">ActorMaterializer</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// TODO</span>
</span><span class='line'>  <span class="c1">// def endpoint(): Response = {</span>
</span><span class='line'>  <span class="c1">// }</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>A couple of things to note here.  First off, <code>akka-http</code> is a part of the (increasingly pervasive) akka ecosystem, so
obviously actors have to be involved.  The tutorials either had the <code>ActorSystem</code> at the top level or had the
client itself be an <code>Actor</code>, but I felt like a regular class would suffice so I compromised by passing the system in as
a parameter with a default.  The <code>ActorMaterializer</code> is completely new to me, since I am coming from
<a href="http://spray.io/documentation/1.1.2/">spray</a> ~1.1 and have missed out on a lot of the latest reactive-buzzwordy
developments.</p>

<p>I&rsquo;m still not sure I grok it completely, but my understanding is that akka-http is backed completely by reactive
streams, which the client constructs as lazy descriptions of computations.  When the computations are run, the
<code>ActorMaterializer</code> spins up the actors to do the actual work.  In any case, I thought about putting the Materializer in
the constructor as well, but the fact that it takes an implicit <code>ActorSystem</code> as an argument makes it fairly awkward to
have both <code>ActorSystem</code> and <code>ActorMaterializer</code> live as constructor params with defaults.  I can think of a few ways to
deal with this, but for a quickie client I decided to just in-line the materializer and move on.</p>

<h3>Making a request</h3>

<p>The Stockfighter API ships with a heartbeat/status endpoint, i.e., &ldquo;is the service up?&rdquo;  The endpoint lives at
<code>https://api.stockfighter.io/ob/api/heartbeat</code> and returns a response in the following format:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;ok&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;error&quot;</span><span class="p">:</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This seemed like as good a starting point as any, in that it&rsquo;s a fairly simple endpoint with a simple response type,
but still complex enough to test a full request flow with some common functionality like serialization/deserialization.</p>

<p>As it turns out, it took a decent amount of time and a lot of reading to get to a basic implementation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">akka.http.scaladsl.Http</span>
</span><span class='line'><span class="k">import</span> <span class="nn">akka.http.scaladsl.model._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">akka.http.scaladsl.model.Uri.Path</span>
</span><span class='line'><span class="k">import</span> <span class="nn">akka.stream.scaladsl.</span><span class="o">{</span> <span class="nc">Source</span><span class="o">,</span> <span class="nc">Sink</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// constructor boilerplate elided</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">apiIsUp</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">HttpResponse</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// Fancier DSL: `Path.singleSlash / &quot;ob&quot; / &quot;api&quot; / &quot;heartbeat&quot;`</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">source</span> <span class="k">=</span> <span class="nc">Source</span><span class="o">.</span><span class="n">single</span><span class="o">(</span><span class="nc">HttpRequest</span><span class="o">(</span><span class="n">uri</span> <span class="k">=</span> <span class="nc">Uri</span><span class="o">(</span><span class="n">path</span> <span class="k">=</span> <span class="nc">Path</span><span class="o">(</span><span class="s">&quot;/ob/api/heartbeat&quot;</span><span class="o">))))</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">flow</span> <span class="k">=</span> <span class="nc">Http</span><span class="o">().</span><span class="n">outgoingConnectionHttps</span><span class="o">(</span><span class="s">&quot;api.stockfighter.io&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">source</span><span class="o">.</span><span class="n">via</span><span class="o">(</span><span class="n">flow</span><span class="o">).</span><span class="n">runWith</span><span class="o">(</span><span class="nc">Sink</span><span class="o">.</span><span class="n">head</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Executive summary: <code>akka-http</code> leverages the concept of reactive streams that seems to be the new hot thing lately.
Streams are essentially fancied up functions, and consist of three parts: the <code>Source</code>, the <code>Flow</code>, and the <code>Sink</code>.  The
<code>Source</code> describes the input, which can be single element (<code>Source.single</code>), an iterator (<code>Source.iterator</code>), a <code>Future</code>
(<code>Source.fromFuture</code>), etc.  The  <code>Flow</code> is the description of a computation to run on the data from the <code>Source</code>.  The
<code>Sink</code> describes what to do with data after it has been run through the flow: push it into a <code>queue</code> (<code>Sink.queue[T]</code>),
<code>fold</code> over it (<code>Sink.fold</code>), and so on.  You can combine things in all sorts of different ways&ndash;the above uses <code>via</code>
and <code>runWith</code>, but there&rsquo;s also <code>viaMat</code>, <code>run</code>, and any number of other fancy combinators.</p>

<p>What it boils down to here is that the <code>Source</code> is an http request, the <code>Flow</code> describes how to send that request, and
<code>runWith(Sink.head)</code> runs the flow and returns a future of the response.  Phew&hellip;</p>

<h3>Serialization/Deserialization</h3>

<p>For serialization/deserialization, <code>akka-http</code> provides its own <code>Marshal</code>/<code>Unmarshal</code>.  For json, the default option is
to lean on <code>akka-http</code>&rsquo;s predecessor, <code>spray</code>&ndash;Or more specifically, <code>spray-json</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// ADT describing the response</span>
</span><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">ApiStatus</span><span class="o">(</span><span class="n">ok</span><span class="k">:</span> <span class="kt">Boolean</span><span class="o">,</span> <span class="n">error</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">spray.json._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">akka.http.scaladsl.marshallers.sprayjson.SprayJsonSupport</span>
</span><span class='line'>
</span><span class='line'><span class="k">trait</span> <span class="nc">TradingApiSerialization</span> <span class="k">extends</span> <span class="nc">SprayJsonSupport</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// One of the built-in spray-json auto-formatters</span>
</span><span class='line'>  <span class="k">implicit</span> <span class="k">val</span> <span class="nc">ApiStatusFormat</span> <span class="k">=</span> <span class="n">jsonFormat2</span><span class="o">(</span><span class="nc">ApiStatus</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// Previous imports elided</span>
</span><span class='line'><span class="k">import</span> <span class="nn">akka.http.scaladsl.unmarshalling.Unmarshal</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// N.B. mixing in TradingApiSerialization to get the automatic conversions</span>
</span><span class='line'><span class="k">class</span> <span class="nc">TradingApiClient</span><span class="o">(</span><span class="n">apiKey</span><span class="k">:</span> <span class="kt">String</span><span class="o">)(</span><span class="k">implicit</span> <span class="k">val</span> <span class="n">system</span><span class="k">:</span> <span class="kt">ActorSystem</span> <span class="o">=</span> <span class="nc">ActorSystem</span><span class="o">())</span> <span class="k">extends</span> <span class="nc">TradingApiSerialization</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">implicit</span> <span class="k">val</span> <span class="n">materializer</span> <span class="k">=</span> <span class="nc">ActorMaterializer</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">apiIsUp</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">ApiStatus</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">source</span> <span class="k">=</span> <span class="nc">Source</span><span class="o">.</span><span class="n">single</span><span class="o">(</span><span class="nc">HttpRequest</span><span class="o">(</span><span class="n">uri</span> <span class="k">=</span> <span class="nc">Uri</span><span class="o">(</span><span class="n">path</span> <span class="k">=</span> <span class="nc">Path</span><span class="o">(</span><span class="s">&quot;/ob/api/heartbeat&quot;</span><span class="o">))))</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">flow</span> <span class="k">=</span> <span class="nc">Http</span><span class="o">().</span><span class="n">outgoingConnectionHttps</span><span class="o">(</span><span class="s">&quot;api.stockfighter.io&quot;</span><span class="o">).</span><span class="n">mapAsync</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span> <span class="n">r</span> <span class="k">=&gt;</span>
</span><span class='line'>      <span class="nc">Unmarshal</span><span class="o">(</span><span class="n">r</span><span class="o">.</span><span class="n">entity</span><span class="o">).</span><span class="n">to</span><span class="o">[</span><span class="kt">ApiStatus</span><span class="o">]</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">source</span><span class="o">.</span><span class="n">via</span><span class="o">(</span><span class="n">flow</span><span class="o">).</span><span class="n">runWith</span><span class="o">(</span><span class="nc">Sink</span><span class="o">.</span><span class="n">head</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The Serialization trait is normal procedure for <code>spray-json</code>, and the <code>SprayJsonSupport</code> provided by <code>akka-http</code> just
provides an implicit conversion that links the <code>Unmarshal(r.entity)</code> together with the <code>jsonFormat</code> for the entity.  The
big wart here is actually the <code>mapAsync(parallelism = 1)</code>, which is a result of <code>Unmarshall(...).to[T]</code> returning a
<code>Future[T]</code>.  I didn&rsquo;t dig too deeply into this, but based on some quick googling the general consensus seems to be that
the use of <code>Future</code> here is a way of handling lazy/streaming responses.  Whatever the case, I could not find an
alternative API for this so <code>mapAsync(1)</code> seemed to be the least of the evils&ndash;another choice would have been something
like <code>.map { r =&gt; Await.result(Unmarshal(r.entity).to[ApiStatus], Duration.Inf) }</code> but that seems even clunkier.</p>

<h3>Error handling</h3>

<p>The above code still has the flaw that if the server responds with e.g. 404, it will throw an exception and the client
will be SOL.  This is not so much an issue for the heartbeat endpoint, but Stockfighter is nice enough to enumerate a
bunch of its common errors for us so why not add in some minimal handling via
<a href="http://danielwestheide.com/blog/2013/01/02/the-neophytes-guide-to-scala-part-7-the-either-type.html">Either</a>?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// Type alias for readability&#39;s sake</span>
</span><span class='line'><span class="k">type</span> <span class="kt">TradingApiResult</span><span class="o">[</span><span class="kt">T</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Either</span><span class="o">[</span><span class="kt">ApiError</span>, <span class="kt">T</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">sealed</span> <span class="k">trait</span> <span class="nc">ApiError</span>
</span><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">NotFound</span><span class="o">(</span><span class="n">error</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">ApiError</span>
</span><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Unauthorized</span><span class="o">(</span><span class="n">error</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">ApiError</span>
</span><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">UnexpectedStatusCode</span><span class="o">(</span><span class="n">status</span><span class="k">:</span> <span class="kt">StatusCode</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">ApiError</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">akka.http.scaladsl.unmarshalling.</span><span class="o">{</span> <span class="nc">Unmarshal</span><span class="o">,</span> <span class="nc">Unmarshaller</span> <span class="o">}</span>
</span><span class='line'><span class="k">import</span> <span class="nn">akka.http.scaladsl.model.StatusCodes</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Constructor/etc elided</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// `um` is provided by the previously mentioned `SprayJsonSupport`</span>
</span><span class='line'><span class="c1">// This is a prevalent theme in akka-related code: IMPLICITS, IMPLICITS EVERYWHERE.  Fun fact: this also requires</span>
</span><span class='line'><span class="c1">// an implicit ActorSystem and ActorMaterializer floating around!</span>
</span><span class='line'><span class="k">private</span> <span class="k">def</span> <span class="n">deserialize</span><span class="o">[</span><span class="kt">T</span><span class="o">](</span><span class="n">r</span><span class="k">:</span> <span class="kt">HttpResponse</span><span class="o">)(</span><span class="k">implicit</span> <span class="n">um</span><span class="k">:</span> <span class="kt">Unmarshaller</span><span class="o">[</span><span class="kt">ResponseEntity</span>, <span class="kt">T</span><span class="o">])</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">TradingApiResult</span><span class="o">[</span><span class="kt">T</span><span class="o">]]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">r</span><span class="o">.</span><span class="n">status</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">StatusCodes</span><span class="o">.</span><span class="nc">OK</span> <span class="k">=&gt;</span> <span class="nc">Unmarshal</span><span class="o">(</span><span class="n">r</span><span class="o">.</span><span class="n">entity</span><span class="o">).</span><span class="n">to</span><span class="o">[</span><span class="kt">T</span><span class="o">]</span> <span class="n">map</span> <span class="nc">Right</span><span class="o">.</span><span class="n">apply</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">StatusCodes</span><span class="o">.</span><span class="nc">Unauthorized</span> <span class="k">=&gt;</span> <span class="nc">Future</span><span class="o">(</span><span class="nc">Left</span><span class="o">(</span><span class="nc">Unauthorized</span><span class="o">(</span><span class="n">r</span><span class="o">.</span><span class="n">entity</span><span class="o">.</span><span class="n">toString</span><span class="o">)))</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">StatusCodes</span><span class="o">.</span><span class="nc">NotFound</span> <span class="k">=&gt;</span> <span class="nc">Future</span><span class="o">(</span><span class="nc">Left</span><span class="o">(</span><span class="nc">NotFound</span><span class="o">(</span><span class="n">r</span><span class="o">.</span><span class="n">entity</span><span class="o">.</span><span class="n">toString</span><span class="o">)))</span>
</span><span class='line'>    <span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="nc">Future</span><span class="o">(</span><span class="nc">Left</span><span class="o">(</span><span class="nc">UnexpectedStatusCode</span><span class="o">(</span><span class="n">r</span><span class="o">.</span><span class="n">status</span><span class="o">)))</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Use it in the API call!</span>
</span><span class='line'><span class="k">def</span> <span class="n">apiIsUp</span><span class="k">:</span> <span class="kt">Future</span><span class="o">[</span><span class="kt">TradingApiResult</span><span class="o">[</span><span class="kt">ApiStatus</span><span class="o">]]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">source</span> <span class="k">=</span> <span class="nc">Source</span><span class="o">.</span><span class="n">single</span><span class="o">(</span><span class="nc">HttpRequest</span><span class="o">(</span><span class="n">uri</span> <span class="k">=</span> <span class="nc">Uri</span><span class="o">(</span><span class="n">path</span> <span class="k">=</span> <span class="nc">Path</span><span class="o">(</span><span class="s">&quot;/ob/api/heartbeat&quot;</span><span class="o">))))</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">flow</span> <span class="k">=</span> <span class="nc">Http</span><span class="o">().</span><span class="n">outgoingConnectionHttps</span><span class="o">(</span><span class="s">&quot;api.stockfighter.io&quot;</span><span class="o">).</span><span class="n">mapAsync</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span> <span class="n">r</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="n">deserialize</span><span class="o">[</span><span class="kt">ApiStatus</span><span class="o">](</span><span class="n">r</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">source</span><span class="o">.</span><span class="n">via</span><span class="o">(</span><span class="n">flow</span><span class="o">).</span><span class="n">runWith</span><span class="o">(</span><span class="nc">Sink</span><span class="o">.</span><span class="n">head</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Repeat for rest of the endpoints</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>apiIsUp</code> should now return an <code>Either[ApiError, ApiStatus]</code> unless something really bad (dare I say, <em>exceptional</em>?) happens.</p>

<h3>TODOs</h3>

<p>The above is a nice start, but a few big TODOs stand out to me before I go on and toss this onto github.</p>

<p>First and foremost&hellip; Tests!  Testing libraries like this is always tricky since they&rsquo;re essentially all integration-y
glue code, but I have always been a big fan of the <a href="https://github.com/vcr/vcr">vcr</a> gem in Ruby.  As far as I know the
closest thing in Scala is <a href="https://github.com/betamaxteam/betamax">betamax</a>, which I have not used but would like to.
(I know, I know&ndash;Not writing test firsts?  What about TDD?  BAD DEVELOPER!  *rolls up newspaper*)</p>

<p>Another big thing for me is domain modeling.  The built-in json deserialization is fine for working with row-level data,
but the plain case class format leaves a bit to be desired as far as robust data modeling.  As a simple example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">//</span> <span class="err">A</span> <span class="err">simplistic</span> <span class="s2">&quot;order request&quot;</span>
</span><span class='line'><span class="p">{</span> <span class="err">price:</span> <span class="err">0,</span> <span class="err">qty:</span> <span class="err">0,</span> <span class="err">direction:</span> <span class="nt">&quot;buy&quot;</span> <span class="p">}</span> <span class="err">//</span> <span class="s2">&quot;buy&quot;</span> <span class="err">or</span> <span class="s2">&quot;sell&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// naive translation:</span>
</span><span class='line'><span class="nc">OrderRequest</span><span class="o">(</span><span class="n">price</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">qty</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">direction</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Preferable:</span>
</span><span class='line'><span class="k">sealed</span> <span class="k">trait</span> <span class="nc">OrderDirection</span>
</span><span class='line'><span class="k">case</span> <span class="k">object</span> <span class="nc">Buy</span> <span class="k">extends</span> <span class="nc">OrderDirection</span>
</span><span class='line'><span class="k">case</span> <span class="k">object</span> <span class="nc">Sell</span> <span class="k">extends</span> <span class="nc">OrderDirection</span>
</span><span class='line'>
</span><span class='line'><span class="nc">BetterOrderRequest</span><span class="o">(</span><span class="n">price</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">qty</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">direction</span><span class="k">:</span> <span class="kt">OrderDirection</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>I haven&rsquo;t decided whether it would be better to add another step to the pipeline (e.g., <code>mapJsonToDomainObject</code>) or to
roll custom spray <code>JsonFormat</code>s to do this.</p>

<p>Lastly: websockets.  In <a href="http://doc.akka.io/docs/akka/2.4.4/scala/http/client-side/websocket-support.html">theory</a>
websockets are supported, but the documentation is even sparser than for http clients and I haven&rsquo;t quite figured it out
yet&ndash;especially since the deserialization provided in <code>SprayJsonSupport</code> does not seem to work with the types used in
the websocket API.</p>

<h3>Overall Impressions</h3>

<p>So far, my impression of <code>akka-http</code> is by and large the same as my impression of <code>spray</code>.  Actors (and now reactive
streams) provide a lot of power and performance in exchange for non-trivial complexity.  In my experience this tradeoff
is generally worth it for server-side/business application code, but lugging around an ActorSystem/etc ends up feeling
very clunky for a simple http client.  It doesn&rsquo;t help that the -client libraries seem to be the red-headed
step-children of both ecosystems.</p>

<p>The documentation feels consistent with the general API design.  That is: it tries to look simple for the most basic
use-cases, but in reality there is a lot of implicit stuff floating around.  It was basically a pre-requisite for me to
go digging for not only how streams worked conceptually but all the varied APIs that need to be used to link everything
together before I could unpack the examples in the client tutorials.  For example, while playing with the
<a href="http://doc.akka.io/docs/akka/2.4.4/scala/http/client-side/websocket-support.html">websocket tutorial</a> I tried to switch
the <code>Sink.foreach</code> with a <code>Sink.queue</code> and got the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="o">[</span><span class="kt">error</span><span class="o">]</span> <span class="o">(...)/</span><span class="nc">TradingApiClient</span><span class="o">.</span><span class="n">scala</span><span class="k">:</span><span class="err">118</span><span class="kt">:</span> <span class="k">type</span> <span class="kt">mismatch</span><span class="o">;</span>
</span><span class='line'><span class="o">[</span><span class="kt">error</span><span class="o">]</span>  <span class="n">found</span><span class="k">:</span>
</span><span class='line'><span class="kt">akka.stream.scaladsl.Sink</span><span class="o">[</span><span class="kt">Nothing</span>,<span class="kt">akka.stream.scaladsl.SinkQueue</span><span class="o">[</span><span class="kt">Nothing</span><span class="o">]]</span>
</span><span class='line'><span class="o">[</span><span class="kt">error</span><span class="o">]</span>  <span class="n">required</span><span class="k">:</span>
</span><span class='line'><span class="kt">akka.stream.Graph</span><span class="o">[</span><span class="kt">akka.stream.SinkShape</span><span class="o">[</span><span class="kt">akka.http.scaladsl.model.ws.Message</span><span class="o">]</span>,<span class="kt">akka.stream.scaladsl.SinkQueue</span><span class="o">[</span><span class="kt">akka.http.scaladsl.model.ws.Message</span><span class="o">]]</span>
</span><span class='line'><span class="o">[</span><span class="kt">error</span><span class="o">]</span>     <span class="n">outgoing</span><span class="o">.</span><span class="n">via</span><span class="o">(</span><span class="n">webSocketFlow</span><span class="o">).</span><span class="n">runWith</span><span class="o">(</span><span class="nc">Sink</span><span class="o">.</span><span class="n">queue</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s not the end of the world as I worked out the need for a type parameter (i.e., <code>Sink.queue[Message]</code>) but there a
lot of examples like this where the errors and tutorials are not exactly intuitive.  I can see this being a huge
deterrent to folks who are new to the ecosystem, to the concepts, or to Scala in general who will hit a wall and think,
&ldquo;Wow, all this and I can&rsquo;t even open up a websocket/execute a json <code>POST</code>/etc?&rdquo;  Or even worse&ndash;the example code will be
cargo-culted in by a harried developer on a deadline and carried on as the software version of the <a href="http://c2.com/cgi/wiki?TheFiveMonkeys">five monkeys</a>.
(This is not to say I could do any better.  Documentation and API design are some of the most underrated hard problems
in software today, IMO. :)</p>

<p>All my nitpicking aside, there is a lot to like about <code>akka-http</code>.  In exchange for all the effort involved in learning
about reactive streams and how to work with them, they provide a nice construct for abstracting away concerns like
back-pressure management.  This frees up developers to concentrate on the actual flow of the data.  The resulting code
is also quite clean and generally easy to follow, despite the time it took to actually get to that point.  In other
words, it trades off learning curve and ease of intuition for API comprehensiveness and composability.  <code>akka-http</code> is
especially nice on the server, where performance is a bigger concern.  I&rsquo;ve built a couple of internal webservices with
<code>spray</code> previously, and it&rsquo;s always been fairly performant without excessive tuning on my part.  In addition, I&rsquo;ve found
the concept of Directives and the server-side routing DSL to be quite nice to work with in the past.</p>

<p>Overall I would recommend <code>akka-http</code> unreservedly for writing web services and business applications.  My experience
with it on the server side has been quite good.  I would also use it again on the client side, mostly because there
don&rsquo;t seem to be any better options.  I had looked into some alternatives, but e.g. play-ws has the same overloaded
baggage problem and dispatch is like the poster-child of unintelligible symbolic operators (and seems unmaintained to
boot).  So until a better http client surfaces in the Scala ecosystem, one could do a lot worse.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Purity, Types, and Other Functional Nonsense]]></title>
    <link href="http://alexkuang.github.io/blog/2016/04/14/purity-types-functional-nonsense/"/>
    <updated>2016-04-14T07:12:23-04:00</updated>
    <id>http://alexkuang.github.io/blog/2016/04/14/purity-types-functional-nonsense</id>
    <content type="html"><![CDATA[<p>A while ago the topic of <a href="http://fluffynukeit.com/how-functional-programming-lenses-work/">lenses</a> came up in one of the
chatrooms at work. This led to a discussion on the (ahem) suboptimal readability of advanced functional programming
code examples, and how a lot of the fancier constructs are by-products of being super hardcore about purity.  This led
to me writing a great big email to the team that generated a whole bunch of thoughtful discussion on FP, complexity, and
straw men with free lunches. I was also told I should transcribe to blog form, so here it is reproduced (mostly)
faithfully:</p>

<p>I’ve been digging into Haskell/etc a bunch lately and have hit some similar pain points. Typeclasses and
Haskell-specific syntax aside, I think one of the biggest mental shifts I have experienced is learning to reason based
on types alone. Full disclaimer: I am by no means an expert on any of this. But since I am (at the original time of
writing) sitting in an airport with a mildly disgruntled cat, I figure I may as well write up a blurb about my
experiences on purity, types, and what can follow from it.</p>

<!-- more -->


<h3>A Brave New World</h3>

<p>So for the rest of this email, let’s suspend our disbelief and imagine that we have an “ideal functional” Scala that is
pure and strongly typed. This means no:</p>

<ul>
<li><code>null</code></li>
<li>exceptions</li>
<li>type-casting (e.g. <code>asInstanceOf</code>, <code>isInstanceOf</code>)</li>
<li>side-effects (e.g. <code>println</code>, <code>cw.track(metric)</code>)</li>
<li>Object (e.g. <code>anything.toString</code>)</li>
</ul>


<h3>A simple example</h3>

<p>Given the above, consider a function with this signature:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">nonsense</span><span class="o">[</span><span class="kt">A</span><span class="o">](</span><span class="n">i</span><span class="k">:</span> <span class="kt">A</span><span class="o">)</span><span class="k">:</span> <span class="kt">A</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>nonsense</code> is parameterized on the type <code>A</code>, which could be any type. This means that the implementation of <code>nonsense</code> knows
literally nothing about its input—It could be a number, a list, an Option, a String, or anything else we can think of
passing in. Because we’re living in this imaginary world where null, etc do not exist, <code>nonsense</code> literally cannot do
anything with its argument except return it.</p>

<p>Following this logic, we can deduce that <code>nonsense</code> is just the identity function based on its type signature alone. It
doesn’t matter if it is called <code>nonsense</code> or <code>foo</code> or <code>id</code>, or if its argument is named <code>i</code>, <code>j</code>, <code>k</code>. We don’t even have to look at
the implementation. Given the type <code>A =&gt; A</code>, this function literally cannot do anything other than return its argument, or
else it would not have compiled. (Again, this is assuming no <code>null</code>, <code>println</code>, etc).</p>

<p>Extending this slightly, this function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">c</span><span class="o">[</span><span class="kt">A</span><span class="o">](</span><span class="n">i</span><span class="k">:</span> <span class="kt">A</span><span class="o">,</span> <span class="n">j</span><span class="k">:</span> <span class="kt">A</span><span class="o">)</span><span class="k">:</span> <span class="kt">A</span>
</span></code></pre></td></tr></table></div></figure>


<p>can only have two possible implementations based on its type: <code>def c[A](i: A, j: A) = i</code>, or <code>def c[A](i: A, j: A) = j</code>.
Likewise, <code>def c2[A, B](i: A, j: B): B</code> can only <code>=&gt; j</code>, and so on.</p>

<h3>A structured example</h3>

<p>Now consider the function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">nonsense2</span><span class="o">[</span><span class="kt">A</span><span class="o">](</span><span class="n">i</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">A</span><span class="o">])</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Without looking at the function name, the implementation, and so on, what can we deduce about <code>nonsense2</code> in our imaginary
magical world? <em>The output never contains any element that was not in the input</em>. That is, the output could be the input
itself, it could be input reversed, it could be the input sliced up—but you will never have a situation where e.g.
<code>nonsense2(List(1)) == List(2)</code> or <code>nonsense2(List(1)) == List(List("XYZ"))</code>. To put it another way, just based on the type
signature of <code>List[A] =&gt; List[A]</code>, we know that the function may do something to the <code>List</code> structure but nothing will
happen to the individual <code>A</code>s&ndash;or else the code would not have compiled.</p>

<p>This type of reasoning can be applied to basically any function to derive information about it (guess what this function
is: <code>def fff[A, B](f: A =&gt; List[B], i: List[A]): List[B]</code>). By maintaining strict typing and purity, we give up the
convenience of things like side-effects and run-time type-matching. But in exchange, we get increased ability to reason
about (and have a sufficiently smart compiler prove) certain properties of our code, regardless of potentially
misleading/outdated evidence such as function names and comments. The big idea here is to 1) shift as much of the
“thinking” to the compiler as possible to reduce the potential for human error, and 2) lock as much down during
compile-time as possible to reduce the potential surface area of run-time errors.</p>

<h3>Real life</h3>

<p>Sadly, real life is messy and not everything can be proved at compile time. Even in <code>fff</code> above, the implementation could
be e.g. <code>flatMap</code> or <code>flatMap andThen reverse</code> or just <code>Nil</code>.</p>

<p>As another example, consider:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">intNonsense</span><span class="o">(</span><span class="n">i</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Int</span>
</span></code></pre></td></tr></table></div></figure>


<p>Based on the types, we can say that the potential output of <code>intNonsense</code> is constrained to the size of the set of
possible Ints; i.e., there are 2<sup>32</sup> possible outputs. Other than that though, we can’t say much about the function’s
implementation(*). It could double its input, add 1 to its input, negate its input, negate its input but only if it’s
even, and so on.</p>

<p>So what’s a programmer to do?</p>

<p>(*) - Without some fancy pants type-level probably-church-encoded something-something-something sort of programming, but
that’s a whole ‘nother can of worms that I haven’t gotten remotely close to opening&hellip;</p>

<h3>Tests!</h3>

<p>One natural reaction would be to start writing some unit tests to make sure this function does what we think it does. So
we start writing some tests:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">assert</span><span class="o">(</span><span class="n">intNonsense</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'><span class="n">assert</span><span class="o">(</span><span class="n">intNonsense</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span> <span class="o">==</span> <span class="mi">2</span><span class="o">)</span>
</span><span class='line'><span class="n">assert</span><span class="o">(</span><span class="n">intNonsense</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'><span class="n">assert</span><span class="o">(</span><span class="n">intNonsense</span><span class="o">(-</span><span class="mi">1</span><span class="o">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>And from that we may think that <code>intNonsense == identity</code>. Except that with the above suite, the following could still
happen, and we would be wrong:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">intNonsense</span><span class="o">(</span><span class="n">i</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="mi">20000</span><span class="o">)</span> <span class="o">-</span><span class="mi">1</span> <span class="k">else</span> <span class="n">i</span>
</span></code></pre></td></tr></table></div></figure>


<p>We could also test the totality of the mapping between input and output to intNonsense. But even for a simple <code>Int =&gt;
Int</code> function, that would be a total of 2<sup>32</sup> possible inputs, and I feel like even the most determined programmer would
give up after a couple hundred. Or maybe not, and more power to you. :)</p>

<p>One way to help with this is properties-based testing, which I think has been discussed before. Props-based testing
frameworks come in various levels of sophistication, but the basic idea is that instead of writing tests for a single
case, you write a general “property” for your function and the framework will generate a whole bunch of kinda-random
input to throw at it. As an example in <a href="https://scalacheck.org/">ScalaCheck</a>, a property for string concatenation might
look something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">property</span><span class="o">(</span><span class="s">&quot;startsWith&quot;</span><span class="o">)</span> <span class="k">=</span> <span class="n">forAll</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">(</span><span class="n">a</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">b</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="o">(</span><span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="o">).</span><span class="n">startsWith</span><span class="o">(</span><span class="n">a</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is not perfect, but it still lends itself to far more robustness-per-effort when compared to individual unit tests.
In some cases, it is even more readable as far as communicating what you want to be true about your code.</p>

<p>Of course, props-based testing can be used with the most imperative mutable-state-having code, but when combined with
pure compiler-friendly code it can end up really reducing the potential for unexpected errors.</p>

<h3>Disclaimers</h3>

<p>Wrapping up, a couple of disclaimers.</p>

<p>1) If we take the idea of using types/etc in this way another step further, we might draw the conclusion that function
names and documentation are relatively meaningless next to what you can prove with the compiler. This is one argument
I’ve heard re: scalaz’s lack of concern about approachability in its API naming + docs. “We don’t need a docstring, from
the types there is only one possible implementation of this function, so it’s self-explanatory”. If we take this idea
all the way to the extreme, we might even argue that concrete names are harmful since they propagate impressions about
the code that can potentially be outdated or false. This should sound familiar to anyone who has read, say, Tony Morris.</p>

<p>FWIW, I tend to come down on the side of “why not both”? I love the idea of catching more mistakes at build-time by
fully leveraging a smart compiler and better tests, and I do agree (at least in principle) that maintaining purity also
makes composability easier. But at the same time, I don’t really see the harm in calling an argument <code>zero</code> to declare its
intentions, regardless of whether we can fully prove it in the code. To play devil’s advocate again though, I do agree
that sometimes names are vestigial and you have to depend on the types. For example, I’ve tried and failed to think of a
better name than <code>f</code> for the argument <code>A =&gt; List[B]</code> in <code>flatMap</code>.</p>

<p>2) Approaching this from another angle, one can also write code using nothing but the types, or what I like to call
“playing type jigsaw.” IMO it’s pretty fun to just write out a bunch of type signatures and almost-kinda-auto-pilot your
way through until it compiles—but it can get really meta, and I have only had limited experience in playing around with
this style of programming. The furthest I have taken it is trying to reconstruct twitter’s
<a href="https://www.youtube.com/watch?v=VVpmMfT8aYw">Stitch</a> as a natural transformation to <code>Future</code>, and most of the other
stuff I’ve played with has been small and isolated—think Project Euler style problems. Which is to say that I’ve
explored this stuff on the side, but in practice for a large enough system I have no idea if it’s e.g. just trading one
type of complexity for another. Though intuitively I feel like enterprise code (i.e., large systems, many
inputs/outputs, lots of complex logic) is where leveraging a strongly typed functional style with a smart compiler could
really be useful in the long run.</p>

<h3>Takeaways</h3>

<p>Funnily enough, the most widely actionable takeaway from all of this is completely unrelated to types and naming and all
of that. The one thing I feel that everyone can benefit from immediately is to use more quickcheck/properties-based
testing. While it is not perfect, it sure beats enumerating things on a case-by-case basis. Plus&ndash;I forget where I read
this&ndash;“nothing scares bugs out of your code like having something feed it pathologically bad values”.</p>

<p>Aside from that&hellip; I am not immediately hopping onto the HARDCORE PURITY train, but hopefully this at least gives some
food for thought as far as another approach to writing and thinking about code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello, Blog!]]></title>
    <link href="http://alexkuang.github.io/blog/2016/03/18/hello/"/>
    <updated>2016-03-18T13:58:09-04:00</updated>
    <id>http://alexkuang.github.io/blog/2016/03/18/hello</id>
    <content type="html"><![CDATA[<p>Trying to take another shot at this whole writing-about-tech thing.  :)  Please excuse appearances while this blog gets
revamped for the umpteenth time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[`gn` in Vim]]></title>
    <link href="http://alexkuang.github.io/blog/2015/01/24/gn-in-vim/"/>
    <updated>2015-01-24T11:53:51-05:00</updated>
    <id>http://alexkuang.github.io/blog/2015/01/24/gn-in-vim</id>
    <content type="html"><![CDATA[<p>Back to vim this week!  This one might be a bit esoteric&ndash;apologies in advance&ndash;but it’s such a useful feature that I
had to share.</p>

<p><code>gn</code> is a kinda-sorta-but-not-really-motion that selects the matches of the current search pattern.  It’s kind of like
<code>n</code> (go to next match in search), except it also selects the contents of the match in visual mode.  But where it really
shines is when used with operators like <code>c</code> (change), etc to operate on the match.  Quick demo to see it in action,
before continuing:</p>

<script type="text/javascript" src="https://asciinema.org/a/15656.js" id="asciicast-15656" async></script>


<p>So this is nice for a few reasons.  First, it’s neat to be able to operate on just the match of a search.  I remember a
few times before I found <code>gn</code> where I was doing something similar to the demo, tried to use <code>cw</code>, and got mildly annoyed
that I had to retype half the word because the <code>w</code> motion was too aggressive.</p>

<p>Another nice thing is that with <code>gn</code>, the dot command will both move to the next match and repeat whatever operation you
did, instead of having to do the movement and operation separately using <code>n.</code>.  It seems petty, but hey it’s a full 50%
keystroke savings!!</p>

<p>Arguably, the demo above could have been done with an ex command like <code>:%s/test/actual</code> (universal search and replace),
but I think <code>gn</code> still offers a lot.  It works on all operators, so <code>ygn</code> would yank the match, <code>gUgn</code> would uppercase
the match, and so on.  Plus, it allows an easy on-the-fly workflow that’s still decently fast without the “crap I have
to tune all the edge cases in my expression”: for example, if you want to only change some instances of <code>test</code> to
<code>actual</code>, but others to <code>sandbox</code>.</p>

<p>As always, see <code>:h gn</code> for more details.  Also note that gn has only been available since vim 7.4 or something like
that, but there’s no reason anyone shouldn’t be using the latest on their personal boxes…</p>

<h3>Bonus</h3>

<p>This email also generated some additional discussion, which led to my discovery of the multi-select feature in Sublime,
and the <a href="https://github.com/terryma/vim-multiple-cursors">associated vim plugin</a>.  It seems like it&rsquo;s in a different
spirit than <code>gn</code>, but still a very cool way of thinking about operating on search results that I had not seen before.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thread Macro]]></title>
    <link href="http://alexkuang.github.io/blog/2015/01/24/thread-macro/"/>
    <updated>2015-01-24T11:53:42-05:00</updated>
    <id>http://alexkuang.github.io/blog/2015/01/24/thread-macro</id>
    <content type="html"><![CDATA[<p>Let’s deviate from Scala for a bit and talk about clojure.  Or lisps in general, I guess.  A lot of the “kinda joking
except not really” quips that commonly float around on the internet are about the parentheses, as in how there are so
many of them.  For example, if you want to take a number <code>x</code> and add one, multiply by two, then add 3, the code might
naively look something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nb">* </span><span class="p">(</span><span class="nb">+ </span><span class="nv">x</span> <span class="mi">1</span><span class="p">)</span> <span class="mi">2</span><span class="p">)</span> <span class="mi">3</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or perhaps like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">+ </span><span class="mi">3</span> <span class="p">(</span><span class="nb">* </span><span class="mi">2</span> <span class="p">(</span><span class="nb">+ </span><span class="mi">1</span> <span class="nv">x</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Look at the parens!  Especially the consecutive 3 closing ones in the second variation.  For a sufficiently long chain
of functions, it can get pretty unreadable—especially with multiple arguments and whatnot.</p>

<p>Enter clojure’s thread macro.  The thread macro is a macro in the form of <code>(-&gt; x &amp; forms)</code>, and it “threads” <code>x</code> through
the <code>forms</code> as the first arg*.  Which sounds terribly confusing explained, so an example is probably better here.  Take
this snippet using the thread macro:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="c1">;; add one, multiply by two, and add three</span>
</span><span class='line'><span class="p">(</span><span class="nb">-&gt; </span><span class="nv">x</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">+ </span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">* </span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">+ </span><span class="mi">3</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>This desugars into <code>(+ (* (+ x 1) 2) 3)</code>, i.e. the first variation of the initial example above.  Personally, I find the
macro version much more readable since each call is on its own line, and it seems more expressive of applying a series
of functions to the initial x.</p>

<p>The thread macro is also useful for chaining together collection methods like <code>map</code>.  Since clojure doesn’t have
first-class OO support (instead favoring protocols and such), map exists as a regular function that takes the collection
as an arg, instead of as a method on a collection class.  So chaining together a bunch of ops on a vector might look
something like&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="c1">;; add one to every number and filter for even numbers</span>
</span><span class='line'><span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nb">+ </span><span class="mi">1</span> <span class="nv">%</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">filter </span><span class="nv">even?</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; Without the thread macro, would look like:</span>
</span><span class='line'><span class="p">(</span><span class="nb">filter </span><span class="nv">even?</span> <span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nb">+ </span><span class="mi">1</span> <span class="nv">%</span><span class="p">)</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span><span class="p">]))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The only difference is that in this case, ->> was used.  ->> is “thread last”, which is like -> (“thread first”), except
it inserts the expression at the end of the form.</p>

<p>This pattern also exists in other languages (especially those that don’t offer first-class OO, which allows fancy
<code>return self</code> type stuff), like Elixir’s pipe <code>|&gt;</code> (in the spirit of the unix pipe) which is what prompted me to spread
the word about this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="c1"># double and add one to each element</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="o">|&gt;</span> <span class="nc">Enum</span><span class="p">.</span><span class="n">map</span><span class="p">(</span><span class="k">fn</span> <span class="n">x</span> <span class="p">-&gt;</span> <span class="n">x</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="o">|&gt;</span> <span class="nc">Enum</span><span class="p">.</span><span class="n">map</span><span class="p">(</span><span class="k">fn</span> <span class="n">x</span> <span class="p">-&gt;</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The thread macro pattern doesn’t have as much of a place in Scala, since Scala has mechanisms like the collection
library and implicit conversions to help express similar logic in elegant ways.  But when I first read up on macros in
lisp, I spent some time scratching my head at the day-to-day practical uses until I found this and had my first
“ohhhhhhhhhhhh” moment.  In any case, hope this was mildly interesting!</p>

<p>* - Well technically, as the second item in the form, which is effectively the first arg for functions&hellip; But that might
be a bit too lispy.</p>

<h3>Bonus</h3>

<p>When I published this email to the internal list, it generated some discussion wherein I learned that there are other
neat features of the same sort like <a href="https://clojuredocs.org/clojure.core/doto">doto</a>, and that they&rsquo;re all just
various derivations of the K combinator.  Of course, googling k-combinators led to a pretty
<a href="http://en.wikipedia.org/wiki/SKI_combinator_calculus">heavy looking wiki page</a>, so I was referred to
<a href="http://combinators.info/">http://combinators.info/</a> , which I have been trying to get through since.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Silver Searcher]]></title>
    <link href="http://alexkuang.github.io/blog/2015/01/24/the-silver-searcher/"/>
    <updated>2015-01-24T11:53:21-05:00</updated>
    <id>http://alexkuang.github.io/blog/2015/01/24/the-silver-searcher</id>
    <content type="html"><![CDATA[<h3>grep</h3>

<p>This week I’d like to talk about grep.  Grep is a great general-purpose tool and works very well for filtering text in
the middle of a long command chain, but I’ve found it a bit clunky as a codebase search tool.</p>

<p>For example, let’s say you’re sitting in some project and trying to grep for all the places where a function is being
called.  The naïve first attempt would be:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grep myFunc</span></code></pre></td></tr></table></div></figure>


<p>Except that just hangs, since grep defaults to reading from stdin.  A next attempt might be:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grep myFunc .</span></code></pre></td></tr></table></div></figure>


<p>Except then grep would complain that . is a directory, which leads to:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grep –r myFunc .</span></code></pre></td></tr></table></div></figure>


<p>Which finally works, but still leaves a bit to be desired.  The biggest annoyance is that grep will get caught up in
files that you don’t necessarily care about, e.g. Tags files, third-party dependency files, binary files… “Binary file
./lib/default/xxx.jar matches” anyone?</p>

<h3>ag</h3>

<p>Introducing <a href="http://geoff.greer.fm/ag/">ag, the silver searcher</a>!  Ag:</p>

<ul>
<li>Fulfills the above “find this in cwd” use case via a simple, short <code>ag myFunc</code></li>
<li>Is easy to install and super fast</li>
<li>Respects project ignore files: for example, it will ignore the patterns found in your .gitignore</li>
<li>In the case of files that you want in the repo but still don’t want to search, it also supports the use of a .agignore file</li>
<li>Integrates well into other tools: AFAIK there are ag plugins for vim, emacs, and text mate.</li>
</ul>


<p>Fun fact: I was doing the whole <code>grep –r</code> thing for an embarrassingly long time before I bothered to search for a better
workflow.  My initial search turned up ack, which then led to ag.  As far as I can tell, feature-wise they’re
comparable; I eventually settled on ag just ‘cause the command requires less typing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim % Expansion]]></title>
    <link href="http://alexkuang.github.io/blog/2015/01/24/vim-expansion/"/>
    <updated>2015-01-24T11:52:53-05:00</updated>
    <id>http://alexkuang.github.io/blog/2015/01/24/vim-expansion</id>
    <content type="html"><![CDATA[<h3>% (Current File Name)</h3>

<p>Another vim tip this week!  This time, it’s about ‘%’, which expands to ‘current file name’.  This is especially useful
in projects with java/scala style directory setups, where your source is approximately 1.5 million folders away from the
project root, but you kind of want to hang around project root for things like ant/sbt/etc to work.  <code>%</code> makes this
easier to work with files in the deeply nested folders while doing this.</p>

<p>Taking a contrived example, instead of doing something like this to <code>git log</code> the file you are currently editing:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>:!git log src/main/scala/com/bizo/(…)/Foo.scala</span></code></pre></td></tr></table></div></figure>


<p>You can just do:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>:!git log %</span></code></pre></td></tr></table></div></figure>


<p>This is extremely convenient and works everywhere in command line mode (basically, whenever ‘:’ is used), but is also
useful to have if you’re ever writing vim script.  See <code>:h expand</code> for the function to use in vim script, and some other
special keywords.</p>

<p>But wait!  There’s more!</p>

<!-- more -->


<p>Vim also supports file modifiers.  For example, <code>:h</code> gives you the ‘head’ of the file name, i.e. the directory of the
file.  Taking another (contrived) example, you can git add the entire folder containing the file you are editing by
doing something like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>:!git add %:h</span></code></pre></td></tr></table></div></figure>


<p>See <code>:h file-modifiers</code> for more details (and more modifiers).</p>

<h3>Another Convenient Expansion</h3>

<p>I use <code>%:h</code> so often (for example, when I realize I’ve opened a file before creating the directory containing it, or am
editing a file in a directory that doesn’t exist) that I’ve made a shortcut for it in my vimrc:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cnoremap %% &lt;C-R&gt;=expand('%:h').'/'&lt;CR&gt;</span></code></pre></td></tr></table></div></figure>


<p>Roughly speaking, it remaps the key chord <code>%%</code> in command line mode to paste from a special register that evals the vim
script inside it, which calls the expand() function.</p>

<p>Long story short, what this allows me to do is do something like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>:!mkdir -p %%</span></code></pre></td></tr></table></div></figure>


<p>And the <code>%%</code> will expand in-place into whatever <code>%:h</code> resolved to.  Not only is this a win because it’s slightly less to
type than %:h, but the expansion also allows you to quickly modify your command on the fly and go up/down a directory if
needed.</p>

<p>And of course, here’s the requisite asciinema with a quick demo of this in action:</p>

<script type="text/javascript" src="https://asciinema.org/a/14592.js" id="asciicast-14592" async></script>


<p>Hope that’s useful / mildly interesting!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala Enrichment]]></title>
    <link href="http://alexkuang.github.io/blog/2015/01/24/scala-enrichment/"/>
    <updated>2015-01-24T11:52:37-05:00</updated>
    <id>http://alexkuang.github.io/blog/2015/01/24/scala-enrichment</id>
    <content type="html"><![CDATA[<p>Douglas Crockford recently gave a tech talk at work, where he casually endorsed Scala during the Q&amp;A at the end.  Given
that and the fact that I&rsquo;ve been hearing increasing mentions of it in the company at large, I figured this week I&rsquo;d plug
a neat feature of Scala and a recent use case where I found it extremely handy.</p>

<h3>The Feature</h3>

<p>Anyone who&rsquo;s worked with The AWS SDK (or just Java code in general) will be familiar with the builder pattern.
Recently, I was writing some code to automate setup of CloudWatch alarms for a DynamoDB table.  The alarm request
started looking something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">req</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">PutMetricsAlarmRequest</span><span class="o">()</span>
</span><span class='line'>  <span class="o">.</span><span class="n">withNamespace</span><span class="o">(</span><span class="s">&quot;DynamoDB&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">withDimensions</span><span class="o">(</span><span class="n">dimensionsForTableName</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">withStatistic</span><span class="o">(</span><span class="s">&quot;Sum&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">withComparisonOperator</span><span class="o">(</span><span class="nc">GreaterThanThreshold</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">withThreshold</span><span class="o">(</span><span class="n">thresholdNumber</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">withMetricName</span><span class="o">(</span><span class="n">throttledMetricName</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">withEvaluationPeriods</span><span class="o">(</span><span class="n">periods</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">withPeriod</span><span class="o">(</span><span class="n">periodDuration</span><span class="o">.</span><span class="n">toSeconds</span><span class="o">.</span><span class="n">toInt</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">withAlarmActions</span><span class="o">(</span><span class="n">idMappingSNS</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">withAlarmName</span><span class="o">(</span><span class="n">alarmNameFor</span><span class="o">(</span><span class="n">tableName</span><span class="o">,</span> <span class="n">throttledMetric</span><span class="o">,</span> <span class="n">throttledThreshold</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">cloudwatchClient</span><span class="o">.</span><span class="n">putMetricAlarm</span><span class="o">(</span><span class="n">req</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which is serviceable, but less than ideal given that I had multiple alarms of roughly the same nature.  Plus, I felt
like it left something to be desired in terms of readability and communicating the intent of the alarm in a succinct
way.  Enter <code>implicit class</code>s and the &ldquo;enrichment&rdquo;* pattern!  Basically, it lets us turn the above into something more
like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">req</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">PutMetricAlarmRequest</span><span class="o">()</span>
</span><span class='line'>  <span class="o">.</span><span class="n">forTable</span><span class="o">(</span><span class="n">tableName</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">triggerOnSumGreaterThan</span><span class="o">(</span><span class="n">throttledMetric</span><span class="o">,</span> <span class="n">throttledThreshold</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">afterEvaluationPeriods</span><span class="o">(</span><span class="n">evaluationPeriodDuration</span><span class="o">,</span> <span class="n">evaluationPeriods</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">withAlarmActions</span><span class="o">(</span><span class="n">idMappingSNS</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">withAlarmName</span><span class="o">(</span><span class="n">alarmNameFor</span><span class="o">(</span><span class="n">tableName</span><span class="o">,</span> <span class="n">throttledMetric</span><span class="o">,</span> <span class="n">throttledThreshold</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">cloudwatchClient</span><span class="o">.</span><span class="n">putMetricAlarm</span><span class="o">(</span><span class="n">req</span><span class="o">)</span> <span class="cm">/** Can still pass req back into AWS API! */</span>
</span></code></pre></td></tr></table></div></figure>


<p>With the addition of this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">implicit</span> <span class="k">class</span> <span class="nc">MetricAlarmRequestHelper</span><span class="o">(</span><span class="n">req</span><span class="k">:</span> <span class="kt">PutMetricAlarmRequest</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">forTable</span><span class="o">(</span><span class="n">tableName</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">req</span><span class="o">.</span><span class="n">withNamespace</span><span class="o">(</span><span class="s">&quot;DynamoDB&quot;</span><span class="o">).</span><span class="n">withDimensions</span><span class="o">(</span><span class="n">tableMetricDimensions</span><span class="o">(</span><span class="n">tableName</span><span class="o">).</span><span class="n">asJava</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">triggerOnSumGreaterThan</span><span class="o">(</span><span class="n">metricName</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">threshold</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">req</span><span class="o">.</span><span class="n">withStatistic</span><span class="o">(</span><span class="s">&quot;Sum&quot;</span><span class="o">).</span><span class="n">withComparisonOperator</span><span class="o">(</span><span class="nc">GreaterThanThreshold</span><span class="o">).</span><span class="n">withThreshold</span><span class="o">(</span><span class="n">threshold</span><span class="o">).</span><span class="n">withMetricName</span><span class="o">(</span><span class="n">metricName</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">afterEvaluationPeriods</span><span class="o">(</span><span class="n">periodDuration</span><span class="k">:</span> <span class="kt">Duration</span><span class="o">,</span> <span class="n">periods</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">req</span><span class="o">.</span><span class="n">withEvaluationPeriods</span><span class="o">(</span><span class="n">periods</span><span class="o">).</span><span class="n">withPeriod</span><span class="o">(</span><span class="n">periodDuration</span><span class="o">.</span><span class="n">toSeconds</span><span class="o">.</span><span class="n">toInt</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h3>How It Works</h3>

<p>One of the coolest&ndash;and probably most confusing&ndash;keywords in scala is <code>implicit</code>, which can refer to many different
things.  For now, let&rsquo;s limit the discussion to implicit conversions.  A grossly oversimplified tl;dr is that there can
be some def of the form:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">implicit</span> <span class="k">def</span> <span class="n">foo2bar</span><span class="o">(</span><span class="n">foo</span><span class="k">:</span> <span class="kt">Foo</span><span class="o">)</span><span class="k">:</span> <span class="kt">Bar</span> <span class="o">=</span> <span class="o">{</span> <span class="err">…</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And as long as that def is in scope, the code will convert anything of type Foo into type Bar without having to re-write
that logic or call some conversion method.  For more information on implicits in general, see this excellent answer by
Daniel Sobral, who is basically the Jon Skeet of the Scala world:
<a href="http://stackoverflow.com/questions/5598085/where-does-scala-look-for-implicits/5598107#5598107">http://stackoverflow.com/questions/5598085/where-does-scala-look-for-implicits/5598107#5598107</a></p>

<p>Extending the use of implicits, that means that if you do something like, for the above use-case:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">MetricAlarmRequestHelper</span><span class="o">(</span><span class="n">req</span><span class="k">:</span> <span class="kt">PutMetricAlarmRequest</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span> <span class="cm">/** Same function defs as above */</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">implicit</span> <span class="k">def</span> <span class="n">vanillaRequest2Helper</span><span class="o">(</span><span class="n">req</span><span class="k">:</span> <span class="kt">PutMetricAlarmRequest</span><span class="o">)</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">MetricAlarmRequestHelper</span><span class="o">(</span><span class="n">req</span><span class="o">)</span>
</span><span class='line'><span class="k">implicit</span> <span class="k">def</span> <span class="n">helper2vanillaRequest</span><span class="o">(</span><span class="n">helper</span><span class="k">:</span> <span class="kt">MetricAlarmRequestHelper</span><span class="o">)</span> <span class="k">=</span> <span class="n">helper</span><span class="o">.</span><span class="n">req</span>
</span></code></pre></td></tr></table></div></figure>


<p>then scala will be able to magically convert from the vanilla request to the helper for use in your client code, and
then from the helper back to the vanilla request for passing to other parts of the Amazon API. <code>implicit class</code> is just
short-hand introduced in Scala 2.10 that does the above for you in one convenient construct that makes things even more
concise.  For more info, see the scala docs: <a href="http://docs.scala-lang.org/overviews/core/implicit-classes.html">http://docs.scala-lang.org/overviews/core/implicit-classes.html</a></p>

<p>Beyond use cases like wrapping builders, this kind of enrichment using <code>implicit</code> can be extremely powerful, especially
for extending functionality where it&rsquo;s not practical to alter the original code.  Though as with all advanced features
of anything, it&rsquo;s probably best not to go overboard.  :)</p>

<h3>Naming</h3>

<p>Quick bit of bonus trivia&hellip;  When the pattern first rose into prominence, it was known colloquially as &ldquo;pimp my class&rdquo;.
Then folks got all up in arms about the political correctness of the word &ldquo;pimp&rdquo;, so now the common term is
&ldquo;enrichment&rdquo;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bash Bangs]]></title>
    <link href="http://alexkuang.github.io/blog/2014/11/25/thing-of-the-week-bash-bangs/"/>
    <updated>2014-11-25T17:40:00-05:00</updated>
    <id>http://alexkuang.github.io/blog/2014/11/25/thing-of-the-week-bash-bangs</id>
    <content type="html"><![CDATA[<p>This week I wanted to do a quick tip on some neat functionality in bash (and other bash-like shells), the bang commands.</p>

<p>Let&rsquo;s say you have some long important command that you want to run.  You run it, only to discover that you need sudo
privileges.  For situations like this, <code>!!</code> (entire last command) can be a great time-saver.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">echo </span><span class="m">1</span> <span class="m">2</span> <span class="m">3</span> <span class="m">4</span> 5
</span><span class='line'><span class="m">1</span> <span class="m">2</span> <span class="m">3</span> <span class="m">4</span> <span class="m">5</span> <span class="c"># let&#39;s pretend echo throws an error too and wants sudo for some reason</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>sudo !!
</span><span class='line'>sudo <span class="nb">echo </span><span class="m">1</span> <span class="m">2</span> <span class="m">3</span> <span class="m">4</span> 5
</span><span class='line'>Password:
</span><span class='line'><span class="m">1</span> <span class="m">2</span> <span class="m">3</span> <span class="m">4</span> 5
</span></code></pre></td></tr></table></div></figure>


<p>Now, let&rsquo;s say you don&rsquo;t want to blindly re-run the last command.  <code>:p</code> can be used to print it without overwriting the
&ldquo;last command&rdquo; history.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">echo </span><span class="m">1</span> <span class="m">2</span> <span class="m">3</span> <span class="m">4</span> 5
</span><span class='line'><span class="m">1</span> <span class="m">2</span> <span class="m">3</span> <span class="m">4</span> 5
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>!!:p
</span><span class='line'><span class="nb">echo </span><span class="m">1</span> <span class="m">2</span> <span class="m">3</span> <span class="m">4</span> 5
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>sudo !!
</span><span class='line'>sudo <span class="nb">echo </span><span class="m">1</span> <span class="m">2</span> <span class="m">3</span> <span class="m">4</span> 5
</span><span class='line'>Password:
</span><span class='line'><span class="m">1</span> <span class="m">2</span> <span class="m">3</span> <span class="m">4</span> 5
</span></code></pre></td></tr></table></div></figure>


<p>Bang commands also extend to the individual parts of the last command you ran.  The most basic form of this is <code>echo
!:[n]</code>, where [n] is the nth word in the command, indexed from 0.  There are also shortcuts: <code>!^</code> gives the first arg
(like <code>!:1</code>) and <code>!$</code> gives the last arg.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">echo </span>a b c d e
</span><span class='line'>a b c d e
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> !:1
</span><span class='line'><span class="nb">echo </span>a
</span><span class='line'>a
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo </span>a b c d e
</span><span class='line'>a b c d e
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>!:5:p <span class="c"># :p works with any bangs!</span>
</span><span class='line'>e
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> !:5
</span><span class='line'><span class="nb">echo </span>e
</span><span class='line'>e
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo </span>a b c d e
</span><span class='line'>a b c d e
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> !<span class="err">$</span>
</span><span class='line'><span class="nb">echo </span>e
</span><span class='line'>e
</span></code></pre></td></tr></table></div></figure>


<p>Personally, I use <code>!$</code> the most, since very often I&rsquo;ll only want the last arg (e.g., <code>ls [some tab-completed dir]</code> ->
<code>rm -r !$</code>).  Plus, it&rsquo;s the easiest sequence to hit, finger-wise.</p>

<p>One final tip: awesome shells like, say, <code>zsh</code>, will actually tab-complete bangs and get rid of the need for <code>:p</code>.
e.g. <code>sudo !!&lt;TAB&gt;</code> gets replaced with <code>sudo echo 1 2 3 4 5</code> in place.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim Visual Block Mode]]></title>
    <link href="http://alexkuang.github.io/blog/2014/11/20/thing-of-the-week-vim-visual-block-mode/"/>
    <updated>2014-11-20T18:33:00-05:00</updated>
    <id>http://alexkuang.github.io/blog/2014/11/20/thing-of-the-week-vim-visual-block-mode</id>
    <content type="html"><![CDATA[<p>Friday Dev Demos are a big part of Bizo culture.  Every Friday, developers take turn presenting a short 10-15 min
demo on something cool they&rsquo;d found that wasn&rsquo;t necessarily work related.  The topic could be anything from a neat
snippet of code to a cool iOS application they&rsquo;d just found to a fun web game.  Dev demo day is great for the social
aspect, but also for the chance to showcase (and draw inspiration from) ideas that might not come up in day-to-day
discussion.</p>

<p>Unfortunately, the practice kind of fell by the wayside in the chaos of
<a href="http://blog.bizo.com/blog/from-the-digital-c-suite/linkedin-to-acquire-bizo">joining a new company</a> and all the
changes that entails.  While I&rsquo;m sure it&ndash;or something similar&ndash;will make a comeback, in the meantime I decided to
try carrying on the torch by starting a weekly &ldquo;Thing of the Week&rdquo; email blast that is in roughly the same spirit.  And
I figured while I&rsquo;m at it, why not stick it on the blog?  If nothing else, it will mean more practice writing and more
incentive for me to be proactive in learning new things to talk about.</p>

<p>So without further ado, the first &ldquo;Thing of the Week&rdquo; is a neat little feature in vim that I don&rsquo;t think deserves enough
attention&ndash;Visual Block mode.  The visual modes in vim are very similar to highlighting in other editors, but I&rsquo;ve
always felt that Visual Block is the underrated cousin to Visual and Visual Line mode.  Rather than trying to explain
what it does in words, here&rsquo;s a quick terminal cast to demonstrate via asciinema:</p>

<script type="text/javascript" src="https://asciinema.org/a/14064.js" id="asciicast-14064" async></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Baby's First Alfred Workflow]]></title>
    <link href="http://alexkuang.github.io/blog/2014/10/18/babys-first-alfred-workflow/"/>
    <updated>2014-10-18T15:32:00-04:00</updated>
    <id>http://alexkuang.github.io/blog/2014/10/18/babys-first-alfred-workflow</id>
    <content type="html"><![CDATA[<p>Lately I&rsquo;ve been spending a lot of my work time staring at <a href="http://aws.amazon.com/cloudwatch/">CloudWatch</a> metrics.
Particularly, we have a <a href="http://aws.amazon.com/kinesis/">Kinesis</a> application that publishes metrics on how long a
record spends hanging around in the stream before getting picked up by our processor.  The problem is that the metric is
published in milliseconds, which while precise, is not exactly human-readable for large enough durations.</p>

<p>I&rsquo;ve been a huge fan of <a href="http://www.alfredapp.com/">Alfred</a> for a while, and I use its quick-launch and custom search
functions nearly constantly.  I only recently got around to ponying up for the powerpack, which lets you define custom
&ldquo;workflows&rdquo;, so I figured&ndash;why not use a workflow to convert the milliseconds to something more readable?</p>

<!-- more -->


<p>The Alfred workflow UI is basically a fancy flow chart.  It allows you to string together elements for input,
actions, and output&ndash;Kind of like a graphical representation of a unix pipe.  The final product of the workflow looked
something like this:</p>

<p><img class="center" src="http://alexkuang.github.io/images/alf-flow.png"></p>

<p>The first step is to define a keyword, which is how this workflow will be invoked in the alfred menu:</p>

<p><img class="center" src="http://alexkuang.github.io/images/alf-keyword.png"></p>

<p>All this means is that I can use <code>mr (x)</code> to invoke the workflow, where x is some parameter.  <code>{query}</code> is just Alfred&rsquo;s
magic string for&ndash;you guessed it&ndash;injecting <code>argv</code>.  In this case, it updates the &lsquo;preview&rsquo; item in the dropdown as the
argstring is entered.</p>

<p>The actual script itself is simple and super hacked together in python, but the UI here is still worth showing.  Note the
use of {query}:</p>

<p><img class="center" src="http://alexkuang.github.io/images/alf-py.png"></p>

<p>In addition to python, the &ldquo;run script&rdquo; element also supports bash, ruby, and all manner of things up to and including Perl.</p>

<p>And, the final product:</p>

<p><img class="center" src="http://alexkuang.github.io/images/alf-demo.png"></p>

<p><img class="center" src="http://alexkuang.github.io/images/alf-print.png"></p>

<p>There are a few optimizations I can see immediately (for example, the &lsquo;large print&rsquo; output seems a bit kludgy), but it&rsquo;s
not bad for a few minutes&#8217; work!</p>

<p>And while this script was relatively simple, there&rsquo;s tons more to be explored.  In addition to running a script, Alfred
also supports other actions such as opening an application, running a web search, running iTunes, and then some.  And
for output, Alfred can do things like copy to clipboard or post to the Mac&rsquo;s Notification Center.  Really, it&rsquo;s like a
graphical scripting language on steroids with easy interaction with OS X.  I&rsquo;ve seen some projects lately for more
accessible coding via graphical interfaces; Alfred&rsquo;s approach is a pretty good start as far as I&rsquo;m concerned.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Asciinema]]></title>
    <link href="http://alexkuang.github.io/blog/2014/07/16/asciinema/"/>
    <updated>2014-07-16T15:40:00-04:00</updated>
    <id>http://alexkuang.github.io/blog/2014/07/16/asciinema</id>
    <content type="html"><![CDATA[<p>I was tooling around the other day and discovered a service called <a href="https://asciinema.org">asciinema</a> which provides
terminalcasts&ndash;essentially, &ldquo;screencasts&rdquo; with terminal I/O.  This is awesome for a few reasons.</p>

<p>From a content consumer&rsquo;s standpoint, it&rsquo;s often hard to follow a blog post that&rsquo;s trying to outline a command line tip,
or a vim tip, for the simple fact that the static nature of writing alone isn&rsquo;t optimal for showing the flow between
&ldquo;steps&rdquo; (commands, keystrokes, what have you) and &ldquo;output&rdquo; (what you&rsquo;re supposed to see after executing commands).
Having a dynamic format for demos helps with this greatly.  Sure, there are screencasts, but that involves dealing with
videos and their associated heavy Flash Player bullshit.  asciinema is rendered with just bits of html and js.</p>

<p>From a wannabe content producer&rsquo;s standpoint&hellip;  Writing is <em>hard</em>.  Writing while crafting appropriate examples is
harder.  Doing all that while struggling with capturing the nature of the examples in plain text?  No thanks.
Again&ndash;Yes, there is the option of screencasts, but those are painful to set up.  Screencasts means worrying about
things like capturing software, background audio, What Tab Do I Have Open In My Browser, and Will Video Compression
Screw My Text Legibility.  As a consummately lazy person who only wants to do short self-contained clips for now&hellip;
That&rsquo;s way too big of a barrier.  asciinema is easy&ndash;Just install, then <code>asciinema rec</code> from the terminal and <code>&lt;CTRL-D&gt;</code>
to exit and upload.</p>

<p>And embedding takes 2 seconds&ndash;Check it!</p>

<script type="text/javascript" src="https://asciinema.org/a/10785.js" id="asciicast-10785" async></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bracket Expansion in the Shell]]></title>
    <link href="http://alexkuang.github.io/blog/2014/06/25/bracket-expansion-in-the-shell/"/>
    <updated>2014-06-25T18:58:00-04:00</updated>
    <id>http://alexkuang.github.io/blog/2014/06/25/bracket-expansion-in-the-shell</id>
    <content type="html"><![CDATA[<p>Just a quick post to show of a neat little trick for those who are more command-line-driven: bracket expansion.</p>

<p>Basically, bracket expansion means that <code>some-string-called-{x,y}-here</code> desugars in the shell to
<code>some-string-called-x-here some-string-called-y-here</code>.  This is especially useful if, say, you&rsquo;re in a Java-like
directory structure and you accidentally placed your source class in your test folder, and you need to move it back:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># desugars into mv src/test/java/com/foobar/app/Class.java src/main/java/com/foobar/app/Class.java</span>
</span><span class='line'>mv src/<span class="o">{</span><span class="nb">test</span>,main<span class="o">}</span>/java/com/foobar/app/Class.java
</span></code></pre></td></tr></table></div></figure>


<p>Or if you&rsquo;ve already committed to source control, this also works quite nicely with <code>git mv</code>.  Another nice example from
recent memory is, say, if you were cleaning up some directories nested by date and wanted to only wipe a few months:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rm /posts/2014/<span class="o">{</span>01,03,06,07<span class="o">}</span>/*.html
</span></code></pre></td></tr></table></div></figure>


<p>Anyway, just a quick little post for a neat little trick.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello, Hardware World!]]></title>
    <link href="http://alexkuang.github.io/blog/2014/06/14/hello-hardware-world/"/>
    <updated>2014-06-14T16:56:00-04:00</updated>
    <id>http://alexkuang.github.io/blog/2014/06/14/hello-hardware-world</id>
    <content type="html"><![CDATA[<p>Recently, one of our tech leads at work previewed <a href="https://github.com/ogrodnek/analog-metrics-talk">a talk</a> that he&rsquo;s
planning to give on analog metrics for the upcoming Strange Loop conference.  I&rsquo;ve always wanted to play with
microcontrollers, and this really gave me a kick in the pants to get started.  Since I had a bit of amazon credit lying
around, I decided to buy an arduino starter kit with all sorts of buttons, lights, and doo-dads, but not enough power to
actually fry anything (I hope).  I still can&rsquo;t tell my head from my ass, but so far I can make a button turn on an LED.</p>

<p><img class="center" src="http://waffleparadox.smugmug.com/Other/Camera-Awesome-Photos/i-h59QFDb/0/L/CA_06051420063663-L.jpg"></p>

<p>Next step: world domination!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hack Days Are Awesome]]></title>
    <link href="http://alexkuang.github.io/blog/2014/04/26/hack-days-are-awesome/"/>
    <updated>2014-04-26T15:32:00-04:00</updated>
    <id>http://alexkuang.github.io/blog/2014/04/26/hack-days-are-awesome</id>
    <content type="html"><![CDATA[<p>Earlier this week, we had a &ldquo;hack day&rdquo; at work.  Or more precisely, two hack days.  I think the name is pretty
self-explanatory&ndash;work on whatever you want, which can be something helpful to or completely unrelated to your currently
assigned tasks, as long as it&rsquo;s something interesting.  Now, &ldquo;hack time&rdquo; is a pretty established institution in the
software world, especially amongst the hip startuppy companies.  I&rsquo;m sure everyone has heard of Google&rsquo;s &ldquo;20% time&rdquo; idea
by now, and the story of Microsoft&rsquo;s Xbox starting as a side-project.  Proponents (especially those who are trying to
pitch a business case to managers with varying degrees of pointy-haired-ness) cite building camaraderie, stimulating
creativity, and increasing morale as some of the biggest benefits.</p>

<p>None of this is news.  But I came away this week with a surprising realization.  When coding professionally for business
use cases, things like resilience and stability are often at the top of the requirement list&ndash;Or at least, I&rsquo;d really
hope so.  If it&rsquo;s not, kindly give me the name of your company so I know what stock to not buy ;).  To this end, coding
is never as simple as just sitting down and banging away at a keyboard.  It involves testing, discussions, design,
thinking, more testing, more thinking, and so on and so forth.</p>

<p>Don&rsquo;t get me wrong.  These are all very, very good things.  But I, at least, was surprised at how nice it was to just
sit down and bang away at a keyboard with abandon.  It sounds rather obvious in hindsight, but compared to the usual
rigorously managed process of software development at work, it&rsquo;s super liberating to just cowboy out some code with no
considerations other than speed and getting the job done.  And what&rsquo;s more, I realized that I had constrained myself to
the same careful management in all of my personal projects as well, especially when prototyping out potential MVPs and
such.  Again&ndash;Definitely a good thing, in most cases.  But after this week I&rsquo;m thinking that injecting some &ldquo;hack
day&rdquo;-ish time into my personal projects is in order, if for no reason other than to let the crazy out.</p>

<p><strong>tl;dr</strong> - Hack days are awesome.  I should do more of them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IAP and Mobile]]></title>
    <link href="http://alexkuang.github.io/blog/2014/02/03/iap-and-mobile/"/>
    <updated>2014-02-03T21:43:00-05:00</updated>
    <id>http://alexkuang.github.io/blog/2014/02/03/iap-and-mobile</id>
    <content type="html"><![CDATA[<p>In-app purchases and the free-to-play model have long been anathema to self-declared &ldquo;real gamers&rdquo; everywhere, but the
recent release (or re-release?) of classics like Tales of Phantasia and Dungeon Keeper seems to have brought yet
another wave of angry discussion to the forefront.  Understandably, people
<a href="http://www.baekdal.com/opinion/how-inapp-purchases-has-destroyed-the-industry/">are</a>
<a href="http://kotaku.com/a-cancer-thats-eroding-the-market-reactions-to-eas-1515121353">very</a>
<a href="http://www.escapistmagazine.com/articles/view/editorials/reviews/10956-Dungeon-Keeper-Mobile-Review-Wallet-Reaper">angry</a>
<a href="http://toucharcade.com/2014/01/27/tales-of-phantasia-review/">that</a> their beloved classics are being turned into f2p
&ldquo;cash farms&rdquo;, but personally I think saying the model is &ldquo;destroying the industry&rdquo; is a bit hyperbolic.</p>

<p>In response, toucharcade recently published a post pointing out an article that takes a <a href="http://toucharcade.com/2014/02/03/iap-isnt-actually-destroying-the-games-industry/">stance to the
contrary</a>.  The original piece is
definitely worth a read to anyone who cares about the topic; it makes a number of good arguments regarding pricing
pressures and facing a realistic economy for the unprecedented levels of competition on iOS.  But it also notes that the
concept of paying for more content&ndash;the &ldquo;original IAP&rdquo;&ndash;dates back to the beginning of the industry with coin op arcade
machines.  This seems like a valid comparison superficially, but as someone who&rsquo;s shelled out way too many quarters on
the likes of Gauntlet Dark Legacy I feel like there are two fundamental differences that this argument glosses over.</p>

<p>First: arcade games always had a large skill component.  It might take a while to get good enough, but it was always
possible to beat the game consistently on sheer skill alone.  The game might have been hard, but the balance was never
so broken as to render completion impossible without the extra coins.  Second: in the cases of the most nefarious IAPs,
you&rsquo;re not paying to spend more time with the game; you&rsquo;re paying for the exact opposite.  When an IAP does nothing but
shorten a timer or increase a premium resource, you&rsquo;re essentially paying more money to decrease the time you spend with
the game.  All &ldquo;Skinner&rsquo;s Box From Hell&rdquo; arguments aside, that is probably what I object to the most.  I don&rsquo;t have an
indiscriminate hatred for the f2p model&ndash;there are definitely cases of it being executed well&ndash;but I have a fundamental
problem with paying more for less.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adventures With Mail.app Gremlins]]></title>
    <link href="http://alexkuang.github.io/blog/2014/01/26/adventures-with-mail-dot-app-gremlins/"/>
    <updated>2014-01-26T09:05:00-05:00</updated>
    <id>http://alexkuang.github.io/blog/2014/01/26/adventures-with-mail-dot-app-gremlins</id>
    <content type="html"><![CDATA[<h4>Background</h4>

<p>Usually I don&rsquo;t care too much if an email or two gets dropped en route.  Between spam filters and sometimes-spotty
(cough, mobile) connections, it&rsquo;s not too much of a stretch to assume that things get lost once in a great while.  But
recently I was trying to set up an interview on the other side of the country, so naturally I paid a little more
attention than usual.  Everything was going quite well, correspondence was zipping back and forth, and I&rsquo;d even bought a
plane ticket for the trip.  But then a lull came when it was time to receive confirmation for hotel arrangements and a
rough schedule for the interview process.</p>

<p>Unbeknownst to me, the HR rep had already tried to send the information twice at this point, but for some
reason the emails weren&rsquo;t landing in my inbox.  I sent one last-ditch follow-up when my flight was boarding, and got a
reply with the info (thankfully) right before the plane took off.  Along with the reply, the HR rep mentioned that the
previous emails she&rsquo;d sent had gone to <code>waffles@mochify.com</code>. <em>(aside: While <code>waffles@mochify.com</code> isn&rsquo;t the first email
I&rsquo;d give out professionally, I&rsquo;m thankful it wasn&rsquo;t something like <code>sexbadger69@gmail.com</code> &hellip;  Actually, now I wonder
if that address is open &hellip;)</em></p>

<h4>The technical details</h4>

<p>This was an old address that I&rsquo;d added to my various devices previously, but then removed for inactivity; I certainly
didn&rsquo;t recall sending any recent email from it.  But when I logged in to check the inbox, lo and behold the missing
emails were staring me in the face, along with a few others that had been &ldquo;dropped&rdquo; not too long ago.  Something smelled
fishy.  I checked over my Sent box for my regular email to no avail; all the correspondence was there, with the correct
<code>From</code>s and <code>To</code>s.  I ended up having to dig into the plain-text of the mime header to spot the issue:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>From: Alex Kuang &lt;[...]&gt;
</span><span class='line'>Content-Type: multipart/alternative;
</span><span class='line'>    boundary="Apple-Mail=_7DA4001C-0AA1-48BD-80F5-00ACDBCCAE9C"
</span><span class='line'>    Message-Id: &lt;ADFD0F4C-6FE0-41F5-AA68-EF8E9845B360@gmail.com&gt;
</span><span class='line'>    Mime-Version: 1.0 (Mac OS X Mail 6.6 \(1510\))
</span><span class='line'>    X-Smtp-Server: smtp.gmail.com:waffles@mochify.com
</span><span class='line'>[...]</span></code></pre></td></tr></table></div></figure>


<p><em>X-Smtp? What?</em>  After a bit of googling I discovered that Mail.app on the Mac keeps a list of outgoing smtp servers
associated with your mail accounts, which you can see in Preferences -> Accounts -> &ldquo;Outgoing Mail Server&rdquo; -> Edit SMTP
Server List.  The problem is, the entry with the association persists <strong>even after an account is removed from the
list</strong>: when I checked my smtp list, it included an entry for mochify as well as a few other one-off addresses that I&rsquo;d
added and removed in similar fashion.  Most of my email (including <code>mochify.com</code>) is handled by google apps, which means
that the smtp server the entries pointed to were all <code>smtp.gmail.com</code>, and the only difference was the
username/authentication associated.</p>

<p>So what ended up happening here was that I&rsquo;d sent the email from my regular account through Mail.app so it still carried
the correct <code>From</code>/etc.  However, for reasons unknown, the outgoing smtp entry for that account did not work at
that moment.  Since <code>mochify</code>&rsquo;s smtp entry pointed at the same <code>smtp.gmail.com</code> server, I&rsquo;m willing to bet that Mail.app
decided it was a perfectly good fallback, added the <code>X-Smtp-Server</code> MIME header, and sent the email causing this weird
reply-to behavior.</p>

<p>There is a checkbox in account preferences that will lock you into using one-and-only-one smtp server and prevent this
from happening, but honestly after this ordeal I will probably just be even more biased towards composing my email using
the web gmail ui.  I&rsquo;m just glad that everything worked out in the end, and anyway this is a good reminder that I should
be more diligent in setting up auto-forwarding even for email addresses I don&rsquo;t plan on using.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CMD Misadventures - Codebase Size]]></title>
    <link href="http://alexkuang.github.io/blog/2013/12/23/cmd-misadventures-codebase-size/"/>
    <updated>2013-12-23T06:50:00-05:00</updated>
    <id>http://alexkuang.github.io/blog/2013/12/23/cmd-misadventures-codebase-size</id>
    <content type="html"><![CDATA[<p>After watching the <a href="https://www.destroyallsoftware.com/talks/wat">wat</a> talk and trolling my friends with the
<a href="https://www.destroyallsoftware.com/talks/a-whole-new-world">aneditor</a> talk for about the 200th time, I decided to
finally purchase one season of the Destroy All Software screencasts, despite the (IMHO) steep price tag and my financial
destitution.  (So far?  Totally worth it.  But a full review of the screencasts is neither here nor there.)</p>

<p>I&rsquo;ve always been a big fan of the unix power tools&ndash;<code>find</code>, <code>grep</code>, <code>xargs</code>, and so forth&ndash;but the DAS talks introduced
an idea that had never occurred to me for some insane reason: combine them with git to extract some interesting
information about your codebase.  And so, I decided to go diving into my biggest scala project for insights about its
code size.</p>

<p>One of the most common problems that code size can indicate is the presence of &ldquo;god classes&rdquo; or libraries, which know
and do way too much and thus are correspondingly bigger than the rest of the code by orders of magnitude.  This command
was relatively simple and does not involve git, so here it is in its entirety:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>alexkuang@Orion <span class="o">[</span>00:00:00<span class="o">]</span> <span class="o">[</span>~foobar/src/main/scala<span class="o">]</span> <span class="o">[</span>master<span class="o">]</span>
</span><span class='line'>-&gt; % find . -type f -name <span class="s2">&quot;*.scala&quot;</span> <span class="p">|</span> <span class="k">while</span> <span class="nb">read </span>file<span class="p">;</span> <span class="k">do</span> wc -l <span class="nv">$file</span><span class="p">;</span> <span class="k">done</span> <span class="p">|</span> sort -n
</span><span class='line'>       <span class="m">9</span> ./com/foobar/models/Permission.scala
</span><span class='line'>      <span class="m">11</span> ./com/foobar/util/LocParams.scala
</span><span class='line'>      <span class="m">14</span> ./com/foobar/util/OrgSettings.scala
</span><span class='line'>      <span class="m">16</span> ./com/foobar/security/package.scala
</span><span class='line'>      <span class="m">17</span> ./com/foobar/scripts/ReloadStageDB.scala
</span><span class='line'>      <span class="m">18</span> ./com/foobar/scripts/oneoff/InitSchema.scala
</span><span class='line'>      <span class="c"># ...</span>
</span><span class='line'>     <span class="m">231</span> ./com/foobar/js/Calendar.scala
</span><span class='line'>     <span class="m">247</span> ./com/foobar/persistence/Access.scala
</span><span class='line'>     <span class="m">287</span> ./com/foobar/snippet/BookingCalendar.scala
</span><span class='line'>     <span class="m">307</span> ./com/foobar/lib/Registration.scala
</span><span class='line'>     <span class="m">319</span> ./com/foobar/lib/Scheduler.scala
</span></code></pre></td></tr></table></div></figure>


<p>The output was slightly interesting, but nothing groundbreaking.  300 lines is not ideal to me, but manageable.  Broken
down quickly, <code>find #...</code> finds all files inside the current directory ending in &lsquo;.scala&rsquo;, reads each file in, and
passes it off to wc -l, which does a linecount on the file, whitespace and all.  <code>sort</code> does what its name implies, with
<code>-n</code> making it sort <code>1 2 3 11</code> instead of <code>1 11 2 3</code>.  The information was slightly cool, but as a hack it&rsquo;s not very
interesting, so let&rsquo;s throw some git in there to try to get a sense of how fast the codebase has grown over time.  After
all, superlinear growth is usually indicative of a ton of repetition and therefore unnecessary code complexity.</p>

<!-- more -->


<p>First, starting with walking the git repo.  <code>git rev-list &lt;branch&gt;</code> should do what we want it to, but in the case of
larger repos it the list can get a bit unwieldy/huge.  Enter <code>awk</code>, which lets you do a bunch of neat things with your
text but most importantly has an easy variable for line number, of all things <em>(note to self: learn2awk better?)</em>, thus:
<code>awk 'NR % &lt;n&gt; == 0'</code> to get only every nth revision list.  Combine that with the same reading as above, and do a
similar scala file find with a linecount, and the command is as follows: <em>(Yes, in this particular project I dev&rsquo;d right
in master instead of using a nvie-style git-flow.  Bad developer, bad!)</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git rev-list master <span class="p">|</span> awk <span class="s1">&#39;NR % 20 == 0&#39;</span> <span class="p">|</span> <span class="k">while</span> <span class="nb">read </span>revhash<span class="p">;</span> <span class="k">do</span> git checkout -q <span class="nv">$revhash</span> <span class="p">|</span> <span class="se">\</span>
</span><span class='line'><span class="o">&amp;&amp;</span> find . -name <span class="s1">&#39;*.scala&#39;</span> <span class="p">|</span> xargs cat <span class="p">|</span> wc -l<span class="p">;</span> <span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>The more finicky among us might comment right about now that the command is already pretty huge and nigh unreadable if
revisited in about two weeks&ndash;and he&rsquo;d be right.  But this is a quick one-off hack for some interesting info (something
that unix tools are absolutely amazing at), and if I cared that much I&rsquo;d probably write a real script, or at least
re-format it into a proper bash function.</p>

<p>So the above command gives us a bunch of line counts which is useful, but it doesn&rsquo;t really give us a sense of the
progression.  At this point I&rsquo;d usually either 1) compose some huge complicated thing that kept track of the current
line AND the previous in an attempt to do math, or 2) give up and write a real script for it later, but one of the DAS
videos showed something that was completely new to me: using <code>jot</code> to create a chart.  Even if I learned nothing else,
this alone made everything worth it.  Very quickly&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>-&gt; % jot - <span class="m">1</span> 5
</span><span class='line'><span class="c"># print range 1 to 5</span>
</span><span class='line'>1
</span><span class='line'>2
</span><span class='line'>3
</span><span class='line'>4
</span><span class='line'>5
</span><span class='line'>-&gt; % jot -b <span class="s1">&#39;*&#39;</span> - <span class="m">1</span> 5
</span><span class='line'><span class="c"># range 1 to 5, printing &#39;*&#39; instead</span>
</span><span class='line'>*
</span><span class='line'>*
</span><span class='line'>*
</span><span class='line'>*
</span><span class='line'>*
</span><span class='line'>-&gt; % jot -b <span class="s1">&#39;*&#39;</span> - <span class="m">1</span> <span class="m">5</span> <span class="p">|</span> xargs
</span><span class='line'><span class="c"># For all its magic, xargs just chunks up your input to be used as args.</span>
</span><span class='line'>* * * * *
</span><span class='line'>-&gt; % jot -b <span class="s1">&#39;*&#39;</span> - <span class="m">1</span> <span class="m">5</span> <span class="p">|</span> xargs <span class="p">|</span> tr -d <span class="s1">&#39; &#39;</span>
</span><span class='line'><span class="c"># And tr to translate.  Side note: as a recovering Perl user, it slightly annoys me that there&#39;s a tr util but not an s</span>
</span><span class='line'><span class="c"># util.  But I guess that&#39;s what sed is for...?</span>
</span><span class='line'>*****
</span></code></pre></td></tr></table></div></figure>


<p>And now all that&rsquo;s left is to combine the <code>jot</code> magic with the above command by reading a the linecount into a variable
called <code>lines</code>, using that in the <code>jot</code> call, and printing everything out.  In the interest of full disclosure, here&rsquo;s
the final command along with the output from my project:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>-&gt; % git rev-list master <span class="p">|</span> awk <span class="s1">&#39;NR % 20 == 0&#39;</span> <span class="p">|</span> <span class="k">while</span> <span class="nb">read </span>revhash<span class="p">;</span> <span class="k">do</span> git checkout -q <span class="nv">$revhash</span> <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>find . -name <span class="s1">&#39;*.scala&#39;</span> <span class="p">|</span> xargs cat <span class="p">|</span> wc -l <span class="p">|</span> <span class="se">\</span>
</span><span class='line'><span class="nb">read </span>lines <span class="o">&amp;&amp;</span> <span class="o">((</span><span class="nv">hashes</span> <span class="o">=</span> <span class="nv">$lines</span> / 100<span class="o">))</span> <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;`jot -b &#39;#&#39; - 1 $hashes | xargs | tr -d &#39; &#39;` $lines&quot;</span><span class="p">;</span> <span class="k">done</span>
</span><span class='line'><span class="c">######################################################### 5700</span>
</span><span class='line'><span class="c">##################################################### 5333</span>
</span><span class='line'><span class="c">################################################### 5151</span>
</span><span class='line'><span class="c">############################################### 4796</span>
</span><span class='line'><span class="c">############################################# 4530</span>
</span><span class='line'><span class="c">##################################### 3786</span>
</span><span class='line'><span class="c">################################### 3528</span>
</span><span class='line'><span class="c">#################################### 3660</span>
</span><span class='line'><span class="c">#################################### 3615</span>
</span><span class='line'><span class="c">################################ 3208</span>
</span><span class='line'><span class="c">############################ 2848</span>
</span><span class='line'><span class="c">############################ 2832</span>
</span><span class='line'><span class="c">############################ 2855</span>
</span><span class='line'><span class="c">########################### 2786</span>
</span><span class='line'><span class="c">######################## 2418</span>
</span><span class='line'><span class="c">##################### 2186</span>
</span><span class='line'><span class="c">################## 1834</span>
</span><span class='line'><span class="c">################ 1664</span>
</span><span class='line'><span class="c">############## 1412</span>
</span><span class='line'><span class="c">############ 1270</span>
</span><span class='line'><span class="c">########### 1179</span>
</span><span class='line'><span class="c">######## 892</span>
</span><span class='line'><span class="c">###### 651</span>
</span><span class='line'><span class="c">#### 420</span>
</span><span class='line'><span class="c"># 138</span>
</span></code></pre></td></tr></table></div></figure>


<p>The growth at the beginning looked pretty normal, and I must say I&rsquo;m slightly happy that around the middle it remained
constant, and even took a slight dip afterwards.  After the dip though it seems like the growth started shooting up
again, which is not a good sign.  This is consistent with my personal experience, as I recall starting to really throw
in the super-hacks at around that time, so everything is probably due for another refactor.</p>

<p>In closing, I&rsquo;d like to remark that while this post was pretty monolithic and it took a lot of text to explain
everything for the first time, in real life this command probably took about 2-3 minutes to write.  And that&rsquo;s what I
find these utils are really really good at&ndash;Quick dirty answers to the little &ldquo;I wonder&hellip;&rdquo; / &ldquo;What if&hellip;&rdquo; questions
that tend to pop up while coding.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure First Impressions]]></title>
    <link href="http://alexkuang.github.io/blog/2013/12/20/clojure-first-impressions/"/>
    <updated>2013-12-20T14:05:00-05:00</updated>
    <id>http://alexkuang.github.io/blog/2013/12/20/clojure-first-impressions</id>
    <content type="html"><![CDATA[<p>After achieving some measure of familiarity with Scala, and with newfound copious amounts of free time, I decided I
wanted to see more of what the functional world had to offer.  The obvious choices were Haskell and Clojure; but while
Haskell has the upper hand in functional purity and a crazy advanced type system, I like to think I&rsquo;m a pragmatic guy at
heart and Clojure seemed more practical.  I haven&rsquo;t worked with it too extensively, but my experience so far can be
summarized by two words: Simple and composable.</p>

<h4>The language</h4>

<p>Clojure is a refreshingly simple language.  Despite my last foray into a Lisp being about half a decade ago, the
learning curve was much gentler than I&rsquo;d expected.  Maybe it&rsquo;s because I was already in a functional programming
mindset, but the straightforward syntax and <a href="http://clojure-doc.org/">abundance</a>
<a href="http://clojure.org/getting_started">of</a> <a href="http://clojure.org/cheatsheet">documentation</a> probably helped.  And on a
completely subjective level: <code>iDislikeCamelCase</code>, and <code>clojure-case-is-pretty-neat</code>.</p>

<h4>The ecosystem</h4>

<p>Of course, the overall enjoyability of using a language doesn&rsquo;t depend solely on the core language, but also the
libraries and toolchain available.  Most of the libraries I&rsquo;ve seen keep in line with the design of the language: super
lightweight, super simple, super composable, and as a result super easy to ramp up on and use.  Theoretically that
should just describe all good library design in general, but I feel like the clojure community takes it especially to
heart.</p>

<p>Compojure, for example, chose to implement its url
<a href="https://github.com/weavejester/compojure/wiki/Destructuring-Syntax">destructuring</a> to closely follow the destructuring
available in stock Clojure <code>let</code>s expressions.  I can&rsquo;t help but draw the comparison to Scala, where I&rsquo;d be more likely
to find that url decomposition exists only in the form of an exotic DSL.  Another huge example for me is the difference
between the simplicity of the Clojure build tool Leiningen and the craziness of Scala&rsquo;s SBT.  Sorry SBT&ndash;You work very
well, but I&rsquo;d rather not have to google what the <code>&lt;++=</code> operator does every time I touch the build.</p>

<h4>With vim</h4>

<p>One of my original reasons for leaning clojure was its close integration with
<a href="http://www.chris-granger.com/lighttable/">LightTable</a>.  As it turns out, the functionality I liked could be
replicated in vim with <a href="https://github.com/tpope/vim-fireplace">fireplace.vim</a>&rsquo;s quasi-insta-repl and insta-doc, due in
no small part to leiningen and nrepl&rsquo;s awesomeness.
<a href="https://github.com/kien/rainbow_parentheses.vim">Rainbow parentheses</a> is also pretty cool, and has been useful enough
that I will probably keep it on even when I don&rsquo;t have to deal with the hardcore levels of parens in Lisps:</p>

<p><img class="center" src="http://alexkuang.github.io/images/rainbow-parens.png"></p>

<h4>Overall</h4>

<p>If programming languages could be graded on usability, Clojure would get full marks.  It has been a breath of fresh air
after dealing with the crazy complexity in Scala.  Undoubtedly working through the latter had a part in making the
former much easier, and Scala will always have a place with me, but for now I find myself slowly joining the rest of the
Clojure bandwagon.</p>
]]></content>
  </entry>
  
</feed>
