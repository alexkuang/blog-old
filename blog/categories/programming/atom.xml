<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Programming | alex kuang]]></title>
  <link href="http://alexkuang.github.io/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://alexkuang.github.io/"/>
  <updated>2015-03-28T16:38:20-04:00</updated>
  <id>http://alexkuang.github.io/</id>
  <author>
    <name><![CDATA[Alex Kuang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Thing of the Week: Thread Macro (01/07/15)]]></title>
    <link href="http://alexkuang.github.io/blog/2015/01/24/thread-macro/"/>
    <updated>2015-01-24T11:53:42-05:00</updated>
    <id>http://alexkuang.github.io/blog/2015/01/24/thread-macro</id>
    <content type="html"><![CDATA[<p>Let’s deviate from Scala for a bit and talk about clojure.  Or lisps in general, I guess.  A lot of the “kinda joking
except not really” quips that commonly float around on the internet are about the parentheses, as in how there are so
many of them.  For example, if you want to take a number <code>x</code> and add one, multiply by two, then add 3, the code might
naively look something like this:</p>

<pre><code class="clojure">(+ (* (+ x 1) 2) 3)
</code></pre>

<p>Or perhaps like this:</p>

<pre><code class="clojure">(+ 3 (* 2 (+ 1 x)))
</code></pre>

<p>Look at the parens!  Especially the consecutive 3 closing ones in the second variation.  For a sufficiently long chain
of functions, it can get pretty unreadable—especially with multiple arguments and whatnot.</p>

<p>Enter clojure’s thread macro.  The thread macro is a macro in the form of <code>(-&gt; x &amp; forms)</code>, and it “threads” <code>x</code> through
the <code>forms</code> as the first arg*.  Which sounds terribly confusing explained, so an example is probably better here.  Take
this snippet using the thread macro:</p>

<pre><code class="clojure">;; add one, multiply by two, and add three
(-&gt; x
  (+ 1)
  (* 2)
  (+ 3))
</code></pre>

<p>This desugars into <code>(+ (* (+ x 1) 2) 3)</code>, i.e. the first variation of the initial example above.  Personally, I find the
macro version much more readable since each call is on its own line, and it seems more expressive of applying a series
of functions to the initial x.</p>

<p>The thread macro is also useful for chaining together collection methods like <code>map</code>.  Since clojure doesn’t have
first-class OO support (instead favoring protocols and such), map exists as a regular function that takes the collection
as an arg, instead of as a method on a collection class.  So chaining together a bunch of ops on a vector might look
something like&hellip;</p>

<pre><code class="clojure">;; add one to every number and filter for even numbers
(-&gt;&gt; [1 2 3 4 5 6]
  (map #(+ 1 %))
  (filter even?))

;; Without the thread macro, would look like:
(filter even? (map #(+ 1 %) [1 2 3 4 5 6]))
</code></pre>

<p>The only difference is that in this case, ->> was used.  ->> is “thread last”, which is like -> (“thread first”), except
it inserts the expression at the end of the form.</p>

<p>This pattern also exists in other languages (especially those that don’t offer first-class OO, which allows fancy
<code>return self</code> type stuff), like Elixir’s pipe <code>|&gt;</code> (in the spirit of the unix pipe) which is what prompted me to spread
the word about this:</p>

<pre><code class="elixir"># double and add one to each element
[1, 2, 3]
|&gt; Enum.map(fn x -&gt; x * 2)
|&gt; Enum.map(fn x -&gt; x + 1)
</code></pre>

<p>The thread macro pattern doesn’t have as much of a place in Scala, since Scala has mechanisms like the collection
library and implicit conversions to help express similar logic in elegant ways.  But when I first read up on macros in
lisp, I spent some time scratching my head at the day-to-day practical uses until I found this and had my first
“ohhhhhhhhhhhh” moment.  In any case, hope this was mildly interesting!</p>

<p>* - Well technically, as the second item in the form, which is effectively the first arg for functions&hellip; But that might
be a bit too lispy.</p>

<h3>Bonus</h3>

<p>When I published this email to the internal list, it generated some discussion wherein I learned that there are other
neat features of the same sort like <a href="https://clojuredocs.org/clojure.core/doto">doto</a>, and that they&rsquo;re all just
various derivations of the K combinator.  Of course, googling k-combinators led to a pretty
<a href="http://en.wikipedia.org/wiki/SKI_combinator_calculus">heavy looking wiki page</a>, so I was referred to
<a href="http://combinators.info/">http://combinators.info/</a> , which I have been trying to get through since.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thing of the Week: Scala Enrichment (12/03/14)]]></title>
    <link href="http://alexkuang.github.io/blog/2015/01/24/scala-enrichment/"/>
    <updated>2015-01-24T11:52:37-05:00</updated>
    <id>http://alexkuang.github.io/blog/2015/01/24/scala-enrichment</id>
    <content type="html"><![CDATA[<p>Douglas Crockford recently gave a tech talk at work, where he casually endorsed Scala during the Q&amp;A at the end.  Given
that and the fact that I&rsquo;ve been hearing increasing mentions of it in the company at large, I figured this week I&rsquo;d plug
a neat feature of Scala and a recent use case where I found it extremely handy.</p>

<h3>The Feature</h3>

<p>Anyone who&rsquo;s worked with The AWS SDK (or just Java code in general) will be familiar with the builder pattern.
Recently, I was writing some code to automate setup of CloudWatch alarms for a DynamoDB table.  The alarm request
started looking something like:</p>

<pre><code class="scala">val req = new PutMetricsAlarmRequest()
  .withNamespace("DynamoDB")
  .withDimensions(dimensionsForTableName)
  .withStatistic("Sum")
  .withComparisonOperator(GreaterThanThreshold)
  .withThreshold(thresholdNumber)
  .withMetricName(throttledMetricName)
  .withEvaluationPeriods(periods)
  .withPeriod(periodDuration.toSeconds.toInt)
  .withAlarmActions(idMappingSNS)
  .withAlarmName(alarmNameFor(tableName, throttledMetric, throttledThreshold))

cloudwatchClient.putMetricAlarm(req)
</code></pre>

<p>Which is serviceable, but less than ideal given that I had multiple alarms of roughly the same nature.  Plus, I felt
like it left something to be desired in terms of readability and communicating the intent of the alarm in a succinct
way.  Enter <code>implicit class</code>s and the &ldquo;enrichment&rdquo;* pattern!  Basically, it lets us turn the above into something more
like this:</p>

<pre><code class="scala">val req = new PutMetricAlarmRequest()
  .forTable(tableName)
  .triggerOnSumGreaterThan(throttledMetric, throttledThreshold)
  .afterEvaluationPeriods(evaluationPeriodDuration, evaluationPeriods)
  .withAlarmActions(idMappingSNS)
  .withAlarmName(alarmNameFor(tableName, throttledMetric, throttledThreshold))

cloudwatchClient.putMetricAlarm(req) /** Can still pass req back into AWS API! */
</code></pre>

<p>With the addition of this:</p>

<pre><code class="scala">implicit class MetricAlarmRequestHelper(req: PutMetricAlarmRequest) {
  def forTable(tableName: String) = {
    req.withNamespace("DynamoDB").withDimensions(tableMetricDimensions(tableName).asJava)
  }

  def triggerOnSumGreaterThan(metricName: String, threshold: Int) = {
    req.withStatistic("Sum").withComparisonOperator(GreaterThanThreshold).withThreshold(threshold).withMetricName(metricName)
  }

  def afterEvaluationPeriods(periodDuration: Duration, periods: Int) = {
    req.withEvaluationPeriods(periods).withPeriod(periodDuration.toSeconds.toInt)
  }
}
</code></pre>

<!-- more -->


<h3>How It Works</h3>

<p>One of the coolest&ndash;and probably most confusing&ndash;keywords in scala is <code>implicit</code>, which can refer to many different
things.  For now, let&rsquo;s limit the discussion to implicit conversions.  A grossly oversimplified tl;dr is that there can
be some def of the form:</p>

<pre><code class="scala">implicit def foo2bar(foo: Foo): Bar = { … }
</code></pre>

<p>And as long as that def is in scope, the code will convert anything of type Foo into type Bar without having to re-write
that logic or call some conversion method.  For more information on implicits in general, see this excellent answer by
Daniel Sobral, who is basically the Jon Skeet of the Scala world:
<a href="http://stackoverflow.com/questions/5598085/where-does-scala-look-for-implicits/5598107#5598107">http://stackoverflow.com/questions/5598085/where-does-scala-look-for-implicits/5598107#5598107</a></p>

<p>Extending the use of implicits, that means that if you do something like, for the above use-case:</p>

<pre><code class="scala">class MetricAlarmRequestHelper(req: PutMetricAlarmRequest) = { /** Same function defs as above */ }

implicit def vanillaRequest2Helper(req: PutMetricAlarmRequest) = new MetricAlarmRequestHelper(req)
implicit def helper2vanillaRequest(helper: MetricAlarmRequestHelper) = helper.req
</code></pre>

<p>then scala will be able to magically convert from the vanilla request to the helper for use in your client code, and
then from the helper back to the vanilla request for passing to other parts of the Amazon API. <code>implicit class</code> is just
short-hand introduced in Scala 2.10 that does the above for you in one convenient construct that makes things even more
concise.  For more info, see the scala docs: <a href="http://docs.scala-lang.org/overviews/core/implicit-classes.html">http://docs.scala-lang.org/overviews/core/implicit-classes.html</a></p>

<p>Beyond use cases like wrapping builders, this kind of enrichment using <code>implicit</code> can be extremely powerful, especially
for extending functionality where it&rsquo;s not practical to alter the original code.  Though as with all advanced features
of anything, it&rsquo;s probably best not to go overboard.  :)</p>

<h3>Naming</h3>

<p>Quick bit of bonus trivia&hellip;  When the pattern first rose into prominence, it was known colloquially as &ldquo;pimp my class&rdquo;.
Then folks got all up in arms about the political correctness of the word &ldquo;pimp&rdquo;, so now the common term is
&ldquo;enrichment&rdquo;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Asciinema]]></title>
    <link href="http://alexkuang.github.io/blog/2014/07/16/asciinema/"/>
    <updated>2014-07-16T15:40:00-04:00</updated>
    <id>http://alexkuang.github.io/blog/2014/07/16/asciinema</id>
    <content type="html"><![CDATA[<p>I was tooling around the other day and discovered a service called <a href="https://asciinema.org">asciinema</a> which provides
terminalcasts&ndash;essentially, &ldquo;screencasts&rdquo; with terminal I/O.  This is awesome for a few reasons.</p>

<p>From a content consumer&rsquo;s standpoint, it&rsquo;s often hard to follow a blog post that&rsquo;s trying to outline a command line tip,
or a vim tip, for the simple fact that the static nature of writing alone isn&rsquo;t optimal for showing the flow between
&ldquo;steps&rdquo; (commands, keystrokes, what have you) and &ldquo;output&rdquo; (what you&rsquo;re supposed to see after executing commands).
Having a dynamic format for demos helps with this greatly.  Sure, there are screencasts, but that involves dealing with
videos and their associated heavy Flash Player bullshit.  asciinema is rendered with just bits of html and js.</p>

<p>From a wannabe content producer&rsquo;s standpoint&hellip;  Writing is <em>hard</em>.  Writing while crafting appropriate examples is
harder.  Doing all that while struggling with capturing the nature of the examples in plain text?  No thanks.
Again&ndash;Yes, there is the option of screencasts, but those are painful to set up.  Screencasts means worrying about
things like capturing software, background audio, What Tab Do I Have Open In My Browser, and Will Video Compression
Screw My Text Legibility.  As a consummately lazy person who only wants to do short self-contained clips for now&hellip;
That&rsquo;s way too big of a barrier.  asciinema is easy&ndash;Just install, then <code>asciinema rec</code> from the terminal and <code>&lt;CTRL-D&gt;</code>
to exit and upload.</p>

<p>And embedding takes 2 seconds&ndash;Check it!</p>

<script type="text/javascript" src="https://asciinema.org/a/10785.js" id="asciicast-10785" async></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bracket Expansion in the Shell]]></title>
    <link href="http://alexkuang.github.io/blog/2014/06/25/bracket-expansion-in-the-shell/"/>
    <updated>2014-06-25T18:58:00-04:00</updated>
    <id>http://alexkuang.github.io/blog/2014/06/25/bracket-expansion-in-the-shell</id>
    <content type="html"><![CDATA[<p>Just a quick post to show of a neat little trick for those who are more command-line-driven: bracket expansion.</p>

<p>Basically, bracket expansion means that <code>some-string-called-{x,y}-here</code> desugars in the shell to
<code>some-string-called-x-here some-string-called-y-here</code>.  This is especially useful if, say, you&rsquo;re in a Java-like
directory structure and you accidentally placed your source class in your test folder, and you need to move it back:</p>

<pre><code class="bash"># desugars into mv src/test/java/com/foobar/app/Class.java src/main/java/com/foobar/app/Class.java
mv src/{test,main}/java/com/foobar/app/Class.java
</code></pre>

<p>Or if you&rsquo;ve already committed to source control, this also works quite nicely with <code>git mv</code>.  Another nice example from
recent memory is, say, if you were cleaning up some directories nested by date and wanted to only wipe a few months:</p>

<pre><code class="bash">rm /posts/2014/{01,03,06,07}/*.html
</code></pre>

<p>Anyway, just a quick little post for a neat little trick.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello, Hardware World!]]></title>
    <link href="http://alexkuang.github.io/blog/2014/06/14/hello-hardware-world/"/>
    <updated>2014-06-14T16:56:00-04:00</updated>
    <id>http://alexkuang.github.io/blog/2014/06/14/hello-hardware-world</id>
    <content type="html"><![CDATA[<p>Recently, one of our tech leads at work previewed <a href="https://github.com/ogrodnek/analog-metrics-talk">a talk</a> that he&rsquo;s
planning to give on analog metrics for the upcoming Strange Loop conference.  I&rsquo;ve always wanted to play with
microcontrollers, and this really gave me a kick in the pants to get started.  Since I had a bit of amazon credit lying
around, I decided to buy an arduino starter kit with all sorts of buttons, lights, and doo-dads, but not enough power to
actually fry anything (I hope).  I still can&rsquo;t tell my head from my ass, but so far I can make a button turn on an LED.</p>

<p><img class="center <a" src="href="http://waffleparadox.smugmug.com/Other/Camera-Awesome-Photos/i-h59QFDb/0/L/CA_06051420063663-L.jpg">http://waffleparadox.smugmug.com/Other/Camera-Awesome-Photos/i-h59QFDb/0/L/CA_06051420063663-L.jpg</a>&#8221;></p>

<p>Next step: world domination!</p>
]]></content>
  </entry>
  
</feed>
