<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tech | alex kuang]]></title>
  <link href="http://alexkuang.github.io/blog/categories/tech/atom.xml" rel="self"/>
  <link href="http://alexkuang.github.io/"/>
  <updated>2014-03-13T22:36:06-04:00</updated>
  <id>http://alexkuang.github.io/</id>
  <author>
    <name><![CDATA[Alex Kuang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[IAP and Mobile]]></title>
    <link href="http://alexkuang.github.io/blog/2014/02/03/iap-and-mobile/"/>
    <updated>2014-02-03T21:43:00-05:00</updated>
    <id>http://alexkuang.github.io/blog/2014/02/03/iap-and-mobile</id>
    <content type="html"><![CDATA[<p>In-app purchases and the free-to-play model have long been anathema to self-declared &ldquo;real gamers&rdquo; everywhere, but the
recent release (or re-release?) of classics like Tales of Phantasia and Dungeon Keeper seems to have brought yet
another wave of angry discussion to the forefront.  Understandably, people
<a href="http://www.baekdal.com/opinion/how-inapp-purchases-has-destroyed-the-industry/">are</a>
<a href="http://kotaku.com/a-cancer-thats-eroding-the-market-reactions-to-eas-1515121353">very</a>
<a href="http://www.escapistmagazine.com/articles/view/editorials/reviews/10956-Dungeon-Keeper-Mobile-Review-Wallet-Reaper">angry</a>
<a href="http://toucharcade.com/2014/01/27/tales-of-phantasia-review/">that</a> their beloved classics are being turned into f2p
&ldquo;cash farms&rdquo;, but personally I think saying the model is &ldquo;destroying the industry&rdquo; is a bit hyperbolic.</p>

<p>In response, toucharcade recently published a post pointing out an article that takes a <a href="http://toucharcade.com/2014/02/03/iap-isnt-actually-destroying-the-games-industry/">stance to the
contrary</a>.  The original piece is
definitely worth a read to anyone who cares about the topic; it makes a number of good arguments regarding pricing
pressures and facing a realistic economy for the unprecedented levels of competition on iOS.  But it also notes that the
concept of paying for more content&mdash;the &ldquo;original IAP&rdquo;&mdash;dates back to the beginning of the industry with coin op arcade
machines.  This seems like a valid comparison superficially, but as someone who&rsquo;s shelled out way too many quarters on
the likes of Gauntlet Dark Legacy I feel like there are two fundamental differences that this argument glosses over.</p>

<p>First: arcade games always had a large skill component.  It might take a while to get good enough, but it was always
possible to beat the game consistently on sheer skill alone.  The game might have been hard, but the balance was never
so broken as to render completion impossible without the extra coins.  Second: in the cases of the most nefarious IAPs,
you&rsquo;re not paying to spend more time with the game; you&rsquo;re paying for the exact opposite.  When an IAP does nothing but
shorten a timer or increase a premium resource, you&rsquo;re essentially paying more money to decrease the time you spend with
the game.  All &ldquo;Skinner&rsquo;s Box From Hell&rdquo; arguments aside, that is probably what I object to the most.  I don&rsquo;t have an
indiscriminate hatred for the f2p model&mdash;there are definitely cases of it being executed well&mdash;but I have a fundamental
problem with paying more for less.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adventures with Mail.app Gremlins]]></title>
    <link href="http://alexkuang.github.io/blog/2014/01/26/adventures-with-mail-dot-app-gremlins/"/>
    <updated>2014-01-26T09:05:00-05:00</updated>
    <id>http://alexkuang.github.io/blog/2014/01/26/adventures-with-mail-dot-app-gremlins</id>
    <content type="html"><![CDATA[<h4>Background</h4>

<p>Usually I don&rsquo;t care too much if an email or two gets dropped en route.  Between spam filters and sometimes-spotty
(cough, mobile) connections, it&rsquo;s not too much of a stretch to assume that things get lost once in a great while.  But
recently I was trying to set up an interview on the other side of the country, so naturally I paid a little more
attention than usual.  Everything was going quite well, correspondence was zipping back and forth, and I&rsquo;d even bought a
plane ticket for the trip.  But then a lull came when it was time to receive confirmation for hotel arrangements and a
rough schedule for the interview process.</p>

<p>Unbeknownst to me, the HR rep had already tried to send the information twice at this point, but for some
reason the emails weren&rsquo;t landing in my inbox.  I sent one last-ditch follow-up when my flight was boarding, and got a
reply with the info (thankfully) right before the plane took off.  Along with the reply, the HR rep mentioned that the
previous emails she&rsquo;d sent had gone to <code>waffles@mochify.com</code>. <em>(aside: While <code>waffles@mochify.com</code> isn&rsquo;t the first email
I&rsquo;d give out professionally, I&rsquo;m thankful it wasn&rsquo;t something like <code>sexbadger69@gmail.com</code> &hellip;  Actually, now I wonder
if that address is open &hellip;)</em></p>

<h4>The technical details</h4>

<p>This was an old address that I&rsquo;d added to my various devices previously, but then removed for inactivity; I certainly
didn&rsquo;t recall sending any recent email from it.  But when I logged in to check the inbox, lo and behold the missing
emails were staring me in the face, along with a few others that had been &ldquo;dropped&rdquo; not too long ago.  Something smelled
fishy.  I checked over my Sent box for my regular email to no avail; all the correspondence was there, with the correct
<code>From</code>s and <code>To</code>s.  I ended up having to dig into the plain-text of the mime header to spot the issue:</p>

<p>```
From: Alex Kuang &lt;[&hellip;]>
Content-Type: multipart/alternative;</p>

<pre><code>boundary="Apple-Mail=_7DA4001C-0AA1-48BD-80F5-00ACDBCCAE9C"
Message-Id: &lt;ADFD0F4C-6FE0-41F5-AA68-EF8E9845B360@gmail.com&gt;
Mime-Version: 1.0 (Mac OS X Mail 6.6 \(1510\))
X-Smtp-Server: smtp.gmail.com:waffles@mochify.com
</code></pre>

<p>[&hellip;]
```</p>

<p><em>X-Smtp? What?</em>  After a bit of googling I discovered that Mail.app on the Mac keeps a list of outgoing smtp servers
associated with your mail accounts, which you can see in Preferences &ndash;> Accounts &ndash;> &ldquo;Outgoing Mail Server&rdquo; &ndash;> Edit SMTP
Server List.  The problem is, the entry with the association persists <strong>even after an account is removed from the
list</strong>: when I checked my smtp list, it included an entry for mochify as well as a few other one-off addresses that I&rsquo;d
added and removed in similar fashion.  Most of my email (including <code>mochify.com</code>) is handled by google apps, which means
that the smtp server the entries pointed to were all <code>smtp.gmail.com</code>, and the only difference was the
username/authentication associated.</p>

<p>So what ended up happening here was that I&rsquo;d sent the email from my regular account through Mail.app so it still carried
the correct <code>From</code>/etc.  However, for reasons unknown, the outgoing smtp entry for that account did not work at
that moment.  Since <code>mochify</code>&rsquo;s smtp entry pointed at the same <code>smtp.gmail.com</code> server, I&rsquo;m willing to bet that Mail.app
decided it was a perfectly good fallback, added the <code>X-Smtp-Server</code> MIME header, and sent the email causing this weird
reply-to behavior.</p>

<p>There is a checkbox in account preferences that will lock you into using one-and-only-one smtp server and prevent this
from happening, but honestly after this ordeal I will probably just be even more biased towards composing my email using
the web gmail ui.  I&rsquo;m just glad that everything worked out in the end, and anyway this is a good reminder that I should
be more diligent in setting up auto-forwarding even for email addresses I don&rsquo;t plan on using.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CMD Misadventures - Codebase Size]]></title>
    <link href="http://alexkuang.github.io/blog/2013/12/23/cmd-misadventures-codebase-size/"/>
    <updated>2013-12-23T06:50:00-05:00</updated>
    <id>http://alexkuang.github.io/blog/2013/12/23/cmd-misadventures-codebase-size</id>
    <content type="html"><![CDATA[<p>After watching the <a href="https://www.destroyallsoftware.com/talks/wat">wat</a> talk and trolling my friends with the
<a href="https://www.destroyallsoftware.com/talks/a-whole-new-world">aneditor</a> talk for about the 200th time, I decided to
finally purchase one season of the Destroy All Software screencasts, despite the (IMHO) steep price tag and my financial
destitution.  (So far?  Totally worth it.  But a full review of the screencasts is neither here nor there.)</p>

<p>I&rsquo;ve always been a big fan of the unix power tools&mdash;<code>find</code>, <code>grep</code>, <code>xargs</code>, and so forth&mdash;but the DAS talks introduced
an idea that had never occurred to me for some insane reason: combine them with git to extract some interesting
information about your codebase.  And so, I decided to go diving into my biggest scala project for insights about its
code size.</p>

<p>One of the most common problems that code size can indicate is the presence of &ldquo;god classes&rdquo; or libraries, which know
and do way too much and thus are correspondingly bigger than the rest of the code by orders of magnitude.  This command
was relatively simple and does not involve git, so here it is in its entirety:</p>

<p>```bash
alexkuang@Orion [00:00:00] [~foobar/src/main/scala] [master]
&ndash;> % find . -type f -name &ldquo;*.scala&rdquo; | while read file; do wc -l $file; done | sort -n</p>

<pre><code>   9 ./com/foobar/models/Permission.scala
  11 ./com/foobar/util/LocParams.scala
  14 ./com/foobar/util/OrgSettings.scala
  16 ./com/foobar/security/package.scala
  17 ./com/foobar/scripts/ReloadStageDB.scala
  18 ./com/foobar/scripts/oneoff/InitSchema.scala
  # ...
 231 ./com/foobar/js/Calendar.scala
 247 ./com/foobar/persistence/Access.scala
 287 ./com/foobar/snippet/BookingCalendar.scala
 307 ./com/foobar/lib/Registration.scala
 319 ./com/foobar/lib/Scheduler.scala
</code></pre>

<p>```</p>

<p>The output was slightly interesting, but nothing groundbreaking.  300 lines is not ideal to me, but manageable.  Broken
down quickly, <code>find #...</code> finds all files inside the current directory ending in &lsquo;.scala&rsquo;, reads each file in, and
passes it off to wc -l, which does a linecount on the file, whitespace and all.  <code>sort</code> does what its name implies, with
<code>-n</code> making it sort <code>1 2 3 11</code> instead of <code>1 11 2 3</code>.  The information was slightly cool, but as a hack it&rsquo;s not very
interesting, so let&rsquo;s throw some git in there to try to get a sense of how fast the codebase has grown over time.  After
all, superlinear growth is usually indicative of a ton of repetition and therefore unnecessary code complexity.</p>

<!-- more -->


<p>First, starting with walking the git repo.  <code>git rev-list &lt;branch&gt;</code> should do what we want it to, but in the case of
larger repos it the list can get a bit unwieldy/huge.  Enter <code>awk</code>, which lets you do a bunch of neat things with your
text but most importantly has an easy variable for line number, of all things <em>(note to self: learn2awk better?)</em>, thus:
<code>awk 'NR % &lt;n&gt; == 0'</code> to get only every nth revision list.  Combine that with the same reading as above, and do a
similar scala file find with a linecount, and the command is as follows: <em>(Yes, in this particular project I dev&rsquo;d right
in master instead of using a nvie-style git-flow.  Bad developer, bad!)</em></p>

<p><code>bash
git rev-list master | awk 'NR % 20 == 0' | while read revhash; do git checkout -q $revhash | \  
&amp;&amp; find . -name '*.scala' | xargs cat | wc -l; done
</code></p>

<p>The more finicky among us might comment right about now that the command is already pretty huge and nigh unreadable if
revisited in about two weeks&mdash;and he&rsquo;d be right.  But this is a quick one-off hack for some interesting info (something
that unix tools are absolutely amazing at), and if I cared that much I&rsquo;d probably write a real script, or at least
re-format it into a proper bash function.</p>

<p>So the above command gives us a bunch of line counts which is useful, but it doesn&rsquo;t really give us a sense of the
progression.  At this point I&rsquo;d usually either 1) compose some huge complicated thing that kept track of the current
line AND the previous in an attempt to do math, or 2) give up and write a real script for it later, but one of the DAS
videos showed something that was completely new to me: using <code>jot</code> to create a chart.  Even if I learned nothing else,
this alone made everything worth it.  Very quickly&hellip;</p>

<p>```bash
&ndash;> % jot &ndash; 1 5</p>

<h1>print range 1 to 5</h1>

<p>1
2
3
4
5
&ndash;> % jot -b &lsquo;*&rsquo; &ndash; 1 5</p>

<h1>range 1 to 5, printing &lsquo;*&rsquo; instead</h1>

<p>*
*
*
*
*
&ndash;> % jot -b &lsquo;*&rsquo; &ndash; 1 5 | xargs</p>

<h1>For all its magic, xargs just chunks up your input to be used as args.</h1>

<hr />

<p>&ndash;> % jot -b &lsquo;*&rsquo; &ndash; 1 5 | xargs | tr -d &lsquo; &rsquo;</p>

<h1>And tr to translate.  Side note: as a recovering Perl user, it slightly annoys me that there&rsquo;s a tr util but not an s</h1>

<h1>util.  But I guess that&rsquo;s what sed is for&hellip;?</h1>

<hr />

<p>```</p>

<p>And now all that&rsquo;s left is to combine the <code>jot</code> magic with the above command by reading a the linecount into a variable
called <code>lines</code>, using that in the <code>jot</code> call, and printing everything out.  In the interest of full disclosure, here&rsquo;s
the final command along with the output from my project:</p>

<p><code>``bash
-&gt; % git rev-list master | awk 'NR % 20 == 0' | while read revhash; do git checkout -q $revhash &amp;&amp; \  
find . -name '*.scala' | xargs cat | wc -l | \  
read lines &amp;&amp; ((hashes = $lines / 100)) &amp;&amp; \  
echo "</code>jot -b &lsquo;#&rsquo; &ndash; 1 $hashes | xargs | tr -d &lsquo; &rsquo;` $lines"; done</p>

<h6>################################################### 5700</h6>

<h6>############################################### 5333</h6>

<h6>############################################# 5151</h6>

<h6>######################################### 4796</h6>

<h6>####################################### 4530</h6>

<h6>############################### 3786</h6>

<h6>############################# 3528</h6>

<h6>############################## 3660</h6>

<h6>############################## 3615</h6>

<h6>########################## 3208</h6>

<h6>###################### 2848</h6>

<h6>###################### 2832</h6>

<h6>###################### 2855</h6>

<h6>##################### 2786</h6>

<h6>################## 2418</h6>

<h6>############### 2186</h6>

<h6>############ 1834</h6>

<h6>########## 1664</h6>

<h6>######## 1412</h6>

<h6>###### 1270</h6>

<h6>##### 1179</h6>

<h6>## 892</h6>

<h6>651</h6>

<h4>420</h4>

<h1>138</h1>

<p>```</p>

<p>The growth at the beginning looked pretty normal, and I must say I&rsquo;m slightly happy that around the middle it remained
constant, and even took a slight dip afterwards.  After the dip though it seems like the growth started shooting up
again, which is not a good sign.  This is consistent with my personal experience, as I recall starting to really throw
in the super-hacks at around that time, so everything is probably due for another refactor.</p>

<p>In closing, I&rsquo;d like to remark that while this post was pretty monolithic and it took a lot of text to explain
everything for the first time, in real life this command probably took about 2-3 minutes to write.  And that&rsquo;s what I
find these utils are really really good at&mdash;Quick dirty answers to the little &ldquo;I wonder&hellip;&rdquo; / &ldquo;What if&hellip;&rdquo; questions
that tend to pop up while coding.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure First Impressions]]></title>
    <link href="http://alexkuang.github.io/blog/2013/12/20/clojure-first-impressions/"/>
    <updated>2013-12-20T14:05:00-05:00</updated>
    <id>http://alexkuang.github.io/blog/2013/12/20/clojure-first-impressions</id>
    <content type="html"><![CDATA[<p>After achieving some measure of familiarity with Scala, and with newfound copious amounts of free time, I decided I
wanted to see more of what the functional world had to offer.  The obvious choices were Haskell and Clojure; but while
Haskell has the upper hand in functional purity and a crazy advanced type system, I like to think I&rsquo;m a pragmatic guy at
heart and Clojure seemed more practical.  I haven&rsquo;t worked with it too extensively, but my experience so far can be
summarized by two words: Simple and composable.</p>

<h4>The language</h4>

<p>Clojure is a refreshingly simple language.  Despite my last foray into a Lisp being about half a decade ago, the
learning curve was much gentler than I&rsquo;d expected.  Maybe it&rsquo;s because I was already in a functional programming
mindset, but the straightforward syntax and <a href="http://clojure-doc.org/">abundance</a>
<a href="http://clojure.org/getting_started">of</a> <a href="http://clojure.org/cheatsheet">documentation</a> probably helped.  And on a
completely subjective level: <code>iDislikeCamelCase</code>, and <code>clojure-case-is-pretty-neat</code>.</p>

<h4>The ecosystem</h4>

<p>Of course, the overall enjoyability of using a language doesn&rsquo;t depend solely on the core language, but also the
libraries and toolchain available.  Most of the libraries I&rsquo;ve seen keep in line with the design of the language: super
lightweight, super simple, super composable, and as a result super easy to ramp up on and use.  Theoretically that
should just describe all good library design in general, but I feel like the clojure community takes it especially to
heart.</p>

<p>Compojure, for example, chose to implement its url
<a href="https://github.com/weavejester/compojure/wiki/Destructuring-Syntax">destructuring</a> to closely follow the destructuring
available in stock Clojure <code>let</code>s expressions.  I can&rsquo;t help but draw the comparison to Scala, where I&rsquo;d be more likely
to find that url decomposition exists only in the form of an exotic DSL.  Another huge example for me is the difference
between the simplicity of the Clojure build tool Leiningen and the craziness of Scala&rsquo;s SBT.  Sorry SBT&mdash;You work very
well, but I&rsquo;d rather not have to google what the <code>&lt;++=</code> operator does every time I touch the build.</p>

<h4>With vim</h4>

<p>One of my original reasons for leaning clojure was its close integration with
<a href="http://www.chris-granger.com/lighttable/">LightTable</a>.  As it turns out, the functionality I liked could be
replicated in vim with <a href="https://github.com/tpope/vim-fireplace">fireplace.vim</a>&rsquo;s quasi-insta-repl and insta-doc, due in
no small part to leiningen and nrepl&rsquo;s awesomeness.
<a href="https://github.com/kien/rainbow_parentheses.vim">Rainbow parentheses</a> is also pretty cool, and has been useful enough
that I will probably keep it on even when I don&rsquo;t have to deal with the hardcore levels of parens in Lisps:</p>

<p><img class="center" src="/images/rainbow-parens.png"></p>

<h4>Overall</h4>

<p>If programming languages could be graded on usability, Clojure would get full marks.  It has been a breath of fresh air
after dealing with the crazy complexity in Scala.  Undoubtedly working through the latter had a part in making the
former much easier, and Scala will always have a place with me, but for now I find myself slowly joining the rest of the
Clojure bandwagon.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zelda as a Metaphor for Complexity]]></title>
    <link href="http://alexkuang.github.io/blog/2013/12/11/zelda-as-a-metaphor-for-complexity/"/>
    <updated>2013-12-11T18:29:00-05:00</updated>
    <id>http://alexkuang.github.io/blog/2013/12/11/zelda-as-a-metaphor-for-complexity</id>
    <content type="html"><![CDATA[<p>Recently, my gaming bandwidth has been taken up by the new Zelda game, A Link Between Worlds.  It&rsquo;s been a while since
my last trip to Hyrule, but I&rsquo;ve always loved the ingenuity behind the dungeons, especially the ones in Ocarina of Time
which could take upwards of hours (Water Temple, I&rsquo;m looking at you) to complete on the first run.  One of them jumps to
mind particularly: The Forest Temple, a dungeon you encounter in the early-mid game immediately after gaining access to
adult Link.</p>

<p>At first glance, it seems like a completely normal dungeon&mdash;You&rsquo;ve got your wolves, you&rsquo;ve got your carnivorous plants,
and the obvious puzzle in the form of 4 torches that have to be lit.  Fairly straightforward, until the game hits you
with this:</p>

<p><img class="center" src="/images/forest-temple-hallway.jpg"></p>

<p>The first time you hit the twisting hallway, you have to follow it as-is to the other side, your perspective being
warped, to end up in a room with you standing on its &ldquo;wall&rdquo;.  On the &ldquo;floor&rdquo; is a chest, inaccessible in your current
state, and further on is a door you don&rsquo;t have the key to.  After a few more rooms and a battle with some wolves, you
end up with the bow which allows you to hit a switch to un-twist the hallway, bringing a completely new
perspective to the rooms&mdash;Most obviously, the chest from the earlier &ldquo;floor&rdquo; is now reachable, and after a little
contemplation and a lot of climbing, you get the key to the previously locked door&hellip;  <em>Which you can&rsquo;t access until you
re-twist the hallway.</em></p>

<p>This simple sequence is, in essence, what makes the classical Zelda dungeons challenging and oh so much fun.  In
addition to an &ldquo;item of the moment&rdquo;, each area contains an inventive mechanic that completely changes the landscape
of the entire dungeon.  A room is completely different when your perspective is rotated, platforms become traversable
after you flood the floor with sand, and so on.  It&rsquo;s no longer just <em>Push a block over here</em>, it&rsquo;s <em>Push a block over
here to change the water level so we can push that other block, and then change the water level back to align the two
blocks properly and maybe we can finally get to that chest over there.  Oh wait, that didn&rsquo;t work, maybe if I switch the
water level back BEFORE moving the second block&hellip;</em></p>

<p>Sound familiar?  The hardest dungeons' mechanics tend to use some piece of outside state to introduce exponentially more
complex interactions between the existing items that Link already has access to.  Interactions that now depend not only
on the current environment, but also the configuration of surrounding environments, and probably the order that
everything was done as well.  Keeping track of all that is welcome, even enjoyable, when I&rsquo;m playing Zelda.  But I have
no wish to be dealing with such things when I&rsquo;m trying to make sure my code is doing what I want it to.</p>
]]></content>
  </entry>
  
</feed>
