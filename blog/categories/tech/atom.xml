<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tech | alex kuang]]></title>
  <link href="http://alexkuang.github.io/blog/categories/tech/atom.xml" rel="self"/>
  <link href="http://alexkuang.github.io/"/>
  <updated>2014-07-16T15:57:21-04:00</updated>
  <id>http://alexkuang.github.io/</id>
  <author>
    <name><![CDATA[Alex Kuang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[asciinema]]></title>
    <link href="http://alexkuang.github.io/blog/2014/07/16/asciinema/"/>
    <updated>2014-07-16T15:40:00-04:00</updated>
    <id>http://alexkuang.github.io/blog/2014/07/16/asciinema</id>
    <content type="html"><![CDATA[<p>I was tooling around the other day and discovered a service called <a href="https://asciinema.org">asciinema</a> which provides
terminalcasts&mdash;essentially, &ldquo;screencasts&rdquo; with terminal I/O.  This is awesome for a few reasons.</p>

<p>From a content consumer&rsquo;s standpoint, it&rsquo;s often hard to follow a blog post that&rsquo;s trying to outline a command line tip,
or a vim tip, for the simple fact that the static nature of writing alone isn&rsquo;t optimal for showing the flow between
&ldquo;steps&rdquo; (commands, keystrokes, what have you) and &ldquo;output&rdquo; (what you&rsquo;re supposed to see after executing commands).
Having a dynamic format for demos helps with this greatly.  Sure, there are screencasts, but that involves dealing with
videos and their associated heavy Flash Player bullshit.  asciinema is rendered with just bits of html and js.</p>

<p>From a wannabe content producer&rsquo;s standpoint&hellip;  Writing is <em>hard</em>.  Writing while crafting appropriate examples is
harder.  Doing all that while struggling with capturing the nature of the examples in plain text?  No thanks.
Again&mdash;Yes, there is the option of screencasts, but those are painful to set up.  Screencasts means worrying about
things like capturing software, background audio, What Tab Do I Have Open In My Browser, and Will Video Compression
Screw My Text Legibility.  As a consummately lazy person who only wants to do short self-contained clips for now&hellip;
That&rsquo;s way too big of a barrier.  asciinema is easy&mdash;Just install, then <code>asciinema rec</code> from the terminal and <code>&lt;CTRL-D&gt;</code>
to exit and upload.</p>

<p>And embedding takes 2 seconds&mdash;Check it!</p>

<script type="text/javascript" src="https://asciinema.org/a/10785.js" id="asciicast-10785" async></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bracket Expansion in the Shell]]></title>
    <link href="http://alexkuang.github.io/blog/2014/06/25/bracket-expansion-in-the-shell/"/>
    <updated>2014-06-25T18:58:00-04:00</updated>
    <id>http://alexkuang.github.io/blog/2014/06/25/bracket-expansion-in-the-shell</id>
    <content type="html"><![CDATA[<p>Just a quick post to show of a neat little trick for those who are more command-line-driven: bracket expansion.</p>

<p>Basically, bracket expansion means that <code>some-string-called-{x,y}-here</code> desugars in the shell to
<code>some-string-called-x-here some-string-called-y-here</code>.  This is especially useful if, say, you&rsquo;re in a Java-like
directory structure and you accidentally placed your source class in your test folder, and you need to move it back:</p>

<p>```bash</p>

<h1>desugars into mv src/test/java/com/foobar/app/Class.java src/main/java/com/foobar/app/Class.java</h1>

<p>mv src/{test,main}/java/com/foobar/app/Class.java
```</p>

<p>Or if you&rsquo;ve already committed to source control, this also works quite nicely with <code>git mv</code>.  Another nice example from
recent memory is, say, if you were cleaning up some directories nested by date and wanted to only wipe a few months:</p>

<p><code>bash
rm /posts/2014/{01,03,06,07}/*.html
</code></p>

<p>Anyway, just a quick little post for a neat little trick.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some CH Backport vimporn]]></title>
    <link href="http://alexkuang.github.io/blog/2014/05/02/some-ch-backport-vimporn/"/>
    <updated>2014-05-02T20:45:00-04:00</updated>
    <id>http://alexkuang.github.io/blog/2014/05/02/some-ch-backport-vimporn</id>
    <content type="html"><![CDATA[<p>In some ways, the curehappiness backports came at the perfect time, since I&rsquo;d been looking for something to sharpen my
vim skills on.  Technically I work in vim day-to-day, but usually the rest of the mental activity involved with coding
end up pushing my vim-awareness more to the side than I&rsquo;d like.  This backport, however, was heavy on repetition but
otherwise braindead, so it made the perfect set of practice exercises.  And since I had such fun (hey, it was a really
boring Sunday afternoon&hellip;), I figured I&rsquo;d share in case anyone else finds this useful&mdash;or even better, has suggestions
to make similar tasks more efficient in the future.  Please note that this is a rather quick fly-by and assumes moderate
familiarity with vim mechanics.  I&rsquo;ll probably do more slow, detailed posts in the future&hellip;</p>

<!-- more -->


<h3>The Start</h3>

<p>Since I had all the posts in html form, using <code>:set paste</code> and copy-pasting from the browser seemed the most
straightforward.  Or at least, more straightforward than trying to manually un-mangle everything in the post after being
wrung through wordpress.  For most of the posts, the paste result looked something like this:</p>

<p><img class="center" src="/images/ch-backport-vim/start.png" width="598" height="440"></p>

<p>Not too awful, but the TODO is obvious:</p>

<ol>
<li>Needs a banner image</li>
<li>Lines need to be wrapped (not strictly necessary, but personal pet peeve)</li>
<li>Ingredients + Methodology need to be de-dented</li>
<li>Ingredients needs to be an unordered list</li>
<li>Methodology needs to be an ordered list.</li>
</ol>


<p>Technically I guess headings need to be put in too, but since headings are simply <code># HEADING 1</code>, <code>## HEADING 2</code>, etc, in
markdown, that&rsquo;s pretty trivial.</p>

<h3>Banner image</h3>

<p>This bit was easy.  I have a plugin installed called <code>vim-snipmate</code> (check it out
<a href="https://github.com/garbas/vim-snipmate">here</a>) that&rsquo;s just built for stuff like this.  Simply put, defining the snippet
below:</p>

<p>```
snippet img</p>

<pre><code>{% img center ${1} %}
</code></pre>

<p>```</p>

<p>allowed me to type <code>img&lt;TAB&gt;</code> and it would insert <code>{% img center %}</code>, with my cursor right after the <code>center</code> and ready
to drop in my picture url.</p>

<h3>Wrapping lines</h3>

<p>vim has a normal mode command, <code>gq</code>, that does this quite well.  Personally I like using visual line mode (<code>V</code>) to
select the text to wrap, but using it with a motion (e.g., <code>gq}</code> to wrap a block) works as well.</p>

<p><img class="center" src="/images/ch-backport-vim/gq-before.png" width="598" height="440"></p>

<p><img class="center" src="/images/ch-backport-vim/gq-after.png" width="598" height="440"></p>

<p>I only wrapped the plain paragraphs here, as there is still some fancy dedenting and formatting to do with the Ingredients
and Methodology sections first.</p>

<h3>De-denting</h3>

<p>The vim command for de-denting is <code>&lt;</code>.  Once again, combining with visual line mode or a motion (ex: <code>&lt;}</code>) makes it
quick and easy.  (Just in case&mdash;Yes, <code>&gt;</code> is the command for indenting)</p>

<h3>Ingredients => Unordered List</h3>

<p>This one, I&rsquo;ll admit, is a little snazzy.  I used the lesser-known cousin of visual and visual line mode, visual block
mode (accessed via <code>&lt;Ctrl&gt;-V</code>).  Once selecting the first characters of the lines I wanted with visual block, I could
hit <code>&lt;Shift-I&gt;</code> to drop into insert mode before current character, <code>-</code> to insert what I wanted, then <code>&lt;ESC&gt;</code> to apply
to everything in the selection.</p>

<p><img class="center" src="/images/ch-backport-vim/ul-before.png" width="598" height="440"></p>

<p><img class="center" src="/images/ch-backport-vim/ul-during.png" width="598" height="440"></p>

<p><img class="center" src="/images/ch-backport-vim/ul-after.png" width="598" height="440"></p>

<p>Note that this is also a great way to mass-comment blocks of code in languages that only support single line comments
with <code>#</code> or whatnot.</p>

<h3>Methodology => Ordered List</h3>

<p>And of course, the best is for last.  Ordered lists in markdown, logically, can be formatted something like this:</p>

<p><code>
1. item 1
2. item 2
3. item 3
</code></p>

<p>However, it&rsquo;s actually possible to cheat and still get ordered list output by doing:</p>

<p><code>
1. item 1
1. item 2
1. item 3
</code></p>

<p>It turns out that the markdown spec doesn&rsquo;t care about the order of the numbering as long as the lines begin with
numbers in that format.  So technically, I could use the same trick as the Ingredients Unordered List except inserting
<code>1.</code>, and I&rsquo;d be done.</p>

<p>&hellip;  But where&rsquo;s the fun in that?</p>

<p>So here&rsquo;s another tidbit: in vim, if you place the cursor over a number and hit <code>&lt;Ctrl&gt;-A</code> in normal mode, it increments
the number.  In a very smart way, too&mdash;it takes into account all of the digits, not just the one under the cursor.
Using this, it&rsquo;s pretty easy to write a vim macro (namely, a series of recorded keystrokes that can be repeated).</p>

<p>Rather than explain in long form, it seems easier just paste the sequence and annotate it.</p>

<p>```sh
qq<sup>yaWjP</sup>^^Aq # Complete keystroke sequence</p>

<pre><code>         # Note that ^A is one character--see below for details
</code></pre>

<p>qq   # Start recording keystrokes into the q register
^    # Go to first non-blank character of line
yaW  # yank (copy) a Word&mdash;Capital W means a &ldquo;word&rdquo; is terminated only by spaces, not punctuation like &ldquo;&ndash;&rdquo;
j    # Go down a line
P^   # Paste before cursor, then go back to first non-blank character
^A   # Increment number
q    # Stop recording
```</p>

<p>It ends up looking something like this, played out:</p>

<p><img class="center" src="/images/ch-backport-vim/mac-1.png" width="598" height="440"></p>

<p><img class="center" src="/images/ch-backport-vim/mac-2.png" width="598" height="440"></p>

<p><img class="center" src="/images/ch-backport-vim/mac-3.png" width="598" height="440"></p>

<p><em>(Aside: I should start making gifs again for stuff like this&hellip;  Perhaps another day when I have more time.)</em></p>

<p>Once the macro is recorded, it can be played back via <code>@q</code>, or whichever register it was recorded into.  More
importantly, because it resets to the right positions in the lines and moves down automatically, it can actually be
repeated!  e.g., <code>2@q</code> turns this:</p>

<p><code>
1. item 1
item 2
item 3
</code></p>

<p>into this:</p>

<p><code>
1. item 1
2. item 2
3. item 3
</code></p>

<p>Writing macros to position in a looping way like this is another post altogether, but suffice to say this saved a TON of
time over multiple posts.  Granted, it still depends on the <code>1.</code> being inserted manually, but that&rsquo;s pretty trivial I
think.</p>

<p>Another neat thing that might not immediately be obvious is that regular yanking (or copying, if you will) goes into the
same registers as macro recordings.  So you can use <code>"qp</code> to paste the contents of your macro into a buffer to map it to
keys or functions (ex: <code>nnoremap &lt;leader&gt;o ^yaW[...]</code>).</p>

<p>Furthermore, this means that if a recording goes wrong, you can just paste it out, edit it, then select and <code>"qy</code> (or
similar) to yank back the edited form.  The only caveat is that certain characters like <code>^A</code> may paste out and LOOK like
two characters, but is infact only one character.  Not a big deal if you&rsquo;re just yanking and replacing text, but it can
be a weird GOTCHA if you&rsquo;re trying to write a macro by hand or something.  (In this particular case, the <code>^A</code> character
can be obtained in insert mode via <code>&lt;Ctrl-V&gt;&lt;Ctrl-A&gt;</code>, but it pays to watch out in general for stuff like this)</p>

<p>So there you have it, ladies and gentlemen&mdash;My idea of fun on a Sunday afternoon&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hack Days Are Awesome]]></title>
    <link href="http://alexkuang.github.io/blog/2014/04/26/hack-days-are-awesome/"/>
    <updated>2014-04-26T15:32:00-04:00</updated>
    <id>http://alexkuang.github.io/blog/2014/04/26/hack-days-are-awesome</id>
    <content type="html"><![CDATA[<p>Earlier this week, we had a &ldquo;hack day&rdquo; at work.  Or more precisely, two hack days.  I think the name is pretty
self-explanatory&mdash;work on whatever you want, which can be something helpful to or completely unrelated to your currently
assigned tasks, as long as it&rsquo;s something interesting.  Now, &ldquo;hack time&rdquo; is a pretty established institution in the
software world, especially amongst the hip startuppy companies.  I&rsquo;m sure everyone has heard of Google&rsquo;s &ldquo;20% time&rdquo; idea
by now, and the story of Microsoft&rsquo;s Xbox starting as a side-project.  Proponents (especially those who are trying to
pitch a business case to managers with varying degrees of pointy-haired-ness) cite building camaraderie, stimulating
creativity, and increasing morale as some of the biggest benefits.</p>

<p>None of this is news.  But I came away this week with a surprising realization.  When coding professionally for business
use cases, things like resilience and stability are often at the top of the requirement list&mdash;Or at least, I&rsquo;d really
hope so.  If it&rsquo;s not, kindly give me the name of your company so I know what stock to not buy ;).  To this end, coding
is never as simple as just sitting down and banging away at a keyboard.  It involves testing, discussions, design,
thinking, more testing, more thinking, and so on and so forth.</p>

<p>Don&rsquo;t get me wrong.  These are all very, very good things.  But I, at least, was surprised at how nice it was to just
sit down and bang away at a keyboard with abandon.  It sounds rather obvious in hindsight, but compared to the usual
rigorously managed process of software development at work, it&rsquo;s super liberating to just cowboy out some code with no
considerations other than speed and getting the job done.  And what&rsquo;s more, I realized that I had constrained myself to
the same careful management in all of my personal projects as well, especially when prototyping out potential MVPs and
such.  Again&mdash;Definitely a good thing, in most cases.  But after this week I&rsquo;m thinking that injecting some &ldquo;hack
day&rdquo;-ish time into my personal projects is in order, if for no reason other than to let the crazy out.</p>

<p><strong>tl;dr</strong> &ndash; Hack days are awesome.  I should do more of them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IAP and Mobile]]></title>
    <link href="http://alexkuang.github.io/blog/2014/02/03/iap-and-mobile/"/>
    <updated>2014-02-03T21:43:00-05:00</updated>
    <id>http://alexkuang.github.io/blog/2014/02/03/iap-and-mobile</id>
    <content type="html"><![CDATA[<p>In-app purchases and the free-to-play model have long been anathema to self-declared &ldquo;real gamers&rdquo; everywhere, but the
recent release (or re-release?) of classics like Tales of Phantasia and Dungeon Keeper seems to have brought yet
another wave of angry discussion to the forefront.  Understandably, people
<a href="http://www.baekdal.com/opinion/how-inapp-purchases-has-destroyed-the-industry/">are</a>
<a href="http://kotaku.com/a-cancer-thats-eroding-the-market-reactions-to-eas-1515121353">very</a>
<a href="http://www.escapistmagazine.com/articles/view/editorials/reviews/10956-Dungeon-Keeper-Mobile-Review-Wallet-Reaper">angry</a>
<a href="http://toucharcade.com/2014/01/27/tales-of-phantasia-review/">that</a> their beloved classics are being turned into f2p
&ldquo;cash farms&rdquo;, but personally I think saying the model is &ldquo;destroying the industry&rdquo; is a bit hyperbolic.</p>

<p>In response, toucharcade recently published a post pointing out an article that takes a <a href="http://toucharcade.com/2014/02/03/iap-isnt-actually-destroying-the-games-industry/">stance to the
contrary</a>.  The original piece is
definitely worth a read to anyone who cares about the topic; it makes a number of good arguments regarding pricing
pressures and facing a realistic economy for the unprecedented levels of competition on iOS.  But it also notes that the
concept of paying for more content&mdash;the &ldquo;original IAP&rdquo;&mdash;dates back to the beginning of the industry with coin op arcade
machines.  This seems like a valid comparison superficially, but as someone who&rsquo;s shelled out way too many quarters on
the likes of Gauntlet Dark Legacy I feel like there are two fundamental differences that this argument glosses over.</p>

<p>First: arcade games always had a large skill component.  It might take a while to get good enough, but it was always
possible to beat the game consistently on sheer skill alone.  The game might have been hard, but the balance was never
so broken as to render completion impossible without the extra coins.  Second: in the cases of the most nefarious IAPs,
you&rsquo;re not paying to spend more time with the game; you&rsquo;re paying for the exact opposite.  When an IAP does nothing but
shorten a timer or increase a premium resource, you&rsquo;re essentially paying more money to decrease the time you spend with
the game.  All &ldquo;Skinner&rsquo;s Box From Hell&rdquo; arguments aside, that is probably what I object to the most.  I don&rsquo;t have an
indiscriminate hatred for the f2p model&mdash;there are definitely cases of it being executed well&mdash;but I have a fundamental
problem with paying more for less.</p>
]]></content>
  </entry>
  
</feed>
